[
  {
    "objectID": "articles/from-pyparallel-to-python-free-threading/index.html",
    "href": "articles/from-pyparallel-to-python-free-threading/index.html",
    "title": "DRAFT: From PyParallel to Python Free-Threading",
    "section": "",
    "text": "Introduction\n  Background\n  \n  Greg Stein’s Free Threaded Patch (1996)\n  \n  Python 1.4\n  \n  Objects and VarObjects\n  Reference Counting\n  \n  Greg’s Free-Threaded Approach\n  \n  PyParallel\n  \n  Genesis\n  \n  The python-ideas@ asyncore discussion\n  Reviewing Existing Attempts\n  The Hunch\n  \n  Implementation\n  \n  Detecting Parallel Threads\n  Instrumenting Thread-Sensitive Calls\n  Changes to PyObject\n  Reference Counting\n  Memory Allocation\n  Memory Reclaimation\n  Garbage Collection\n  Async I/O\n  \n  Limitations\n  \n  Parallel Code Has To Be Entered Via Protocol Callbacks\n  You Couldn’t Do A Lot Of Things In Parallel Callbacks\n  Third-Party Libraries Required Recompilation\n  The Code Was… Hideous\n  It Was Windows-only\n  \n  Thread Pool APIs and Asynchronous I/O\n  Visual Studio Debugger\n  \n  \n  Performance\n  More Information\n  \n  \n  Python Free-Threading\n  \n  Implementation\n  \n  Changes to PyObject\n  \n  Python 3.13 PyObject\n  Free-Threaded PyObject\n  \n  Object Thread ID: uintptr_t ob_tid\n  Reference Counts: ob_ref_local and ob_ref_shared\n  Per-Object Locking: PyMutex ob_mutex\n  Garbage Collection State: ob_gc_bits\n  \n  \n  \n  \n  Parallelopedia\n  \n  HTTP Server\n  Wiki Server\n  \n  PyTorch and Free-Threading\n  \n  Training a local GPT2\n  Multi-threaded Inference\n  \n  Appendix\n  \n  PyParallel Backstory\n  \n  Becoming a Python Committer\n  \n  \n  Colophon\n  \n  Quarto & Markdown\n  AI Tooling\n  \n  LM Studio\n  Aider\n  \n  PyTorch, Deep Neural Networks, LLMs, and Andrej Karpathy’s YouTube Series\n  \n  Comments\nThis article is sponsored by Meta in collaboration with Quansight and OpenTeams."
  },
  {
    "objectID": "articles/from-pyparallel-to-python-free-threading/index.html#greg-steins-free-threaded-patch-1996",
    "href": "articles/from-pyparallel-to-python-free-threading/index.html#greg-steins-free-threaded-patch-1996",
    "title": "DRAFT: From PyParallel to Python Free-Threading",
    "section": "Greg Stein’s Free Threaded Patch (1996)",
    "text": "Greg Stein’s Free Threaded Patch (1996)\nThe first attempt to remove the GIL was by Greg Stein in 1996, with a patch against Python 1.4. (1996! I hadn’t even heard of Python back in 1996—I was only in tenth grade at the time.)\nThe python-dev@ mailing lists weren’t public until a few years after that, so we can’t see the specific discussions that were had between core Python developers at the time. Greg opines on the experience in August 2001 in this python-dev@ email titled Free threading. Guido van Rossum also furnishes some pertinent information on the topic in this September 2007 post titled It isn’t Easy to Remove the GIL.\nGreg’s approach introduced fine-grained locking to all Python objects, which, unfortunately, introduced pretty severe performance penalties that were deemed too great for the patches to ever make it into mainline Python. With the patches applied, all Python code was slowed down by about 40%-50%, regardless of whether it was single-threaded or multi-threaded code.\nFast-forward 15 years or so, and David Beazley wrote a detailed post in August 2011 about Greg Stein’s work in an article titled: An Inside Look at the GIL Removal Patch of Lore. As part of this article, Dave obtains the original Python 1.4 source, applies Greg Stein’s patches, and takes the resulting free-threaded Python for a run.\nDave confirms that, indeed, the slowdown introduced by this approach—where every increment and decrement reference results in either an interlocked op or a mutex lock and unlock—is prohibitively expensive.\nIn writing this article, I reviewed Dave’s article again, and attempted to download Python 1.4 so that I could apply Greg’s patches as well. Unfortunately, the download link Dave cites now 404s, so I googled “download Python 1.4 source”, and, funnily enough, the first hit is a Github repo titled tpn/python-1.4 that, ’lo and behold, is a repo I put together twelve years ago doing exactly that:\n\nImporting the original Python 1.4 source\nApplying Greg’s patches\n\n\nPython 1.4\nLet’s take a look at Python 1.4 and the changes Greg made in the first known effort of someone attempting to remove the Python GIL. All future efforts at this herculean task were influenced by Greg’s work—specifically, in that he identified what absolutely doesn’t work—so it’s valuable to review the core technical aspects of his free-threading patch.\n\nObjects and VarObjects\nPython’s main object structure, the PyObject, hasn’t changed much over the years. For non-container objects (i.e. scalars such as integers, floats, etc.) the structure is simply a reference count and a pointer to a type object:\ntypedef struct {\n    int ob_refcnt;\n    PyTypeObject *ob_type;\n} PyObject;\nContainer objects–otherwise known as “variable” objects–are represented via the PyVarObject structure. These structures “inherit” the base PyObject layout, and then add an additional field for tracking the number of elements contained by the object: the ob_size field. In Python 1.4, the structure looked like this:\ntypedef struct {\n    int ob_refcnt;\n    PyTypeObject *ob_type;\n    int ob_size;\n} PyVarObject;\n\n\n\n\n\n\nActual C Header Code\n\n\n\n\n\nThe actual C header code for defining these structures is more baroque; the relevant Python 1.4 Include/object.h code looks like this:\n#define PyObject_HEAD \\\n    int ob_refcnt; \\\n    struct _typeobject *ob_type;\n#define PyObject_HEAD_INIT(type) 1, type,\n\n#define PyObject_VAR_HEAD \\\n    PyObject_HEAD \\\n    int ob_size; /* Number of items in variable part */\ntypedef struct _object {\n    PyObject_HEAD\n} PyObject;\n\ntypedef struct {\n    PyObject_VAR_HEAD\n} varobject;\n\n\n\n\n\nReference Counting\nThere was no cyclic garbage collection in Python 1.4–that feature wasn’t added until Python 2.0 around the October 2000 timeframe. Reference counting was the only means for Python to reclaim the memory used by objects that were no longer needed, by way of the PyObject ob_refcnt field. Incrementing the reference simply added one to the existing value. Decrementing the reference subtracted one and checked to see if the resulting value was zero, and, if it was, the object would be deallocated via _Py_Dealloc().\nThe relevant Python 1.4 Include/object.h code used two macros named Py_INCREF() and Py_DECREF(), which looked like this:\n#define Py_INCREF(op) ((op)-&gt;ob_refcnt++)\n#define Py_DECREF(op)           \\\n    if (--(op)-&gt;ob_refcnt != 0) \\\n        ;                       \\\n    else                        \\\n        _Py_Dealloc(op)\nThese operations are inherently unsafe in a multi-threaded environment. If two or more separate threads are incrementing or decrementing reference counts to the same object in parallel, the results are effectively undefined, as there is no guarantee as to the correctness of the underlying value.\nThe solution for protecting against this was the Global Interpreter Lock, which ensured that only one thread could be running Python code at any given time.\nThus, if you’re embarking on an attempt to avoid this restriction, such that you can have multiple Python threads executing Python code simultaneously (i.e. on multi-core systems), the first thing you need to do is figure out how you’re going to handle making reference counting thread-safe.\n\n\n\nGreg’s Free-Threaded Approach\nGreg’s approach tried the most logical solution: make reference counting a thread-safe operation by using interlocked increment and decrement operations against the ob_refcnt field on NT (Windows) systems. On Linux, a mutex lock was used to protect the reference count.\nUsing a WITH_FREE_THREAD macro to gate his changes, Greg modified the reference counting logic to Include/object.h as follows:\n#ifdef WITH_FREE_THREAD\n#define Py_INCREF(op) Py_SafeIncr(&(op)-&gt;ob_refcnt)\n#define Py_DECREF(op)                       \\\n    if (Py_SafeDecr(&(op)-&gt;ob_refcnt) != 0) \\\n        ;                                   \\\n    else                                    \\\n        _Py_Dealloc(op)\n#else /* !WITH_FREE_THREAD */\n#define Py_INCREF(op) ((op)-&gt;ob_refcnt++)\n#define Py_DECREF(op)           \\\n    if (--(op)-&gt;ob_refcnt != 0) \\\n        ;                       \\\n    else                        \\\n        _Py_Dealloc(op)\n#endif /* !WITH_FREE_THREAD */\nSo, Py_INCREF(op) became a call to Py_SafeIncr(), and Py_DECREF(op) became a call to Py_SafeDecr(). On Windows, these routines were simply wrappers around the InterlockedIncrement and InterlockedDecrement intrinsics, respectively, defined here:\n#define Py_SafeIncr(pint)   InterlockedIncrement((long *)(pint))\n#define Py_SafeDecr(pint)   InterlockedDecrement((long *)(pint))\nOn non-NT systems, the Py_SafeIncr() and Py_SafeDecr() routines were aliased to _Py_SafeIncr() and _Py_SafeDecr(), respectively, which were implemented in Python/pymutex.c as follows:\n/* mutexes for the subsystems */\nPyMutex * _Py_RefMutex;\nPyMutex * _Py_ListMutex;\nPyMutex * _Py_MappingMutex;\nPyMutex * _Py_CritMutex;\n\n...\n\nint _Py_SafeIncr(pint)\n    int *pint;\n{\n    int result;\n    PyMutex_Lock(_Py_RefMutex);\n    result = ++*pint;\n    PyMutex_Unlock(_Py_RefMutex);\n    return result;\n}\n\nint _Py_SafeDecr(pint)\n    int *pint;\n{\n    int result;\n    PyMutex_Lock(_Py_RefMutex);\n    result = --*pint;\n    PyMutex_Unlock(_Py_RefMutex);\n    return result;\n}\nOof! That’s a single global mutex _Py_RefMutex protecting all reference counts for all objects. (N.B. PyMutex was a slim wrapper around pthread_mutex_t, and the lock and unlock operations simply called out to pthread_mutex_lock() and pthread_mutex_unlock() respectively.)\nCompared to simply incrementing a value in memory by one, locking and unlocking a mutex is orders of magnitude more expensive, so it’s not surprising that this approach to removing the GIL introduced brutal slowdowns—not just to new multi-threaded code, but to existing single-threaded code that wasn’t even taking advantage of the fact that there was now no GIL in place.\nNevertheless, Greg’s work tackled a lot of other important concepts which were mainlined into Python, like separating global state into per-thread state (something that is still relied upon today)."
  },
  {
    "objectID": "articles/from-pyparallel-to-python-free-threading/index.html#pyparallel",
    "href": "articles/from-pyparallel-to-python-free-threading/index.html#pyparallel",
    "title": "DRAFT: From PyParallel to Python Free-Threading",
    "section": "PyParallel",
    "text": "PyParallel\n\nGenesis\n\nThe python-ideas@ asyncore discussion\nIn October 2012, there was a discussion on the python-ideas@ mailing list titled asyncore: included batteries don’t fit. The general discussion centered around providing better asynchronous I/O primitives in Python 3.4, and eventually led to the async and yield from keywords being introduced in Python 3.5, released around two years later in September 2015.\nThat thread was also the genesis for PyParallel; a fork of Python 3.3.5 that I created to implement a proof-of-concept version of the Python interpreter that tackled not only asynchronous I/O but also multi-core parallelism.\nThere’s a comprehensive backstory section on PyParallel at the end of this article that goes into more detail. For now, I just want to focus on the implementation details of PyParallel compared to Greg Stein’s earlier work, before discussing the free-threading implementation we now have today in Python 3.13t.\n\n\nReviewing Existing Attempts\nI remember reading David Beazley’s article and a couple of YouTube videos he’d also done on the topic of the GIL. I can’t remember if it was in one of his videos (or presentations) or articles, but I remember him stating something along the lines of “the GIL is something every Python committer should be worried about”, and that really stuck with me, giving me the initial motivation to embark on the PyParallel project.\nThe first step I took was to make sure I reviewed Greg’s earlier work to see what did and didn’t work in the past. Clearly, introducing fine-grained per-object synchronization for reference counts was prohibitively expensive—the interlocked increment and decrement operations alone were bad enough, let alone the global pthread_mutex_t reference count locks.\n\n\nThe Hunch\nSo, what else could we try? My hunch was that there was a way to achieve parallelism within the Python interpreter when framed through the lens of asynchronous I/O primitives, such as a TCP/IP socket server. For example, why couldn’t a simple HTTP server be written in such a way that multiple threads could respond to incoming client requests on multiple cores simultaneously?\nIf you think about the type of server-side computation that is required to process an incoming HTTP request, it’s just pretty vanilla Python code. Sure, you may create a lot of temporary Python objects in servicing the request, but they’re only short-lived. Once you send a response back to the client, you don’t need any of those objects anymore. And you’re generally not mutating global state, so you don’t need any thread synchronization primitives during request processing.\nThe underlying operating system’s kernel is handling all of that for you behind the scenes (i.e. you can safely accept() on multiple threads against the same sockaddr_in on Linux, or AcceptEx() against a single completion port on Windows).\n\n\n\nImplementation\nSo, as it pertained to reference counting and garbage collection—all thread-sensitive things that need to be handled very carefully in a GIL-less Python—with PyParallel, I explored the notion of: what if we just didn’t do any of that in parallel thread contexts?\nThat is, instead of trying to remove the GIL, let’s keep the GIL, and instead, introduce a new concept of a parallel thread. Because if we can come up with an efficient way to determine if we’re a parallel thread at any given time, we can instrument all the thread-sensitive calls like Py_INCREF() and Py_DECREF() such that:\n\nIf we’re a parallel thread, do X, if not, do Y.\n\nX: a thread-safe alternative\nY: what we normally do (i.e. when we’re holding the GIL)\n\n\nAnd as the thread-sensitive calls we need to instrument are ubiquitous—you really can’t do much in Python before needing to Py_INCREF() or Py_DECREF() something—the viability of this approach would be entirely contingent upon finding an efficient way to detect if we’re a parallel thread.\n\nDetecting Parallel Threads\nI introduced a macro named Py_PXCTX() for PyParallel that was responsible for detecting if we were in one of these parallel threads (or parallel contexts as I referred to them in the source code).\nAs PyParallel was a Windows-only proof-of-concept, I was able to leverage an x64 intrinsic named readgsdword to interrogate the current thread’s TEB (Thread Environment Block) to obtain the current thread ID (which lives at offset 0x48 on x64 Windows). By comparing this to the known thread ID of the main thread (i.e. the thread holding the GIL), we could determine if we were a parallel thread with a couple of instructions.\nA simplified implementation looked like this:\n#define _Py_get_current_thread_id() (__readgsdword(0x48))\n\nstatic inline\nint\n_PyParallel_IsParallelContext(void)\n{\n    return (Py_MainThreadId != _Py_get_current_thread_id());\n}\n#define Py_PXCTX() (_PyParallel_IsParallelContext())\n\n\nInstrumenting Thread-Sensitive Calls\nWith the ability to quickly determine if we were a parallel thread, we could instrument all of the thread-sensitive calls to follow the aforementioned paradigm of:\n\nIf we’re a parallel thread, do X, if not, do Y.\n\nFor reference counting, the do X was literally: do nothing. E.g., instead of the standard Python reference counting mechanics that basically looked like this:\n#define Py_INCREF(op) ((op)-&gt;ob_refcnt++)\n#define Py_DECREF(op) \\\n    (--(op)-&gt;ob_refcnt == 0 ? _Py_Dealloc(op) : ;)\nThe PyParallel approach would gate the reference counting logic with the Py_PXCTX() macro, along these lines:\n#define Py_INCREF(op) (!Py_PXCTX() && ((op)-&gt;ob_refcnt++))\n#define Py_DECREF(op) \\\n    (!Py_PXCTX() && (--(op)-&gt;ob_refcnt == 0 ? _Py_Dealloc(op) : ;))\nThis is a purposefully-simplified example—the actual Py_INCREF(op) and Py_DECREF(op) calls in PyParallel eventually grew debug guards that allowed me to catch erroneous cases of, for example, the main thread attempting to mutate the reference count of an object created by a parallel thread.\nAnd in order to ascertain if any given object was created by the Python main thread, or one of these new parallel thread contexts, I had to augument the PyObject structure to capture additional state information.\n\n\nChanges to PyObject\nI made three changes to PyObject:\n\nA field I could fill with a sentinel value that unambiguously indicated from whence it came (i.e. a main thread or parallel thread): void *is_px.\nA flags field I could store pertinent per-object state in: size_t px_flags.\nA pointer to the object’s original type object: PyTypeObject *orig_type. In some situations, we would override an object’s type with a parallel-specific shim type that could intercept certain operations.\n\nTechnically, the is_px field was redundant once I introduced the px_flags field, as we could track whether or not an object was a parallel object by way of a single flag bit, so I could have shaved off 8 bytes by removing it.\nI kept it in because a) I never got around to removing it, and b) it was helpful when debugging, as the is_px field was initialized to one of two 0xDEADBEEF-style sentinel values, shown below, which made it very easy to eyeball in the debugger when traipsing through memory or crash dumps.\n#define _Py_DEADBEEF 0xdead1234beef5678 /* is_px when main thread */\n#define _Px_DEADBEEF 0x9876beef5432dead /* is_px when parallel thread */\nA side-by-side comparison of the 64-bit Python 3.3 PyObject structure and the equivalent PyParallel PyObject structure is shown below:\n\n\nPython PyObject\n\n\nPy_ssize_t ob_refcnt\n(8 bytes)\n\n\nPyTypeObject *ob_type\n(8 bytes)\n\n\n\n\nPyParallel PyObject\n\n\nvoid *is_px\n(8 bytes)\n\n\nsize_t px_flags\n(8 bytes)\n\n\nPyTypeObject *orig_type\n(8 bytes)\n\n\nPy_ssize_t ob_refcnt\n(8 bytes)\n\n\nPyTypeObject *ob_type\n(8 bytes)\n\n\n\n\nThe standard Python 3.3 PyObject structure size on 64-bit platforms was 16 bytes. The PyParallel PyObject changes introduced three 64-bit, 8-byte fields—an extra 24 bytes—for a combined total of 40 bytes.\nWhen coming up with a solution for a parallel Python (that doesn’t experience prohibitive slowdown compared to normal Python code), there are four main things you need to focus on handling, which we’ll cover in the next sections:\n\nReference counting.\nMemory allocation.\nMemory reclamation.\nGarbage collection.\n\n\n\nReference Counting\nMy hunch regarding reference counting was simple: let’s just not do it and see what happens. Such rigorous engineering! Again, I was keen on targeting the very narrow domain of an asynchronous I/O-based TCP/IP socket server, like a HTTP server, where none of the objects that are created as part of servicing an incoming request need to persist once we’ve sent bytes back on the wire to the client.\nAdditionally, if you think about the flow of a Python program that launches a HTTP server, you’ll have a main thread that does all of the module importing, setting up any global state, handling configuration, command line arguments, etc. Once all of that is done, it’ll launch the HTTP server, and use some form of event loop that allows it to serve incoming clients forever, until process termination.\nThe code responsible for handling those incoming client requests is very reactionary: you identify what path the client is requesting, figure out how you’re going to route that request (i.e. are they asking for a literal file system file, or is this an endpoint that will be serviced by Python code?), and then respond to it accordingly.\nYou’re not mutating global state (such as adding values to a global or non-local container object (list, dict, etc.)) in these callbacks.\nFinally, you can be assured that for all of the objects you rely upon as part of your request processing (i.e. HTTP URL parsing libraries, application configuration objects, etc.), by the time you’re interacting with those objects in your callback: a) they will have reference counts way above one, and b) there won’t be any other code running that could possibly result in those reference counts ever hitting zero. Those objects are effectively immortal for the duration of your parallel callback, as far as you’re concerned.\nSo who cares about incrementing and decrementing reference counts for objects we know are guaranteed to stay resident throughout the duration of our parallel callback? By avoiding reference counting entirely, we eliminate the need to figure out a way to increment and decrement reference counts between shared objects in a thread-safe manner—which was the death-knell of Greg Stein’s approach in 1996.\nBut what about reference counts for objects we create solely during our parallel thread callbacks? Remember, the whole point of an object’s reference count is to ensure the object “stays alive” until it is no longer needed, with “no longer needed” being unambiguously indicated when an object’s reference count hits zero.\nHowever, because our parallel callback code has a very finite and well-defined lifetime, all we really need to ensure is that all of the objects we create in these parallel contexts stay alive for the duration of the callback.\nThat is, we know our parallel context starts when, for example, we call the user’s data_received() routine, and we know it ends when that routine returns bytes back to us which we then send back to the client.\nAs long as we can intercept the memory allocation and reclamation routines in these parallel contexts, we can precisely control object lifetime without the need for reference counting.\n\n\nMemory Allocation\nSo, when I hit the point I needed to write a thread-safe memory allocator that would kick-in to service memory allocation requests in these parallel contexts, I picked the easiest thing I could think of: just give each parallel thread its own thread-local block allocator. This allocator would furnish all memory allocation requests that we intercepted by instrumenting calls like PyObject_New and PyMem_Malloc.\nBlock allocators are about the simplest memory allocator you can have: you have a pre-allocated block of memory (say, 4KB, or one page), a request comes in for 120 bytes, you capture the address of the current block pointer, increment it by 120 bytes, then return the captured address. If you exceeded 4KB, another page would be allocated and linked to the existing page, such that you’d have a doubly-linked-list of blocks from which allocations would be carved out.\nPrior to executing the user’s callback via PyObject_CallObject() in a parallel thread, we would issue a snapshot = PxContext_HeapSnapshot(ctx), which would “snapshot” the state of the block allocator prior to executing the user’s Python code in parallel; we would then be able to restore this snapshot upon completion of that code.\n\n\nMemory Reclaimation\nHow do you free memory associated with individual objects allocated in these parallel contexts? Well, because you’re not doing any reference counting, you have no knowledge of when any given object is no longer required at any arbitrary point within a parallel callback’s execution.\nAnd even if you did, because you’re using a block allocator that isn’t built to handle unused allocations being returned to it, there isn’t anything you could do anyway.\nHowever, what you do know, with absolute certainty, is when that user’s parallel callback has finished executing, because you’ll be sitting back in the Python interpreter’s C code, having just returned from a call to a routine like PyObject_CallObject().\nAnd because you captured a snapshot of the thread-local block allocator (or heap) via snapshot = PxContext_HeapSnapshot(ctx), prior to your call to result = PyObject_CallObject(...), once you’re finished handling the returned result (i.e. sending it back to the client via a socket send() call), you can reset the block allocator back to its starting position prior to the call via PxContext_RollbackHeap(ctx, snapshot), effectively reclaiming all memory allocated in that parallel context in one fell swoop.\nThis all worked pretty well for PyParallel. I believe it was the first time anyone had experimented with the notion of “let’s just not do any reference counting and see what happens”, and I was genuinely pleased that my hunch that it would all work out turned out to be true.\nAdditionally, as back-to-back execution of callbacks on the same thread would be continually using the same block allocator, and thus, the same blocks and corresponding virtual addresses—you’d reap all the benefits you’d expect from frequently using the same addresses: increased likelihood of cache hits and TLB hits, vastly-reduced likelihood of page faults.\nThis all worked because socket-server callbacks are pretty short-lived; you’re not allocating gobs of memory for objects with ambiguous lifetimes. You’re doing lots of little allocations with very clear lifetimes: the allocations will cease to exist once the callback returns.\nIt wasn’t perfect. You obviously couldn’t persist the objects past the lifetime of the parallel callback, as that memory was getting continually reset. And if you had a stray callback allocating a disproportionately high amount of memory, you’d end up with many page-sized blocks chained together that would have no way of getting returned to the operating system when no longer needed.\nBut as far as proof-of-concepts go, it all worked pretty well. The last thing to tackle was garbage collection.\n\n\nGarbage Collection\nA nice side-effect of not doing any reference counting is that you can’t create cyclic references between objects in the first place, which obviates the need to do any garbage collection. Thus, PyParallel’s solution for handling parallel garbage collection is simply: don’t do it, it’s not needed.\n\n\nAsync I/O\nThe workhorse of PyParallel was the PxSocket_IoLoop, some 2,000+ lines of hideous C state-machine-esque hackery that drove the completion-oriented protocol callbacks implemented by the user.\nThe protocol objects you had to use for PyParallel were similar to the current-day Protocol Python objects used by asyncio.\nAn example of what a TCP/IP socket server might look like in PyParallel follows. Note that no transport.send() routines were exposed, if you wanted to send bytes back to the client, you literally had to return a Python bytes object from your callback—this would then be sent back to the client in the most optimal fashion.\n\nclass MyProtocol:\n    # Used if you want to send static bytes to the client first.\n    initial_bytes_to_send = b'Hello (Server v1.0)'\n\n    def connection_made(self, transport):\n        # Used if you need to send dynamic bytes to the client\n        # as soon as they connect.\n        return b'Hello, the current time is ' + time.gmtime()\n\n    def data_received(self, transport, data):\n        # Called when data is received from the client.  Perform\n        # your request processing here and then return bytes to\n        # send back to the client.\n        return b'You sent: ' + data\n\n    def connection_lost(self, transport):\n        # Called when the client disconnects.\n        pass\n\n# Create the TCP/IP socket server object (PxSocket).  (PyParallel\n# initially exposed all of its parallel functionality by way of an\n# `async` module, which obviously predated the introduction of the\n# `async` keyword in Python, so the following code wouldn't be\n# valid in a modern Python 3.5+ context.)\nserver = async.server('0.0.0.0', 8080)\n\n# Register the server (transport) and protocol with the underlying\n# async machinery.  Note that this will start serving clients\n# immediately, without waiting for `async.run()`.\nasync.register(transport=server, protocol=MyProtocol)\n\n# Enter the async I/O loop.\nasync.run()\n\n\n\nLimitations\nPyParallel, was, in essence, a proof-of-concept project I predominantly hacked together over the course of about three months during a very cold Michigan Winter in 2012-2013.\nIt had many limitations, especially the first pass in that 2012-2013 timeframe. I spent a few months sprinting on it again around 2015, and addressed some of the egregious limitations like not being able to use generators in parallel contexts, and not being able to persist objects created within a parallel context outside of that context (i.e. foo['key'] = bar, where foo is a dict created in the main thread context).\nI also got it to a point where it could compete in a subset of the TechEmpower Framework Benchmarks, including non-trivial ones like accessing a PyODBC data source in a parallel context.\nNevertheless, the remaining limitations relegated PyParallel to being somewhat similar to Stackless Python, which was a nichè variant of Python that separated the C call stack from the Python call stack, but never had a chance of getting mainlined into Python.\n(Unlike Stackless, though, which had actual users like Eve Online, I am not aware of anyone using PyParallel for anything. I certainly never got any support requests for it.)\nThe next few sections capture some of the limitations that I presume kept PyParallel from becoming anything other than a proof-of-concept. Thankfully I have the luxury of writing about the failures some ten years after I wrote the underlying code, so I’m inherently less defensive about its egregious shortcomings as I would have been back then.\n\nParallel Code Has To Be Entered Via Protocol Callbacks\nBy design, I never intended to support “free-threaded” Python, i.e. you would never be able to create Python threading.Thread objects yourself, instead, you’d have to use the machinery provided to you by PyParallel, such as async.server(), async.submit_work(), etc. (This was before async became a keyword in Python.)\nThe fact that the only thing that really worked properly was a TCP/IP-based socket server speaks volumes to the lack of general applicability of the solution.\n\n\nYou Couldn’t Do A Lot Of Things In Parallel Callbacks\nYou couldn’t import modules in parallel callbacks. This wasn’t a huge limitation, you’d simply work around this by making sure you import all the modules you need at startup, before you launch your server.\nYou couldn’t call routines of modules that used a lot of caching. Pandas is a great example of this: there is a prolific amount of behind-the-scenes caching that happens in Pandas (or at least the version I was experimenting with circa 2015) when interacting with DataFrame objects. This just flat-out did not work in PyParallel—trying to persist parallel objects past the callback lifetime completely went against the grain of how PyParallel was initially architected to work.\nYou couldn’t leverage PyParallel to, for example, load large data structures in parallel. Because there was no free-threading support, nor was memory allocated in these parallel callback contexts intended to persist after the callback completed—you couldn’t spin up a bunch of threads to load some expensive data structures in parallel (i.e. reading pickles, etc.).\nThis is actually one of the patterns that I have enjoyed exploiting the most in the new free-threaded Python as its such a huge win for very little effort. I’ll cover this more later.\n\n\nThird-Party Libraries Required Recompilation\nAs PyParallel was based off Python 3.3, a lot of the great work that has since been done regarding sanitizing the Python C ABI wasn’t done yet, so modules with C code doing raw Py_INCREF() and Py_DECREF() calls would need to be recompiled to ensure they use the new PyParallel definitions.\nThis particular limitation is no different to the current state of affairs with Python free-threading: modules that need intimiate knowledge of C Python internals need to be recompiled at the very least, and sometimes will need additional code changes to ensure correct behavior when operating in a No-GIL environment.\n\n\nThe Code Was… Hideous\nI hadn’t looked at the pyparallel.c code in a long time prior to writing this article. Boy, it doesn’t hold up particularly well, in my opinion. It’s very clearly hacky proof-of-concept code that realistically had no chance of getting mainlined into Python.\nYou can peruse all of the changes required to convert Python 3.3.5 into PyParallel by reviewing the diffs folder, which I populated with diffs against base 3.3.5 sources and PyParallel counterparts. The patches to files like Include/object.h I find most interesting, as they contain most of the “thread-sensitive interception” functionality I was reliant upon.\n\n\nIt Was Windows-only\nI attribute the success of PyParallel—if we define success as being able to hack together a proof-of-concept that basically worked in about 2-3 months—to Windows. There are a couple of reasons for this, which I’ll capture in the next sections.\nIronically, I suspect the Windows-only aspect also contributed heavily to the failure of PyParallel, given that, as far as I’m aware, no-one played around or experimented with it, and it basically didn’t seem to move the GIL needle at all. (Although I was pleased to see it at least got a shout-out in the Related Work section of PEP-703, and there are parallels (heh) to some of the design decisions I made for PyParallel in the new Free-Threading work.)\nI thought at the time that it would be novel and interesting enough to nerd-snipe a few people into downloading it and messing around, but apparently not.\nI do remember some engineers from Instagram reaching out and asking about the viability of PyParallel on Linux, but alas, I didn’t have a good answer for that, given how heavily dependent it was on Windows-only features.\n\nThread Pool APIs and Asynchronous I/O\nFirst, I made extensive use of the phenomenal Thread Pool API introduced in Windows Vista. It is hard to succinctly capture just how sophisticated this particular API is, especially when paired with the NT kernel’s incredibly robust asynchronous I/O primitives, particularly the seminal OVERLAPPED structure and the Completion Port scaffolding.\nIf you’re interesting in learning more about asynchronous I/O on Windows, slide 47 of my PyParallel PyData 2013 deck is a great place to start.\nSo, I used the thread pool facilities to manage all thread dispatching for PyParallel. I didn’t have to create any threads myself, nor did I ever intend to support individual Python free-threading threads created via Python’s threading.Thread facilities. There are simply no good cross-platform threadpool alternatives that have equivalent functionality to what is provided by Windows, and a lot of that is because other operating systems just don’t have the kernel mechanisms in place to support things like thread-agnostic I/O, or true asynchronous I/O at the driver level via I/O request packets (or Irps as they’re colloquially called in kernel development circles). Neither Wine nor ReactOS have attempted to implement the Windows Thread Pool API, which I also found to be an interesting data point.\nFor the TCP/IP socket-server primary use case, enabled by the PxSocket_IoLoop() workhorse described earlier, overlapped-versions of all the socket primitives were used where possible. There aren’t any exact equivalents to these functions on platforms like Linux, the BSDs, or Mac OS.\nAll of those platforms support non-blocking read and write socket operations—which is the foundation upon which concurrency is achieved when combined with a multiplexing operation like select(), poll(), epoll(), or kqueue. But there is no way to dispatch a socket read() or write() call asynchronously in conjunction with a request for the OS to invoke a callback you provide when that asynchronous operation completes (or fails).\nNor do any of these platforms have anything remotely close to the secret sauce behind what makes I/O completion ports so special: the ability to specify a completion port’s desired concurrency, where the kernel itself will ensure that an optimal number of threads will be actively scheduled whilst servicing a completion port. I touch on this subject a little bit on slide 50, and go into more detail around slide 62.\n\n\n\n\n\n\nNote\n\n\n\nio_uring is an exception: it absolutely allows asynchronous submission of a whole range of system calls, but it doesn’t introduce a thread-agnostic I/O model, nor have any kernel participation in concurrency modulation like I/O completion ports, nor have any native thread pool integration (as there is no equivalent to the Windows Thread Pool API on any platform, Linux included).\nGenerally, leveraging io_uring in a multi-threaded environment on a contemporary Linux system would involve spinning up your own threads and setting up individual completion queues for each thread. There’s no concept of multiple threads sharing a queue in a kernel-integrated, thread-agnostic manner. Which is fine, as that’s a very Windows NT kernel solution to the problem—it just isn’t how UNIX-derived operating systems are designed to work.\nI am not disparaging io_uring in the slightest here; it is a fantastic additional to the Linux kernel that is orders of magnitude better than prior options for async I/O.\nThe point of mentioning all of this is that there isn’t feature parity between io_uring and the Windows features I leveraged in making PyParallel, so it would still require significant engineering effort to port PyParallel to non-Windows platforms. And thankfully that’s not something we’ll ever have to embark upon, as the cross-platform Python Free-Threading implementation is a far better solution to the multi-core Python problem than PyParallel ever was!\n(Also, for what it’s worth, io_uring wasn’t available in 2012 when I started hacking on PyParallel; it first appeared in the Linux kernel 5.1 in May 2019.)\n\n\nThe point of all of this is to convey that PyParallel wasn’t just Windows-only because I didn’t have the time or inclination to try compile it on other platforms—it extensively used APIs for which there are still no equivalent counterparts on other platforms, some thirteen or so years later.\nSo, if you were to try get PyParallel working on Linux or Mac OS X, for example, you’d need to write a whole bunch of thread pool and synchronization scaffolding, as well as PxSocket_IoLoop()-equivalents using whatever the underlying platform’s optimal socket multiplexing system call was.\n\n\nVisual Studio Debugger\nThe other element of developing PyParallel on Windows that I consider crucial to its success (again, defining success as getting a proof-of-concept working in about 2-3 months) was Visual Studio’s sublime debugging facilities.\nMicrosoft has always invested heavily in fantastic debugger experiences. This includes usermode application debugging via tools like Visual Studio, all the way up to kernel debugging via Windbg.\nThe first week or two of PyParallel’s development was simply stepping through the Python C code line-by-line in Visual Studio’s debugger, building up a mental model of exactly how the interpreter worked at the lowest-level when executing a Python program. I didn’t write a line of code during this initial exploratory period—I was genuinely just traipsing through the debugger observing how Python worked and building up my situational awareness and mental model. Incredibly valuable experience, by the way. It’s my favorite way of getting up to speed with an unfamiliar code base.\nVisual Studio Code is pretty good at debugging C programs visually these days on non-Windows platforms—I certainly used it a lot at Voltron on our Theseus product, which was exclusively in Linux and C++. However, Visual Studio Code didn’t appear until 2015, whereas my initial PyParallel hacking was toward the end of 2012.\nOnce I started actually writing code for PyParallel, again, the Visual Studio debugger was indispensable. Particularly due to how frequently I’d be crashing in the course of normal development, heh. It was incredibly handy with a few mouse clicks to be able to freeze all threads OTHER than the one you were interested in, step execution through that, then resume, etc. You can do all of this via gdb and lldb when doing console debugging on UNIX-ish platforms, but it’s definitely not as convenient as a full-featured IDE for debugging.\n\n\n\n\nPerformance\nNow, for all its limitations and ultimate market failure, PyParallel excelled at the one thing it was designed to do well: async I/O-oriented TCP/IP servers, where users would implement protocol classes that featured completion-oriented callbacks, and those callbacks could be run simultaneously on multiple cores without any egregious slowdown (i.e. compared to normal, single-threaded Python code); i.e.: in parallel.\nThere was negligible overhead introduced by instrumenting all of the thread-sensitive macros, nor the thread-safe alternates for reference counting (don’t do it), garbage collection (don’t do it), memory allocation (simple block allocator), and memory reclamation (reset block allocator after a callback has completed). Collectively, this all ensured that the new parallel context Python code ran just as fast, if not faster, than normal single-threaded Python code.\nRemember, the prior approach by Greg Stein (some sixteen years prior) where fine-grained locking was introduced at the individual object level made all Python code run about 40% slower, not just new multi-threaded code.\nSo PyParallel at least demonstrated that you could get a mostly-functional parallel version of Python without incurring prohibitive slowdown to all code.\nThe PyParallel Performance section of the website features some concrete metrics that I captured back in 2015 with whatever hardware I had lying around at the time.\nMy favorite metric was that PyParallel’s plaintext benchmark (basically a HTTP server that responded to /plaintext with a plain text Hello, World! response) performance yielded 132,772 requests per second which put it into first place across all the platforms I benchmarked.\nLWAN, a raw C Linux implementation well-known for its performance, came in second with 128,126 requests per second. Granted, I cheated on my side, leveraging an SSE-accelerated HTTP parser to process the incoming request, per the http11 = True line below:\n# PyParallel (Fast)\n# (Uses picohttpparser's SSE-accelerated HTTP parser.)\nimport async\nclass Plaintext:\n    http11 = True\n    def plaintext(self, transport, data):\n        return b'Hello, World!'\n\nserver = async.server('0.0.0.0', 8080)\nasync.register(transport=server, protocol=Plaintext)\nasync.run()\nSo the only Python code actually being executed in this example was the return b'Hello, World!' line, which is so simple its basically a no-op. Thus, the only thing I was really demonstrating there was the performance of the PxSocket_IoLoop() implementation, plus the underlying Windows threadpool and async I/O facilities.\nThe slow version featured a full HTTP request parser written in Python, which clocked in at 53,455 requests per second (which was still significantly higher than other pure-Python implementations like Tornado).\n\n\nMore Information\nI’ve omitted a lot of PyParallel details on purpose—this section is long enough as it is! If you’re interested in learning more, I’d recommend the following deck which I presented at PyData 2013 in New York City:\n\n\n\nAdditionally, all the source code for PyParallel is available on Github, and the landing page’s README.md has additional technical information about the project and implementation. You can download a working, usable installer, complete with PyParallel-compatible versions of Cython, NumPy, and PyODBC, and various other third-party site-packages from the PyParallel 3.3.5.99805 Release page."
  },
  {
    "objectID": "articles/from-pyparallel-to-python-free-threading/index.html#implementation-1",
    "href": "articles/from-pyparallel-to-python-free-threading/index.html#implementation-1",
    "title": "DRAFT: From PyParallel to Python Free-Threading",
    "section": "Implementation",
    "text": "Implementation\nMuch like PyParallel, the Free-Threading Python work needed to augment the standard PyObject structure in order to support the new thread-safe functionality in lieu of the traditional single Global Interpreter Lock.\nLet’s review these changes first, focusing solely on 64-bit Python builds.\n\nChanges to PyObject\n\nPython 3.13 PyObject\nThe standard Python 3.13 PyObject struct is semantically identical to the one we introduced earlier in the Python 1.4 Objects and VarObjects section (albeit with types tweaked to support 64-bit architectures):\ntypedef __int64 Py_ssize_t;\n\ntypedef struct {\n    Py_ssize_t ob_refcnt;\n    PyTypeObject *ob_type;\n} PyObject;\n\ntypedef struct {\n    PyObject ob_base;\n    Py_ssize_t ob_size;\n} PyVarObject;\n\n\n\n\n\n\nActual C Header Code\n\n\n\n\n\nThe actual C header code used to define the PyObject structure in Python 3.13 is much more verbose these days. It can be found in Include/object.h and looks like this:\nstruct _object {\n#if (defined(__GNUC__) || defined(__clang__)) \\\n        && !(defined __STDC_VERSION__ && __STDC_VERSION__ &gt;= 201112L)\n    // On C99 and older, anonymous union is a GCC and clang extension\n    __extension__\n#endif\n#ifdef _MSC_VER\n    // Ignore MSC warning C4201: \"nonstandard extension used:\n    // nameless struct/union\"\n    __pragma(warning(push))\n    __pragma(warning(disable: 4201))\n#endif\n    union {\n       Py_ssize_t ob_refcnt;\n#if SIZEOF_VOID_P &gt; 4\n       PY_UINT32_T ob_refcnt_split[2];\n#endif\n    };\n#ifdef _MSC_VER\n    __pragma(warning(pop))\n#endif\n\n    PyTypeObject *ob_type;\n};\n\ntypedef struct {\n    PyObject ob_base;\n    Py_ssize_t ob_size; /* Number of items in variable part */\n} PyVarObject;\nPyVarObject remains simple, as can be seen.\n\n\n\nThe visual depiction of PyObject in Python 3.13 64-bit is the same as before, with a total structure size of 16 bytes:\n\n\nPy_ssize_t ob_refcnt\n(8 bytes)\n\n\nPyTypeObject *ob_type\n(8 bytes)\n\n\n\n\nFree-Threaded PyObject\nThe new PyObject structure in the Free-Threaded build has grown numerous new fields, and lives below the GIL version in Include/object.h, reproduced below (with supporting typedefs):\n// Only the two least significant bits are used; remaining bits\n// always zero.\n// 0b00: unlocked\n// 0b01: locked\n// 0b10: unlocked and has parked threads\n// 0b11: locked and has parked threads\ntypedef struct {\n    uint8_t _bits;\n} PyMutex;\n\ntypedef struct {\n\n    // ob_tid stores the thread id (or zero). It is also used\n    // by the GC and the trashcan mechanism as a linked list\n    // pointer and by the GC to store the computed \"gc_refs\"\n    // refcount.\n    uintptr_t ob_tid;           // thread id\n    uint16_t _padding;          // ob_flags in 3.14+\n    PyMutex ob_mutex;           // per-object lock\n    uint8_t ob_gc_bits;         // gc-related state\n    uint32_t ob_ref_local;      // local reference count\n    Py_ssize_t ob_ref_shared;   // shared (atomic) reference count\n    PyTypeObject *ob_type;\n} PyObject;\nN.B. The _padding field has been renamed to ob_flags in Python 3.14+.\nA visual depiction of the Free-Threaded PyObject structure on 64-bit architectures follows. The object size has grown an additional 16 bytes from the with-GIL PyObject, doubling the total structure size to 32 bytes.\n\n\nuintptr_t ob_tid\n(8 bytes)\n\n\nuint16_t\nob_flags\n(2 bytes)\n\n\nPyMutex\nob_mutex\n(1 byte)\n\n\nuint8_t\nob_gc_bits\n(1 byte)\n\n\nuint32_t\nob_ref_local\n(4 bytes)\n\n\nPy_ssize_t ob_ref_shared\n(8 bytes)\n\n\nPyTypeObject *ob_type\n(8 bytes)\n\n\nIf you’ve followed along with the prior work exposition earlier in the article, you can probably take a pretty educated guess as to not only what the new fields are for, but also, why they were needed.\n\nObject Thread ID: uintptr_t ob_tid\nThis field captures the thread ID of the owning thread for any given object. I like this! I also like how this particular value is obtained, because it means you can quickly check if you own the thread by comparing an object’s thread ID with your own, as follows:\nstatic inline uintptr_t\n_Py_ThreadId(void)\n{\n    uintptr_t tid;\n    tid = __readgsqword(48);\n    return tid;\n}\n\nstatic inline int\n_Py_IsOwnedByCurrentThread(PyObject *ob)\n{\n    return ob-&gt;ob_tid == _Py_ThreadId();\n}\nHey! Look at that, it uses the same technique PyParallel used to determine the current thread ID with the least amount of overhead possible. I’m not sure if the idea was sourced from PyParallel or not; if not, it’s at least a good example of convergent evolution—that is, if you need to quickly determine the ID of the current thread, well, there’s really only one optimal way of doing it per platform.\n\n\n\n\n\n\nActual C Header Code\n\n\n\n\n\nAs usual, the actual C code is much more… flowery; the relevant Include/object.h is reproduced below:\nstatic inline uintptr_t\n_Py_ThreadId(void)\n{\n    uintptr_t tid;\n#if defined(_MSC_VER) && defined(_M_X64)\n    tid = __readgsqword(48);\n#elif defined(_MSC_VER) && defined(_M_IX86)\n    tid = __readfsdword(24);\n#elif defined(_MSC_VER) && defined(_M_ARM64)\n    tid = __getReg(18);\n#elif defined(__MINGW32__) && defined(_M_X64)\n    tid = __readgsqword(48);\n#elif defined(__MINGW32__) && defined(_M_IX86)\n    tid = __readfsdword(24);\n#elif defined(__MINGW32__) && defined(_M_ARM64)\n    tid = __getReg(18);\n#elif defined(__i386__)\n    __asm__(\"movl %%gs:0, %0\" : \"=r\" (tid));  // 32-bit always uses GS\n#elif defined(__MACH__) && defined(__x86_64__)\n    __asm__(\"movq %%gs:0, %0\" : \"=r\" (tid));  // x86_64 macOSX uses GS\n#elif defined(__x86_64__)\n   __asm__(\"movq %%fs:0, %0\" : \"=r\" (tid));  // x86_64 Linux, BSD uses FS\n#elif defined(__arm__) && __ARM_ARCH &gt;= 7\n    __asm__ (\"mrc p15, 0, %0, c13, c0, 3\\nbic %0, %0, #3\" : \"=r\" (tid));\n#elif defined(__aarch64__) && defined(__APPLE__)\n    __asm__ (\"mrs %0, tpidrro_el0\" : \"=r\" (tid));\n#elif defined(__aarch64__)\n    __asm__ (\"mrs %0, tpidr_el0\" : \"=r\" (tid));\n#elif defined(__powerpc64__)\n    #if defined(__clang__) && _Py__has_builtin(__builtin_thread_pointer)\n    tid = (uintptr_t)__builtin_thread_pointer();\n    #else\n    // r13 is reserved for use as system thread ID by the Power 64-bit ABI.\n    register uintptr_t tp __asm__ (\"r13\");\n    __asm__(\"\" : \"=r\" (tp));\n    tid = tp;\n    #endif\n#elif defined(__powerpc__)\n    #if defined(__clang__) && _Py__has_builtin(__builtin_thread_pointer)\n    tid = (uintptr_t)__builtin_thread_pointer();\n    #else\n    // r2 is reserved for use as system thread ID by the Power 32-bit ABI.\n    register uintptr_t tp __asm__ (\"r2\");\n    __asm__ (\"\" : \"=r\" (tp));\n    tid = tp;\n    #endif\n#elif defined(__s390__) && defined(__GNUC__)\n    // Both GCC and Clang have supported __builtin_thread_pointer\n    // for s390 from long time ago.\n    tid = (uintptr_t)__builtin_thread_pointer();\n#elif defined(__riscv)\n    #if defined(__clang__) && _Py__has_builtin(__builtin_thread_pointer)\n    tid = (uintptr_t)__builtin_thread_pointer();\n    #else\n    // tp is Thread Pointer provided by the RISC-V ABI.\n    __asm__ (\"mv %0, tp\" : \"=r\" (tid));\n    #endif\n#else\n    // Fallback to a portable implementation if we do not have a faster\n    // platform-specific implementation.\n    tid = _Py_GetThreadLocal_Addr();\n#endif\n  return tid;\n}\n\nstatic inline Py_ALWAYS_INLINE int\n_Py_IsOwnedByCurrentThread(PyObject *ob)\n{\n#ifdef _Py_THREAD_SANITIZER\n    return _Py_atomic_load_uintptr_relaxed(&ob-&gt;ob_tid) == _Py_ThreadId();\n#else\n    return ob-&gt;ob_tid == _Py_ThreadId();\n#endif\n}\n\n\n\n\n\nReference Counts: ob_ref_local and ob_ref_shared\nTODO: Biased and deferred reference counting. Optimization if attempting to incref/decref an object we own.\n\n\nPer-Object Locking: PyMutex ob_mutex\nTBD\n\n\nGarbage Collection State: ob_gc_bits"
  },
  {
    "objectID": "articles/from-pyparallel-to-python-free-threading/index.html#http-server",
    "href": "articles/from-pyparallel-to-python-free-threading/index.html#http-server",
    "title": "DRAFT: From PyParallel to Python Free-Threading",
    "section": "HTTP Server",
    "text": "HTTP Server\n\nMulti-threaded asyncio-based HTTP server.\nPerformance/benchmarks.\nCompare -Xgil=0 to with GIL.\n\nTODO"
  },
  {
    "objectID": "articles/from-pyparallel-to-python-free-threading/index.html#wiki-server",
    "href": "articles/from-pyparallel-to-python-free-threading/index.html#wiki-server",
    "title": "DRAFT: From PyParallel to Python Free-Threading",
    "section": "Wiki Server",
    "text": "Wiki Server\nTODO"
  },
  {
    "objectID": "articles/from-pyparallel-to-python-free-threading/index.html#training-a-local-gpt2",
    "href": "articles/from-pyparallel-to-python-free-threading/index.html#training-a-local-gpt2",
    "title": "DRAFT: From PyParallel to Python Free-Threading",
    "section": "Training a local GPT2",
    "text": "Training a local GPT2"
  },
  {
    "objectID": "articles/from-pyparallel-to-python-free-threading/index.html#multi-threaded-inference",
    "href": "articles/from-pyparallel-to-python-free-threading/index.html#multi-threaded-inference",
    "title": "DRAFT: From PyParallel to Python Free-Threading",
    "section": "Multi-threaded Inference",
    "text": "Multi-threaded Inference\n\nVia asyncio & HTTP server."
  },
  {
    "objectID": "articles/from-pyparallel-to-python-free-threading/index.html#pyparallel-backstory",
    "href": "articles/from-pyparallel-to-python-free-threading/index.html#pyparallel-backstory",
    "title": "DRAFT: From PyParallel to Python Free-Threading",
    "section": "PyParallel Backstory",
    "text": "PyParallel Backstory\nI’m not sure how interesting this section will be to readers, which is why I’ve stashed it at the end of the article. The older I get—especially now that I have a daughter—the more cathartic it is reminiscing about the early parts of my career some nearly-two-decades-ago.\nThis section captures the backstory behind PyParallel. PyParallel was born out of a) my interest in asynchronous I/O and multithreaded programming, and b) my experience with Snakebite, an “open source network” I built with the goal to provide Python committer’s access to all the different types of platforms Python ran on—especially all the UNIX derivatives from the late 90s to 00s for which I seemed to be genetically predisposed to overly romanticize.\nAnd I came up with the idea for Snakebite as a Python committer, where I found myself often frustrated at trying to debug buildbot breaks on platforms for which I had no access. And becoming a Python committer was an artifact of my involvement with the Python language, particularly with regards to providing buildbots and help with Windows 64-bit Python builds in the early days where AMD64 was still a novelty.\nAnd I was led to Python by a random article by Eric S. Raymond, coupled with growing resentment toward Perl, which I found myself having to use when working with ClearQuest.\nThat’s the reverse chronological history in a nutshell. The next few sections go into more detail chronologically.\n\nBecoming a Python Committer\nFrom around 2000 to 2004, I was writing mostly C, C++, and Perl. I had founded a company with a business partner, Jamie Echlin, called OnResolve, and provided consultancy for an IBM—formerly Rational—change management product called ClearQuest, as well as a number of software products that extended the functionality of ClearQuest. ClearQuest could be customized in two languages: Visual Basic, and Perl. The most prominent software product Jamie and I created was OnMessage, which was a combination of C++ and Perl, and provided enhanced e-mail notification facilities for ClearQuest. Jamie deserves much of the credit for what eventually became known as OnMessage —despite having a quirky Perl coding style I found difficult to work with, he absolutely laid the foundation for the product and the subsequent success we had with it.\nClearQuest, and its version-control counterpart, ClearCase, were ubiquitous in all of the industries that had the most money in the early to mid 2000s. Particularly finance and oil. No-one liked using either of them, they were expensive, required huge teams to maintain and administer, and with the advent of tools like Git and Github (albeit many years later), they are now relegated to the annals of history.\nI was relatively productive with Perl, but I didn’t particularly like it. And I absolutely loathed having to deal with other people’s Perl code. Around late 2004 and 2005, Python arrived on my radar. I remember reading Eric S. Raymond’s Why Python article about Python, and it resonated strongly with me. Coming from Perl, Python just felt simply magical. It was intuitive, easy to read, not cryptic, easy to work with other people’s code, powerful–particularly as a glue language.\nI adored it. I tackled all new projects with Python. I wrote a Python wrapper around ClearQuest named cqpython, which I used to carry out one of my most favorite projects to date: merging two ClearQuest databases into a single instance by auto-generating optimized SQL to conduct the merge at the database level. (This was harder than it sounds, as all ClearQuest databases would start off with the same unique ID offsets, so two otherwise unrelated databases would have almost identical keys for different entities, which needed to be resolved efficiently at merge time.)\nBy 2007-2008, I was bored of ClearQuest—it wasn’t a fun product to work with, nor did it look like it would be a good career move to continue specializing in it; the prices were extortionate, a lot of companies were trying to move off it, and better, cheaper alternatives were popping up.\nHowever, it sure had been lucrative. I was able to enjoy extended periods of not needing to work, and I spent that time on things I was finding really fun, like contributing to Python. I set up a bunch of buildbots for Python, and was particularly interested in getting the 64-bit Windows Python builds “green” on the buildbots I had set up. I think I even paid for the Verisign code signing certificate used for the Python.org official Windows binaries back then (this was still the Python 2.x days).\nThis was back in the day where Martin von Löwis was still an active contributor for Python, and if I recall correctly, the release manager for the Python 2.x series. Martin also maintained the Windows Python builds, a role that was eventually taken over by Steve Dower, who is still doing it to this day.\nIn 2008, I attended PyCon in Chicago. It was my first-ever PyCon. I had a fantastic time, and particularly loved the core Python sprints that happened after the conference. For those that are unaware, this is the one time every year where many of the active Python committers, including Guido, get together in a big conference room and just hack on Python collectively for a few days.\nIt was a bit of a surreal experience, sitting in a room hacking on Python alongside the very founder of Python himself—Guido—plus many other luminaries that actively contributed to the language over the years. I don’t know who took this photo, nor why it appears to have dimensions tailored towards ants, but you can see myself and Michael Foord in the foreground table (dark maroon t-shirt on the left and orange t-shirt on the right, respectively), Guido in the bright green shirt at the top right table, sitting with Neal Norwitz and Barry Warsaw. And that looks like Brett Canon in thinking pose in the dark t-shirt and Martin von Löwis sitting next to him scratching his head at whatever Brett was doing at the middle table :-)\n\n\n\nPyCon 2008 Core Sprint\n\n\nI remember inundating Martin with patch bombs fixing various buildbot-related things at the start of that sprint, to which Martin eventually dealt with by simply offering me commit privileges. I enthusiastically accepted! Honestly, that was a career highlight. This was in the days before everything was Github and Pull Requests—becoming a Python committer meant you would literally get svn+ssh access to svn.python.org, plus ssh access to the python.org boxes themselves if you wanted it/needed it (i.e. for buildbot master configuration). This was certainly more compelling than the ClearQuest consultancy I’d done in the past, that’s for sure!\nAs much as I love Git and Github, getting your pull request accepted for an open source project just doesn’t have the same feel as getting offered commit privileges like back in the old days."
  },
  {
    "objectID": "articles/from-pyparallel-to-python-free-threading/index.html#quarto-markdown",
    "href": "articles/from-pyparallel-to-python-free-threading/index.html#quarto-markdown",
    "title": "DRAFT: From PyParallel to Python Free-Threading",
    "section": "Quarto & Markdown",
    "text": "Quarto & Markdown\nThis article was written in Markdown using Quarto. The source code is here; there’s also an Edit this page link on the top-right of the page, under the contents (assuming you’re viewing the site on a wide-enough device).\nFor the syntax color scheme, I copied the dracula.theme from the Quarto repository into tpn.theme and then just hacked on it until I was mostly content with the results.\nMy whole trent.me website uses Quarto, and is hosted publicly on Github at my website repo. I also leverage Github’s hosting facilities via their “Pages” functionality, the configuration of which can be seen below.\n\n\n\n\n\n\nGithub Pages Configuration\n\n\n\n\n\n\n\n\nGithub Pages Configuration for tpn/website\n\n\n\n\n\n“Development” on the website (i.e. writing articles like this one) is done on a variety of boxes, typically all Linux/WSL2. Quarto has a useful preview feature, so my local workflow is usually just something as simple as:\n% cd ~/src/website\n% quarto preview\nI edited this index.qmd page predominantly in vim, although I’d sometimes use VS Code and the Quarto extension with integrated previewing. I generally turn Copilot off in vim when writing pure text, it’s too distracting, and isn’t geared toward writing new prose versus coding tasks, which is obviously its bread and butter."
  },
  {
    "objectID": "articles/from-pyparallel-to-python-free-threading/index.html#ai-tooling",
    "href": "articles/from-pyparallel-to-python-free-threading/index.html#ai-tooling",
    "title": "DRAFT: From PyParallel to Python Free-Threading",
    "section": "AI Tooling",
    "text": "AI Tooling\nIn general, I for one welcome our new AI overlords. I have heavily integrated Copilot and ChatGPT into my workflow now as a developer for the past two years or so, and I thoroughly enjoy leveraging both tools.\n\nLM Studio\nLM Studio has also left a lasting impression and I’ve enjoyed experimenting with it a lot recently too. This has been aided by having a local box at home with 256 GB RAM, 40 cores, four Tesla V100 32GB GPUs, and a 14TB RAID0 stripe—plenty of room to download all of these huge models coming out.\nA nice thing about LM Studio is that with a few clicks you can expose a local, OpenAI-compatible REST interface. LM Studio is powered by llama.cpp.\n\n\nAider\nI came across Aider recently. Aider is, to quote their website, directly, AI pair programming in your terminal. It’s pretty neat, and I played around with having it drive a little bit of the Python development in the parallelopedia repo, and a lot of the development in the parallelopedia-ui repo, which is the React, Bootstrap, JavaScript/JSX web UI seen in this article.\ni’m not a web developer, I don’t know how to write web apps, I don’t care about code quality of web apps I do write (as I’m not writing anything other than demos or small little tools), so, whatever gets the job done is fine. However, I am, by trade, a software engineer, so a lot of the core skill set still commutes when working in foreign domains. Especially these days when you have AI an alt-tab away, or, in the case of Aider, available in a terminal to carry out your development requests.\nThe biggest issue I had with Aider was honestly just biting the bullet and just trying it. Begin, the rest is easy as they say. It’s definitely not perfect–I had to jump in and fix things a few times every session I had with it, but we’re talking maybe five interventions within a 3-4 hour coding session, give or take. It was particularly good at generating scaffolding that I could hack further with a single sentence. And it was really good at writing an entire Python unit test module for me based on a single-sentence.\nTo get started with Aider:\n% python -m pip install aider-install\n% aider-install\n# Restart shell, or `export PATH=$HOME/.local/bin:$PATH`\n% which aider\n/home/trent/.local/bin/aider\n# I've got my OpenAI keys in a GPG-encrypted file ~/.zsh/openai_key.asc.\n% which init_openai_key\ninit_openai_key () {\n    if [ -f ~/.zsh/openai_key.asc ]\n    then\n        export OPENAI_API_KEY=$(\n            gpg -d --batch --quiet ~/.zsh/openai_key.asc\n        )\n    fi\n}\n% init_openai_key\n% aider --model gpt-4o --vim\nIt was trivial to point it at a local model hosted by LM Studio, too, after enabling the Developer view and starting a local development server (which will default to hosting on http://&lt;hostname&gt;:1234/v1):\n% LM_STUDIO_API_KEY=notused \\\n  LM_STUDIO_API_BASE=http://$(hostname):1234/v1 \\\n    aider --model lm_studio/qwen2.5-coder-32b-instruct@fp16 --vim\nBy default, Aider keeps a Markdown transcript of your sessions in a file named .aider.chat.history.md in the root of the repository you’re working with. I have included the transcript from my parallelopedia-ui repo below. I haven’t edited it, so it contains all my mistakes and errors and whatnot.\n\n\n\n\n\n\nAider Chat History\n\n\n\n\n\n\naider chat started at 2025-01-03 16:53:15\n\nAdd .aider* to .gitignore (recommended)? (Y)es/(N)o [Yes]: y\nAdded .aider* to .gitignore\n/home/trent/.local/bin/aider –model gpt-4o –vim\nWarning: gpt-4o expects these environment variables\n- OPENAI_API_KEY: Not set\nWarning: gpt-4o-mini expects these environment variables\n- OPENAI_API_KEY: Not set\nYou can skip this check with –no-show-model-warnings\nhttps://aider.chat/docs/llms/warnings.html\n\n\n\naider chat started at 2025-01-03 16:53:54\n\n/home/trent/.local/bin/aider –model gpt-4o –vim\nAider v0.70.0\nMain model: gpt-4o with diff edit format\nWeak model: gpt-4o-mini\nGit repo: .git with 0 files\nRepo-map: using 1024 tokens, auto refresh\n\n\n/add src/Wiki.jsx\n\nNo files matched ‘src/Wiki.jsx’. Do you want to create /mnt/raid1/trent/src/parallelopedia-ui/src/Wiki.jsx? (Y)es/(N)o [Yes]: y\nAdded src/Wiki.jsx to the chat\n\n\n\nImplement src/Wiki.jsx, which will be a React Bootstrap component that will have a single search box than spans the container.\nTo implement the Wiki component using React Bootstrap with a single search box that spans the container, we will create the component in src/Wiki.jsx. Here is the implementation:\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n=======\nimport React from 'react';\nimport { Container, Form, FormControl } from 'react-bootstrap';\n\nconst Wiki = () =&gt; {\n    return (\n        &lt;Container&gt;\n            &lt;Form&gt;\n                &lt;FormControl\n                    type=\"search\"\n                    placeholder=\"Search\"\n                    className=\"me-2\"\n                    aria-label=\"Search\"\n                /&gt;\n            &lt;/Form&gt;\n        &lt;/Container&gt;\n    );\n};\n\nexport default Wiki;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nTo ensure the component works correctly, make sure you have react-bootstrap installed in your project. If not, you can install it using the following command:\nnpm install react-bootstrap bootstrap\n\nTokens: 2.4k sent, 176 received. Cost: $0.0077 message, $0.0077 session.\nCommitting src/Wiki.jsx before applying edits.\nCommit c522407 feat: Add Wiki component to the source directory\nApplied edit to src/Wiki.jsx\nCommit 6ce6206 feat: Implement Wiki component with search box using React Bootstrap\nnpm install react-bootstrap bootstrap\nRun shell command? (Y)es/(N)o/(D)on’t ask again [Yes]: n\nYou can use /undo to undo and discard each aider commit.\n\n\n\nAdd  to the appropriate  in App.jsx.\nPlease add App.jsx to the chat so I can make the necessary changes to include the &lt;Wiki /&gt; component in the appropriate &lt;Tab&gt;.\n\nTokens: 2.8k sent, 31 received. Cost: $0.0072 message, $0.01 session.\n\n\n\n/add src/App.jsx src/Stats.jsx src/TerminalTab.jsx src/TerminalComponent.jsx\n\nAdded src/App.jsx to the chat\nAdded src/Stats.jsx to the chat\nAdded src/TerminalComponent.jsx to the chat\nAdded src/TerminalTab.jsx to the chat\n\n\n\n/add src/index.css src/App.scss src/App.css\n\nAdded src/App.css to the chat\nAdded src/App.scss to the chat\nAdded src/index.css to the chat\n\n\n\nAdd  to the appropriate  in App.jsx.\nTo add the &lt;Wiki /&gt; component to the appropriate &lt;Tab&gt; in App.jsx, we need to import the Wiki component and include it in the “Wiki” tab. Here are the changes:\nsrc/App.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n=======\nimport Wiki from \"./Wiki\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nsrc/App.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n          &lt;Tab title=\"Wiki\" eventKey=\"wiki\"&gt;&lt;/Tab&gt;\n=======\n          &lt;Tab title=\"Wiki\" eventKey=\"wiki\"&gt;\n            &lt;Wiki /&gt;\n          &lt;/Tab&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nThis will ensure that the Wiki component is rendered within the “Wiki” tab.\n\nTokens: 4.9k sent, 151 received. Cost: $0.01 message, $0.03 session.\nCommitting src/App.jsx before applying edits.\nCommit 1682fa5 feat: Add main application component in App.jsx\nApplied edit to src/App.jsx\nCommit ce5f9ab feat: Add  component to the Wiki tab in App.jsx\nYou can use /undo to undo and discard each aider commit.\n\n\n\n/voice\n\n\nThe wiki search box doesn’t have enough vertical space between it and the tab above. Add some stylesheets or styles in the app.scss file to improve the spacing.\nTo improve the vertical spacing between the search box and the tab above it, we can add some custom styles in the App.scss file. Here’s how you can do it:\nsrc/App.scss\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n// Override specific elements with monospace font sizes\ncode,\nkbd,\nsamp {\n    white-space: nowrap; // Prevents text wrapping\n    font-size: $font-size-monospace; // Apply custom font size to monospace elements\n}\n=======\n.wiki-search-container {\n    margin-top: 20px; // Add vertical space between the tab and the search box\n}\n\n// Override specific elements with monospace font sizes\ncode,\nkbd,\nsamp {\n    white-space: nowrap; // Prevents text wrapping\n    font-size: $font-size-monospace; // Apply custom font size to monospace elements\n}\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nNext, apply this new class to the Container in the Wiki component:\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n        &lt;Container&gt;\n=======\n        &lt;Container className=\"wiki-search-container\"&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nThese changes will add vertical space between the tab and the search box in the Wiki component.\n\nTokens: 5.2k sent, 245 received. Cost: $0.02 message, $0.04 session.\nCommitting src/App.scss before applying edits.\nCommit 065db7a feat: Add main stylesheet for the application\nApplied edit to src/Wiki.jsx\nApplied edit to src/App.scss\nCommit ad6f1b5 style: Add vertical spacing between the tab and search box in Wiki component\nYou can use /undo to undo and discard each aider commit.\n\n\n\n/voice\n\n\nWhen I type into the search box, I get the following error in the browser console: dgx/:1 Access to fetch at ‘http://localhost:4444/offsets/Pytho’ from origin ‘http://dgx:3000’ has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource. If an opaque response serves your needs, set the request’s mode to ‘no-cors’ to fetch the resource with CORS disabled.\n\nhttp://dgx:3000\nAdd URL to the chat? (Y)es/(N)o/(A)ll/(S)kip all/(D)on’t ask again [Yes]: n\nhttp://localhost:4444/offsets/Pytho\nAdd URL to the chat? (Y)es/(N)o/(A)ll/(S)kip all/(D)on’t ask again [Yes]: n\n\nThe error you’re encountering is due to the CORS (Cross-Origin Resource Sharing) policy, which restricts web pages from making requests to a different domain than the one that served the web page. To resolve this issue, you can modify the fetch request to include the mode: 'cors' option. However, this alone might not solve the problem if the server at http://localhost:4444 is not configured to allow requests from your origin.\nHere’s how you can modify the fetch request in src/Wiki.jsx:\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n        const response = await fetch(`http://localhost:4444/offsets/${value}`);\n=======\n        const response = await fetch(`http://localhost:4444/offsets/${value}`, {\n          mode: 'cors'\n        });\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nIf the server is under your control, you will need to configure it to include the Access-Control-Allow-Origin header in its responses. If you don’t have control over the server, you might need to use a proxy or contact the server administrator to enable CORS for your domain.\n\nTokens: 6.0k sent, 231 received. Cost: $0.02 message, $0.06 session.\nCommitting src/Wiki.jsx before applying edits.\nCommit 943c680 feat: Implement search functionality with results display in Wiki component\nApplied edit to src/Wiki.jsx\nCommit 6d699ab fix: Add CORS mode to fetch request in Wiki component\nYou can use /undo to undo and discard each aider commit.\n\n\n\n/ask Tell me more about Access-Control-Allow-Origin… I presume I need to have that set on the localhost:4444 server? I do have control over it so is it just a matter of adding that header to the server’s output?\n\n\nTell me more about Access-Control-Allow-Origin… I presume I need to have that set on the localhost:4444 server? I do have control over it so is it just a matter of adding that header to the server’s output?\nYes, you are correct. The Access-Control-Allow-Origin header is a part of the CORS (Cross-Origin Resource Sharing) mechanism that allows servers to specify which origins are permitted to access their resources. When a web application makes a request to a server that is on a different origin (domain, protocol, or port), the server must include this header in its response to allow the request.\nTo resolve the CORS issue you’re facing, you need to configure your server running on localhost:4444 to include the Access-Control-Allow-Origin header in its responses. Here’s how you can do it, depending on the server technology you’re using:\n\n\nFor Express.js (Node.js)\nIf you’re using Express.js, you can use the cors middleware to handle this:\n\nInstall the cors package:\nnpm install cors\nUse the cors middleware in your server setup:\nconst express = require('express');\nconst cors = require('cors');\nconst app = express();\n\napp.use(cors());\n\n// Your routes here\n\napp.listen(4444, () =&gt; {\n  console.log('Server is running on port 4444');\n});\n\n\n\nFor Other Server Technologies\n\nApache: You can add the following line to your .htaccess file or your server configuration:\nHeader set Access-Control-Allow-Origin \"*\"\nNginx: Add the following line to your server block configuration:\nadd_header 'Access-Control-Allow-Origin' '*';\n\n\n\nImportant Note\n\nThe * wildcard allows any origin to access the resource. This is suitable for development but not recommended for production environments due to security concerns. In production, you should specify the exact origin(s) that are allowed to access your server.\nIf your server needs to handle credentials (such as cookies or HTTP authentication), you should set Access-Control-Allow-Origin to a specific origin and also include the Access-Control-Allow-Credentials header set to true.\n\nBy adding the Access-Control-Allow-Origin header to your server’s responses, you should be able to resolve the CORS issue and allow your React application to make requests to the server.\n\nTokens: 4.2k sent, 473 received. Cost: $0.02 message, $0.08 session.\n\n\nWhat would exact origin look like if both servers are running on the host “dgx” but listening on different ports?\nIf both servers are running on the host “dgx” but listening on different ports, you would specify the exact origin by including the protocol, hostname, and port number. For example, if your React application is running on port 3000 and your API server is running on port 4444, you would set the Access-Control-Allow-Origin header to http://dgx:3000 on your API server.\nHere’s how you can configure it for an Express.js server:\nconst express = require('express');\nconst cors = require('cors');\nconst app = express();\n\napp.use(cors({\n  origin: 'http://dgx:3000'\n}));\n\n// Your routes here\n\napp.listen(4444, () =&gt; {\n  console.log('Server is running on port 4444');\n});\nThis configuration allows requests from http://dgx:3000 to access resources on your API server running on http://dgx:4444.\n\nTokens: 6.9k sent, 201 received. Cost: $0.02 message, $0.10 session.\n\n\n\n/ask What would the raw HTTP header look like from the server in that case?\n\n\nWhat would the raw HTTP header look like from the server in that case?\nIf you configure your server to allow requests from a specific origin, such as http://dgx:3000, the raw HTTP response header from the server would include the Access-Control-Allow-Origin header specifying that origin. Here’s what the relevant part of the HTTP response headers might look like:\nHTTP/1.1 200 OK\nContent-Type: application/json\nAccess-Control-Allow-Origin: http://dgx:3000\nThis header tells the browser that the resource can be accessed by web pages from the specified origin (http://dgx:3000). If you have additional CORS-related headers, such as those for handling credentials or specific HTTP methods, they might look like this:\nAccess-Control-Allow-Origin: http://dgx:3000\nAccess-Control-Allow-Credentials: true\nAccess-Control-Allow-Methods: GET, POST, PUT, DELETE\nAccess-Control-Allow-Headers: Content-Type, Authorization\n\nAccess-Control-Allow-Origin: Specifies the origin that is allowed to access the resource.\nAccess-Control-Allow-Credentials: Indicates whether the response to the request can be exposed when the credentials flag is true.\nAccess-Control-Allow-Methods: Lists the HTTP methods that are allowed when accessing the resource.\nAccess-Control-Allow-Headers: Lists the headers that can be used when making the actual request.\n\nThese headers are part of the CORS protocol and help manage cross-origin requests securely.\n\nTokens: 4.9k sent, 291 received. Cost: $0.02 message, $0.11 session.\n\n\n\nChange Wiki.jsx so that when a search result is clicked on, all the results are immediately hidden/deleted, such that the xml content is the only thing shown.\nTo modify the Wiki.jsx component so that the search results are hidden when a result is clicked, we need to clear the results state when an item is selected. Here are the changes:\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n    } catch (error) {\n=======\n      setResults([]); // Clear results when an item is clicked\n    } catch (error) {\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nThis change ensures that when a search result is clicked, the results state is cleared, effectively hiding the list of search results and displaying only the XML content.\n\nTokens: 7.4k sent, 119 received. Cost: $0.02 message, $0.13 session.\nCommitting src/Wiki.jsx before applying edits.\nCommit f214e0c fix: Update fetch URLs from localhost to dgx in Wiki component\nApplied edit to src/Wiki.jsx\nCommit 7b60e12 feat: Clear search results when a search result is clicked in Wiki.jsx\nYou can use /undo to undo and discard each aider commit.\n\n\n\nChange the search box so that the search request is only dispatched when three or more characters have been typed.\nTo ensure that the search request is only dispatched when three or more characters have been typed, we need to modify the condition in the handleSearch function. Here is the change:\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n    if (value.trim() !== \"\") {\n=======\n    if (value.trim().length &gt;= 3) {\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nThis change updates the condition to check if the trimmed input length is three or more before dispatching the search request.\n\nTokens: 6.2k sent, 98 received. Cost: $0.02 message, $0.15 session.\nApplied edit to src/Wiki.jsx\nCommit 7c4a4d3 feat: Dispatch search request only after three or more characters typed\nYou can use /undo to undo and discard each aider commit.\n\n\n\nChange the “handleResultClick” logic so that when an item is clicked, the string contents are placed into the Search bar, but no new search is conducted.\nTo modify the handleResultClick function so that the clicked item’s string content is placed into the search bar without conducting a new search, we need to update the logic to set the query state without triggering the search. Here is the change:\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n      setSelectedXml(xmlData);\n=======\n      setQuery(xmlData); // Place the string content into the search bar\n      setSelectedXml(xmlData);\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nThis change ensures that when an item is clicked, its content is placed into the search bar, and the search results are cleared without initiating a new search.\n\nTokens: 6.4k sent, 128 received. Cost: $0.02 message, $0.16 session.\nApplied edit to src/Wiki.jsx\nCommit 1feb90d feat: Update handleResultClick to set query without triggering search\nYou can use /undo to undo and discard each aider commit.\n\n\n\nChange the Wiki logic so that there’s a one second delay of no typing before a search is dispatched. If another key comes in before 1 second, the timer is reset. Only dispatch a search if there has been no typing for at least a second.\nTo implement a one-second delay before dispatching a search request, we can use a debounce technique. This involves setting a timeout that resets every time a new key is pressed. Here’s how you can modify the Wiki.jsx file:\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n  // Handle input change and fetch search results\n  const handleSearch = async (e) =&gt; {\n    const value = e.target.value;\n    setQuery(value);\n\n    if (value.trim().length &gt;= 3) {\n      try {\n        const response = await fetch(`http://dgx:4444/offsets/${value}`, {\n          mode: \"cors\",\n        });\n        const data = await response.json();\n        setResults(data);\n      } catch (error) {\n        console.error(\"Error fetching search results:\", error);\n        setResults([]);\n      }\n    } else {\n      setResults([]);\n    }\n  };\n=======\n  // Debounce search function\n  let searchTimeout = null;\n\n  const handleSearch = (e) =&gt; {\n    const value = e.target.value;\n    setQuery(value);\n\n    if (searchTimeout) {\n      clearTimeout(searchTimeout);\n    }\n\n    if (value.trim().length &gt;= 3) {\n      searchTimeout = setTimeout(async () =&gt; {\n        try {\n          const response = await fetch(`http://dgx:4444/offsets/${value}`, {\n            mode: \"cors\",\n          });\n          const data = await response.json();\n          setResults(data);\n        } catch (error) {\n          console.error(\"Error fetching search results:\", error);\n          setResults([]);\n        }\n      }, 1000);\n    } else {\n      setResults([]);\n    }\n  };\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nThis change introduces a debounce mechanism by using a setTimeout that delays the search request by one second. If another key is pressed before the timeout completes, the timer is reset.\n\nTokens: 6.7k sent, 387 received. Cost: $0.02 message, $0.19 session.\nApplied edit to src/Wiki.jsx\nCommit 65f7959 feat: Implement debounce for search input with one second delay\nYou can use /undo to undo and discard each aider commit.\n\n\n\nWhen a search result is clicked on, e.g. “Python (Programming Language)”, only that text should be placed in the search box, not the results of the search.\nTo ensure that only the text of the clicked search result is placed in the search box, we need to update the handleResultClick function to set the query state with the result’s name instead of the XML data. Here is the change:\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n  const handleResultClick = async (startByte, endByte) =&gt; {\n=======\n  const handleResultClick = async (name, startByte, endByte) =&gt; {\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n      setQuery(xmlData); // Place the string content into the search bar\n=======\n      setQuery(name); // Place the result's name into the search bar\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n          onClick={() =&gt; handleResultClick(startByte, endByte)}\n=======\n          onClick={() =&gt; handleResultClick(name, startByte, endByte)}\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nThese changes ensure that when a search result is clicked, only the result’s name is placed in the search box, and the XML data is still fetched and displayed.\n\nTokens: 6.5k sent, 230 received. Cost: $0.02 message, $0.20 session.\nApplied edit to src/Wiki.jsx\nCommit 7b93ced fix: Update search result click handler to set query with result name\nYou can use /undo to undo and discard each aider commit.\n\n\n\nThe search results should take up as much vertical space as there is left on the page. Currently the entire line is being displayed as a single line with a horizontal scroll bar.\nTo ensure that the search results take up as much vertical space as possible and to prevent horizontal scrolling, we can adjust the CSS styles in App.scss to allow the list to expand and wrap text. Here are the changes:\nsrc/App.scss\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n.wiki-search-container {\n    margin-top: 20px; // Add vertical space between the tab and the search box\n}\n=======\n.wiki-search-container {\n    margin-top: 20px; // Add vertical space between the tab and the search box\n    display: flex;\n    flex-direction: column;\n    height: 100vh;\n}\n\n.wiki-search-container .list-group {\n    flex-grow: 1;\n    overflow-y: auto;\n}\n\n.wiki-search-container .list-group-item {\n    white-space: normal; // Allow text to wrap\n}\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nThese changes will make the search results list take up the remaining vertical space and allow the text to wrap, preventing horizontal scrolling.\n\nTokens: 6.8k sent, 201 received. Cost: $0.02 message, $0.22 session.\nApplied edit to src/App.scss\nCommit aad00d5 style: Adjust search results container for vertical space and text wrapping\nYou can use /undo to undo and discard each aider commit.\n\n\n\nWhen the search box is cleared, both the search results and article elements should be hidden/removed/cleared.\nTo ensure that both the search results and article elements are cleared when the search box is cleared, we need to update the handleSearch function to reset the selectedXml state when the query is empty. Here is the change:\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n    } else {\n=======\n      setSelectedXml(null); // Clear selected XML when the search box is cleared\n    } else {\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nThis change will ensure that when the search box is cleared, both the search results and the selected article are hidden/removed.\n\nTokens: 6.1k sent, 114 received. Cost: $0.02 message, $0.24 session.\nApplied edit to src/Wiki.jsx\nCommit 47b425f fix: Clear selected XML when the search box is cleared\nYou can use /undo to undo and discard each aider commit.\n\n\n\nWhen a new character is typed… all outstanding searches should be immediately cancelled. If they have results that are received after the “cancellation point”, the results should be discarded immediately.\nTo implement the cancellation of outstanding searches and discard results received after the “cancellation point,” we can use an AbortController to manage the fetch requests. Here’s how you can modify the handleSearch function:\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n  // Debounce search function\n=======\n  // Debounce search function and abort controller for cancelling requests\n  const abortControllerRef = useRef(null);\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n    if (searchTimeout) {\n=======\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort(); // Cancel any ongoing fetch requests\n    }\n\n    if (searchTimeout) {\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n      searchTimeout = setTimeout(async () =&gt; {\n=======\n      searchTimeout = setTimeout(() =&gt; {\n        abortControllerRef.current = new AbortController();\n        const { signal } = abortControllerRef.current;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n          const response = await fetch(`http://dgx:4444/offsets/${value}`, {\n            mode: \"cors\",\n          });\n          const data = await response.json();\n          setResults(data);\n=======\n          fetch(`http://dgx:4444/offsets/${value}`, {\n            mode: \"cors\",\n            signal,\n          })\n            .then((response) =&gt; response.json())\n            .then((data) =&gt; {\n              setResults(data);\n            })\n            .catch((error) =&gt; {\n              if (error.name !== \"AbortError\") {\n                console.error(\"Error fetching search results:\", error);\n                setResults([]);\n              }\n            });\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nThese changes will ensure that any ongoing search requests are cancelled when a new character is typed, and any results received after the cancellation will be discarded.\n\nTokens: 6.3k sent, 381 received. Cost: $0.02 message, $0.26 session.\nApplied edit to src/Wiki.jsx\nCommit 4277f3d feat: Implement cancellation of outstanding searches on new input\nYou can use /undo to undo and discard each aider commit.\n\n\n\n/multiline-mode\n\nMultiline mode: Enabled. Enter inserts newline, Alt-Enter submits text\n\n\n\n/ask This is a sample piece of content returned by the “selectedXml” bit:\n\n\n\n#### \n\nTest (Unix)\n\n0 2491736  629490168 629490063 2014-10-13T21:13:12Z  2A02:580:B0ED:E300:9DBB:3B15:8A21:F31E  /* Description / wikitext text/x-wiki {{lowercase|title= test (Unix)}} ’‘’test’’’ is a [[command line interface|command-line]] utility found in [[Unix-like]] operating systems that evaluates [[Conditional (programming)|conditional expressions]]. ==Syntax== test ‘’expression’’ or [ ‘’expression’’ ] ==Description== The &lt;code&gt;test&lt;/code&gt; command in Unix evaluates the &lt;code&gt;expression&lt;/code&gt; parameter. In some shells such as [[FreeBSD]] &lt;code&gt;sh(1)&lt;/code&gt; it is a [[shell builtin]], even though the external version still exists. In the second form of the command, the &lt;code&gt;[ ]&lt;/code&gt; (brackets) must be surrounded by blank spaces. This is because &lt;code&gt;[&lt;/code&gt; is a program and [[POSIX]] compatible shells require a space between the program name and its arguments. One must test explicitly for file names in the C shell. File-name substitution ([[glob (programming)|globbing]]) causes the shell script to exit. == Arguments == The following arguments are used to construct this parameter: ’’‘-e’’’ FileName - FileName exists All remaining arguments return true if the object (file or string) exists, and the condition specified is true. ’’‘-b’’’ Filename - Returns a True exit value if the specified FileName exists and is a block special file ’’‘-c’’’ FileName - FileName is a [[character special file]] ’’‘-d’’’ FileName - FileName is a [[directory (file systems)|directory]] ’’‘-f’’’ FileName - FileName is a regular file ’’‘-g’’’ FileName - FileName’s Set [[Group identifier (Unix)|Group ID]] bit is set ’’‘-h’’’ FileName - FileName is a [[symbolic link]] ’’‘-k’’’ FileName - FileName’s sticky bit is set ’’‘-L’’’ FileName - FileName is a [[symbolic link]] ’’‘-p’’’ FileName - FileName is a [[named pipe]] (FIFO) ’’‘-r’’’ FileName - FileName is readable by the current process ’’‘-s’’’ FileName - FileName has a size greater than 0 ’’‘-t’’’ FileDescriptor - [[File descriptor|FileDescriptor]] is open and associated with a [[pseudo terminal|terminal]] ’’‘-u’’’ FileName - FileName’s Set [[User identifier (Unix)|User ID]] bit is set ’’‘-w’’’ FileName - FileName’s write flag is on. However, the FileName will not be writable on a read-only file system even if test indicates true ’’‘-x’’’ FileName - FileName’s [[Execution (computers)|execute]] flag is on If the specified file exists and is a directory, the &lt;code&gt;True&lt;/code&gt; exit value indicates that the current process has permission to change &lt;code&gt;cd&lt;/code&gt; into the directory. file1 ’’‘-nt’’’ file2 - file1 is newer than file2 file1 ’’‘-ot’’’ file2 - file1 is older than file2 file1 ’’‘-ef’’’ file2 - file1 is another name for file2 - ([[symbolic link]] or [[hard link]]) === String arguments === In [[Perl]], these sections are reversed: &lt;code&gt;eq&lt;/code&gt; is a string operator and &lt;code&gt;==&lt;/code&gt; is a numerical operator, and so on for the others. ’’‘-n’’’ String1 - the length of the String1 variable is nonzero ’’‘-z’’’ String1 - the length of the String1 variable is 0 (zero) String1 ’’‘=’’’ String2 - String1 and String2 variables are identical String1 ’’‘!=’’’ String2 - String1 and String2 variables are not identical String1 - String1 variable is not a null string === Number arguments === Integer1 ’’‘-eq’’’ Integer2 - Integer1 and Integer2 variables are [[algebra]]ically equal ’’‘-ne’’’ - not equal ’’‘-gt’’’ - greater than ’’‘-ge’’’ - greater or equal ’’‘-lt’’’ - less than ’’‘-le’’’ - less or equal === Operators === &lt;code&gt;test&lt;/code&gt; arguments can be combined with the following operators: ’’‘!’’’ - Unary negation operator ’’‘-a’’’ - Binary AND operator ’’‘-o’’’ - Binary OR operator (the &lt;code&gt;-a&lt;/code&gt; operator has higher precedence than the &lt;code&gt;-o&lt;/code&gt; operator) ’’‘(Expression)’’’ - Parentheses for grouping must be escaped with a backslash &lt;code&gt;&lt;/code&gt; The &lt;code&gt;-a&lt;/code&gt; and &lt;code&gt;-o&lt;/code&gt; operators, along with parentheses for grouping, are XSI extensions&lt;ref&gt;[http://www.opengroup.org/onlinepubs/009695399/utilities/test.html IEEE Std 1003.1, 2004, documentation for &lt;code&gt;test&lt;/code&gt;]&lt;/ref&gt; and are therefore not portable. In portable shell scripts, the same effect may be achieved by connecting multiple invocations of &lt;code&gt;test&lt;/code&gt; together with the &lt;code&gt;&&&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; operators and parentheses. ==Exit Status== This command returns the following exit values: ’‘’0’’’ - The Expression parameter is true ’‘’1’’’ - The Expression parameter is false or missing ’’‘&gt;1’’’ - An error occurred ==Examples== 1. To test whether a file is nonexistent or empty, type:&lt;!– touch(1) -s file True if file exists and has a size greater than zero. –&gt; &lt;source lang=\"bash\"&gt; if test ! -s \"$1\" then echo $1 does not exist or is empty. fi &lt;/source&gt; If the file specified by the first positional parameter to the shell procedure, $1, does not exist or is of size 0, the test command displays the message. If $1 exists and has a size greater than 0, the test command displays nothing. Note: There must be a space between the -s function and the file name. The quotation marks around $1 ensure that the test works properly even if the value of $1 is a null string. If the quotation marks are omitted and $1 is the empty string, the test command displays the error message: test: argument expected. 2. To do a complex comparison, type: &lt;source lang=\"bash\"&gt; if [ $# -lt 2 -o ! -e \"$1\" ] then exit fi &lt;/source&gt; If the shell procedure is given fewer than two positional parameters or the file specified by $1 does not exist, then the shell procedure exits. The special shell variable $# represents the number of positional parameters entered on the command line that starts this shell procedure. ==See also== [[List of Unix utilities]] * [[Bourne shell]] * [[Korn shell|KornShell]]&lt;!– KornShell is the proper name as written by its author –&gt; * [[Z Shell]] * [[GNU]] &lt;tt&gt;[[Bash (Unix shell)|bash]]&lt;/tt&gt; * [[C shell]] * &lt;tt&gt;[[tcsh]]&lt;/tt&gt; * &lt;tt&gt;[[find]]&lt;/tt&gt; ==References== &lt;!–&lt;nowiki&gt; See http://en.wikipedia.org/wiki/Wikipedia:Footnotes for an explanation of how to generate footnotes using the &lt;ref&gt; and &lt;/ref&gt; tags, and the template below. &lt;/nowiki&gt;–&gt; &lt;references/&gt; {{Unix commands}} [[Category:Unix SUS2008 utilities]] [[Category:Conditional constructs]] 6brs4q3f4obygm6jejvcafone0ck2k9  \n####\n#### It’s still not displaying as a multiline chunk of text. How can I render it nicely as, let’s say XML output?\n\n\nThis is a sample piece of content returned by the “selectedXml” bit:\n\n\n\n#### \n\nTest (Unix)\n\n0 2491736  629490168 629490063 2014-10-13T21:13:12Z  2A02:580:B0ED:E300:9DBB:3B15:8A21:F31E  /* Description / wikitext text/x-wiki {{lowercase|title= test (Unix)}} ’‘’test’’’ is a [[command line interface|command-line]] utility found in [[Unix-like]] operating systems that evaluates [[Conditional (programming)|conditional expressions]]. ==Syntax== test ‘’expression’’ or [ ‘’expression’’ ] ==Description== The &lt;code&gt;test&lt;/code&gt; command in Unix evaluates the &lt;code&gt;expression&lt;/code&gt; parameter. In some shells such as [[FreeBSD]] &lt;code&gt;sh(1)&lt;/code&gt; it is a [[shell builtin]], even though the external version still exists. In the second form of the command, the &lt;code&gt;[ ]&lt;/code&gt; (brackets) must be surrounded by blank spaces. This is because &lt;code&gt;[&lt;/code&gt; is a program and [[POSIX]] compatible shells require a space between the program name and its arguments. One must test explicitly for file names in the C shell. File-name substitution ([[glob (programming)|globbing]]) causes the shell script to exit. == Arguments == The following arguments are used to construct this parameter: ’’‘-e’’’ FileName - FileName exists All remaining arguments return true if the object (file or string) exists, and the condition specified is true. ’’‘-b’’’ Filename - Returns a True exit value if the specified FileName exists and is a block special file ’’‘-c’’’ FileName - FileName is a [[character special file]] ’’‘-d’’’ FileName - FileName is a [[directory (file systems)|directory]] ’’‘-f’’’ FileName - FileName is a regular file ’’‘-g’’’ FileName - FileName’s Set [[Group identifier (Unix)|Group ID]] bit is set ’’‘-h’’’ FileName - FileName is a [[symbolic link]] ’’‘-k’’’ FileName - FileName’s sticky bit is set ’’‘-L’’’ FileName - FileName is a [[symbolic link]] ’’‘-p’’’ FileName - FileName is a [[named pipe]] (FIFO) ’’‘-r’’’ FileName - FileName is readable by the current process ’’‘-s’’’ FileName - FileName has a size greater than 0 ’’‘-t’’’ FileDescriptor - [[File descriptor|FileDescriptor]] is open and associated with a [[pseudo terminal|terminal]] ’’‘-u’’’ FileName - FileName’s Set [[User identifier (Unix)|User ID]] bit is set ’’‘-w’’’ FileName - FileName’s write flag is on. However, the FileName will not be writable on a read-only file system even if test indicates true ’’‘-x’’’ FileName - FileName’s [[Execution (computers)|execute]] flag is on If the specified file exists and is a directory, the &lt;code&gt;True&lt;/code&gt; exit value indicates that the current process has permission to change &lt;code&gt;cd&lt;/code&gt; into the directory. file1 ’’‘-nt’’’ file2 - file1 is newer than file2 file1 ’’‘-ot’’’ file2 - file1 is older than file2 file1 ’’‘-ef’’’ file2 - file1 is another name for file2 - ([[symbolic link]] or [[hard link]]) === String arguments === In [[Perl]], these sections are reversed: &lt;code&gt;eq&lt;/code&gt; is a string operator and &lt;code&gt;==&lt;/code&gt; is a numerical operator, and so on for the others. ’’‘-n’’’ String1 - the length of the String1 variable is nonzero ’’‘-z’’’ String1 - the length of the String1 variable is 0 (zero) String1 ’’‘=’’’ String2 - String1 and String2 variables are identical String1 ’’‘!=’’’ String2 - String1 and String2 variables are not identical String1 - String1 variable is not a null string === Number arguments === Integer1 ’’‘-eq’’’ Integer2 - Integer1 and Integer2 variables are [[algebra]]ically equal ’’‘-ne’’’ - not equal ’’‘-gt’’’ - greater than ’’‘-ge’’’ - greater or equal ’’‘-lt’’’ - less than ’’‘-le’’’ - less or equal === Operators === &lt;code&gt;test&lt;/code&gt; arguments can be combined with the following operators: ’’‘!’’’ - Unary negation operator ’’‘-a’’’ - Binary AND operator ’’‘-o’’’ - Binary OR operator (the &lt;code&gt;-a&lt;/code&gt; operator has higher precedence than the &lt;code&gt;-o&lt;/code&gt; operator) ’’‘(Expression)’’’ - Parentheses for grouping must be escaped with a backslash &lt;code&gt;&lt;/code&gt; The &lt;code&gt;-a&lt;/code&gt; and &lt;code&gt;-o&lt;/code&gt; operators, along with parentheses for grouping, are XSI extensions&lt;ref&gt;[http://www.opengroup.org/onlinepubs/009695399/utilities/test.html IEEE Std 1003.1, 2004, documentation for &lt;code&gt;test&lt;/code&gt;]&lt;/ref&gt; and are therefore not portable. In portable shell scripts, the same effect may be achieved by connecting multiple invocations of &lt;code&gt;test&lt;/code&gt; together with the &lt;code&gt;&&&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; operators and parentheses. ==Exit Status== This command returns the following exit values: ’‘’0’’’ - The Expression parameter is true ’‘’1’’’ - The Expression parameter is false or missing ’’‘&gt;1’’’ - An error occurred ==Examples== 1. To test whether a file is nonexistent or empty, type:&lt;!– touch(1) -s file True if file exists and has a size greater than zero. –&gt; &lt;source lang=\"bash\"&gt; if test ! -s \"$1\" then echo $1 does not exist or is empty. fi &lt;/source&gt; If the file specified by the first positional parameter to the shell procedure, $1, does not exist or is of size 0, the test command displays the message. If $1 exists and has a size greater than 0, the test command displays nothing. Note: There must be a space between the -s function and the file name. The quotation marks around $1 ensure that the test works properly even if the value of $1 is a null string. If the quotation marks are omitted and $1 is the empty string, the test command displays the error message: test: argument expected. 2. To do a complex comparison, type: &lt;source lang=\"bash\"&gt; if [ $# -lt 2 -o ! -e \"$1\" ] then exit fi &lt;/source&gt; If the shell procedure is given fewer than two positional parameters or the file specified by $1 does not exist, then the shell procedure exits. The special shell variable $# represents the number of positional parameters entered on the command line that starts this shell procedure. ==See also== [[List of Unix utilities]] * [[Bourne shell]] * [[Korn shell|KornShell]]&lt;!– KornShell is the proper name as written by its author –&gt; * [[Z Shell]] * [[GNU]] &lt;tt&gt;[[Bash (Unix shell)|bash]]&lt;/tt&gt; * [[C shell]] * &lt;tt&gt;[[tcsh]]&lt;/tt&gt; * &lt;tt&gt;[[find]]&lt;/tt&gt; ==References== &lt;!–&lt;nowiki&gt; See http://en.wikipedia.org/wiki/Wikipedia:Footnotes for an explanation of how to generate footnotes using the &lt;ref&gt; and &lt;/ref&gt; tags, and the template below. &lt;/nowiki&gt;–&gt; &lt;references/&gt; {{Unix commands}} [[Category:Unix SUS2008 utilities]] [[Category:Conditional constructs]] 6brs4q3f4obygm6jejvcafone0ck2k9  \n####\n#### It’s still not displaying as a multiline chunk of text. How can I render it nicely as, let’s say XML output?\n&gt; http://www.opengroup.org/onlinepubs/009695399/utilities/test.html\n&gt; Add URL to the chat? (Y)es/(N)o/(A)ll/(S)kip all/(D)on’t ask again [Yes]: d\n&gt; http://en.wikipedia.org/wiki/Wikipedia:Footnotes\n&gt; Add URL to the chat? (Y)es/(N)o/(A)ll/(S)kip all/(D)on’t ask again [Yes]: s\nTo render the XML content nicely as multiline text with proper formatting, you can use a library like react-syntax-highlighter to display the XML with syntax highlighting. Here’s how you can modify the Wiki.jsx file to achieve this:\n\nInstall the react-syntax-highlighter package if you haven’t already:\nnpm install react-syntax-highlighter\nUpdate the Wiki.jsx file to use the syntax highlighter:\n\nimport React, { useState, useRef } from \"react\";\nimport { Container, Form, FormControl, ListGroup, Card } from \"react-bootstrap\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { solarizedlight } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\nconst Wiki = () =&gt; {\n  const [query, setQuery] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [selectedXml, setSelectedXml] = useState(null);\n\n  const abortControllerRef = useRef(null);\n  let searchTimeout = null;\n\n  const handleSearch = (e) =&gt; {\n    const value = e.target.value;\n    setQuery(value);\n\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n\n    if (searchTimeout) {\n      clearTimeout(searchTimeout);\n    }\n\n    if (value.trim().length &gt;= 3) {\n      searchTimeout = setTimeout(() =&gt; {\n        abortControllerRef.current = new AbortController();\n        const { signal } = abortControllerRef.current;\n        try {\n          fetch(`http://dgx:4444/offsets/${value}`, {\n            mode: \"cors\",\n            signal,\n          })\n            .then((response) =&gt; response.json())\n            .then((data) =&gt; {\n              setResults(data);\n            })\n            .catch((error) =&gt; {\n              if (error.name !== \"AbortError\") {\n                console.error(\"Error fetching search results:\", error);\n                setResults([]);\n              }\n            });\n        } catch (error) {\n          console.error(\"Error fetching search results:\", error);\n          setResults([]);\n        }\n      }, 1000);\n      setSelectedXml(null);\n    } else {\n      setResults([]);\n    }\n  };\n\n  const handleResultClick = async (name, startByte, endByte) =&gt; {\n    try {\n      const response = await fetch(`http://dgx:4444/xml`, {\n        headers: {\n          Range: `bytes=${startByte}-${endByte}`,\n        },\n      });\n      const xmlData = await response.text();\n      setQuery(name);\n      setSelectedXml(xmlData);\n      setResults([]);\n    } catch (error) {\n      console.error(\"Error fetching XML data:\", error);\n      setSelectedXml(null);\n    }\n  };\n\n  return (\n    &lt;Container className=\"wiki-search-container\"&gt;\n      &lt;Form&gt;\n        &lt;FormControl\n          type=\"search\"\n          placeholder=\"Search\"\n          className=\"me-2\"\n          aria-label=\"Search\"\n          value={query}\n          onChange={handleSearch}\n        /&gt;\n      &lt;/Form&gt;\n\n      {results.length &gt; 0 && (\n        &lt;ListGroup className=\"mt-3\"&gt;\n          {results.map(([name, startByte, endByte]) =&gt; (\n            &lt;ListGroup.Item\n              key={`${name}-${startByte}`}\n              action\n              onClick={() =&gt; handleResultClick(name, startByte, endByte)}\n            &gt;\n              {name}\n            &lt;/ListGroup.Item&gt;\n          ))}\n        &lt;/ListGroup&gt;\n      )}\n\n      {selectedXml && (\n        &lt;Card className=\"mt-3\"&gt;\n          &lt;Card.Body&gt;\n            &lt;SyntaxHighlighter language=\"xml\" style={solarizedlight}&gt;\n              {selectedXml}\n            &lt;/SyntaxHighlighter&gt;\n          &lt;/Card.Body&gt;\n        &lt;/Card&gt;\n      )}\n    &lt;/Container&gt;\n  );\n};\n\nexport default Wiki;\nThis code uses react-syntax-highlighter to render the XML content with syntax highlighting, making it easier to read and visually appealing. You can choose different styles from the library to match your application’s theme.\n\nTokens: 6.6k sent, 823 received. Cost: $0.02 message, $0.28 session.\n\n\n\nPlease make that change.\nTo render the XML content nicely with syntax highlighting, we will use the react-syntax-highlighter package. Here are the changes needed in src/Wiki.jsx:\nFirst, ensure you have installed the react-syntax-highlighter package:\nnpm install react-syntax-highlighter\nNow, update the src/Wiki.jsx file:\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\nimport React, { useState, useRef } from \"react\";\n=======\nimport React, { useState, useRef } from \"react\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { solarizedlight } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n            &lt;pre&gt;{selectedXml}&lt;/pre&gt;\n=======\n            &lt;SyntaxHighlighter language=\"xml\" style={solarizedlight}&gt;\n              {selectedXml}\n            &lt;/SyntaxHighlighter&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nThese changes will render the XML content with syntax highlighting, making it more readable and visually appealing.\n\nTokens: 9.7k sent, 221 received. Cost: $0.03 message, $0.31 session.\nCommitting src/Wiki.jsx before applying edits.\nCommit 2daa847 feat: Add useRef import to Wiki component for future enhancements\nApplied edit to src/Wiki.jsx\nCommit 2882b76 feat: Add XML syntax highlighting in Wiki component using react-syntax-highlighter\nnpm install react-syntax-highlighter\nRun shell command? (Y)es/(N)o/(D)on’t ask again [Yes]: n\nYou can use /undo to undo and discard each aider commit.\n\n\n\nUnder the search box, add a component of some sort that will be used to display some information about the search results received. E.g. if I type in “Python”, there should be some light read-only text under the search bar that initially says “Searching for ‘Python’…”, when results are received, the text should say “Received  results for ‘Python’…”, with N changing as more results are received.\nTo add a component that displays information about the search results, we will update the src/Wiki.jsx file to include a new state variable for the search status message and update it accordingly during the search process.\nHere are the changes:\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n  const [selectedXml, setSelectedXml] = useState(null);\n=======\n  const [selectedXml, setSelectedXml] = useState(null);\n  const [searchStatus, setSearchStatus] = useState(\"\");\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n    if (abortControllerRef.current) {\n=======\n    setSearchStatus(`Searching for '${value}'...`);\n    \n    if (abortControllerRef.current) {\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n            })\n=======\n              setSearchStatus(`Received ${data.length} results for '${value}'...`);\n            })\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n      {results.length &gt; 0 && (\n=======\n      &lt;div className=\"search-status mt-2 text-muted\"&gt;\n        {searchStatus}\n      &lt;/div&gt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nThese changes will display a message under the search box indicating the current search status, updating as results are received.\n\nTokens: 5.9k sent, 257 received. Cost: $0.02 message, $0.33 session.\nApplied edit to src/Wiki.jsx\nCommit 72544ab feat: Add search status display for user feedback during search process\nYou can use /undo to undo and discard each aider commit.\n\n\n\nUpdate the statusline to capture the duration it took, e.g. “Received 203 results for”Python” in x.y seconds.”\nTo capture the duration it took to receive the search results, we will update the src/Wiki.jsx file to measure the time taken for the fetch operation and include it in the status message.\nHere are the changes:\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n      searchTimeout = setTimeout(() =&gt; {\n=======\n      searchTimeout = setTimeout(() =&gt; {\n        const startTime = performance.now();\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n              setSearchStatus(`Received ${data.length} results for '${value}'...`);\n=======\n              const endTime = performance.now();\n              const duration = ((endTime - startTime) / 1000).toFixed(2);\n              setSearchStatus(`Received ${data.length} results for '${value}' in ${duration} seconds.`);\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nThese changes will update the status line to include the time taken to receive the search results.\n\nTokens: 6.3k sent, 181 received. Cost: $0.02 message, $0.35 session.\nApplied edit to src/Wiki.jsx\nCommit 0487f16 feat: Update statusline to include duration of search results retrieval\nYou can use /undo to undo and discard each aider commit.\n\n\n\nIf there is no text in the search box, hide the status line.\nTo hide the status line when there is no text in the search box, we can conditionally render the status line based on the query state. Here are the changes:\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n      &lt;div className=\"search-status mt-2 text-muted\"&gt;\n        {searchStatus}\n      &lt;/div&gt;\n=======\n      {query && (\n        &lt;div className=\"search-status mt-2 text-muted\"&gt;\n          {searchStatus}\n        &lt;/div&gt;\n      )}\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nThis change will ensure that the status line is only displayed when there is text in the search box.\n\nTokens: 6.6k sent, 124 received. Cost: $0.02 message, $0.36 session.\nApplied edit to src/Wiki.jsx\nCommit 460f82b feat: Hide status line when search box is empty\nYou can use /undo to undo and discard each aider commit.\n\n\n\nReview the search bar logic. When I’m typing fast, e.g. if I type Trent fast, where each character is definitely being typed well before a second has elapsed… the app is still dispatching searches for each keystroke. i.e. in the Chrome dev console I can see that 200 fetch requests were dispatched for ‘Tre’, then ‘Tren’, then ‘Trent’. We should be waiting for at least a second to see if there has been any more typing before dispatching a fetch.\nTo ensure that the app waits for at least a second before dispatching a fetch request, we need to adjust the debounce logic in the handleSearch function. Specifically, we should clear the timeout and set a new one only if the user stops typing for a second.\nHere are the changes:\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n    setSearchStatus(`Searching for '${value}'...`);\n    \n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort(); // Cancel any ongoing fetch requests\n    }\n\n    if (searchTimeout) {\n      clearTimeout(searchTimeout);\n    }\n\n    if (value.trim().length &gt;= 3) {\n      searchTimeout = setTimeout(() =&gt; {\n        const startTime = performance.now();\n        abortControllerRef.current = new AbortController();\n        const { signal } = abortControllerRef.current;\n        try {\n          fetch(`http://dgx:4444/offsets/${value}`, {\n            mode: \"cors\",\n            signal,\n          })\n            .then((response) =&gt; response.json())\n            .then((data) =&gt; {\n              setResults(data);\n              const endTime = performance.now();\n              const duration = ((endTime - startTime) / 1000).toFixed(2);\n              setSearchStatus(`Received ${data.length} results for '${value}' in ${duration} seconds.`);\n            })\n            .catch((error) =&gt; {\n              if (error.name !== \"AbortError\") {\n                console.error(\"Error fetching search results:\", error);\n                setResults([]);\n              }\n            });\n        } catch (error) {\n          console.error(\"Error fetching search results:\", error);\n          setResults([]);\n        }\n      }, 1000);\n      setSelectedXml(null); // Clear selected XML when the search box is cleared\n    } else {\n      setResults([]);\n    }\n=======\n    if (searchTimeout) {\n      clearTimeout(searchTimeout);\n    }\n\n    if (value.trim().length &gt;= 3) {\n      searchTimeout = setTimeout(() =&gt; {\n        setSearchStatus(`Searching for '${value}'...`);\n\n        if (abortControllerRef.current) {\n          abortControllerRef.current.abort(); // Cancel any ongoing fetch requests\n        }\n\n        const startTime = performance.now();\n        abortControllerRef.current = new AbortController();\n        const { signal } = abortControllerRef.current;\n        try {\n          fetch(`http://dgx:4444/offsets/${value}`, {\n            mode: \"cors\",\n            signal,\n          })\n            .then((response) =&gt; response.json())\n            .then((data) =&gt; {\n              setResults(data);\n              const endTime = performance.now();\n              const duration = ((endTime - startTime) / 1000).toFixed(2);\n              setSearchStatus(`Received ${data.length} results for '${value}' in ${duration} seconds.`);\n            })\n            .catch((error) =&gt; {\n              if (error.name !== \"AbortError\") {\n                console.error(\"Error fetching search results:\", error);\n                setResults([]);\n              }\n            });\n        } catch (error) {\n          console.error(\"Error fetching search results:\", error);\n          setResults([]);\n        }\n      }, 1000);\n    } else {\n      setResults([]);\n      setSearchStatus(\"\");\n    }\n    setSelectedXml(null); // Clear selected XML when the search box is cleared\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nThis change ensures that the search request is only dispatched if the user stops typing for at least one second, reducing unnecessary fetch requests.\n\nTokens: 6.9k sent, 694 received. Cost: $0.02 message, $0.39 session.\nApplied edit to src/Wiki.jsx\nCommit fb141da fix: Implement debounce logic for search requests to reduce fetch calls\nYou can use /undo to undo and discard each aider commit.\n\n\n\nOk that still dispatches calls for ‘Tre’, ‘Tren’, ‘Trent’, cancels all three of them, then dispatches a final one (presumably one second later) for ‘Trent’.\nTo address the issue of multiple fetch requests being dispatched and canceled, we can improve the debounce logic by using a useEffect hook to manage the timeout. This will ensure that the fetch request is only dispatched after the user has stopped typing for a specified duration.\nHere’s how you can implement this:\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\nimport React, { useState, useRef } from \"react\";\n=======\nimport React, { useState, useRef, useEffect } from \"react\";\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n  let searchTimeout = null;\n\n  const handleSearch = (e) =&gt; {\n    const value = e.target.value;\n    setQuery(value);\n\n    if (searchTimeout) {\n      clearTimeout(searchTimeout);\n    }\n\n    if (value.trim().length &gt;= 3) {\n      searchTimeout = setTimeout(() =&gt; {\n        setSearchStatus(`Searching for '${value}'...`);\n\n        if (abortControllerRef.current) {\n          abortControllerRef.current.abort(); // Cancel any ongoing fetch requests\n        }\n\n        const startTime = performance.now();\n        abortControllerRef.current = new AbortController();\n        const { signal } = abortControllerRef.current;\n        try {\n          fetch(`http://dgx:4444/offsets/${value}`, {\n            mode: \"cors\",\n            signal,\n          })\n            .then((response) =&gt; response.json())\n            .then((data) =&gt; {\n              setResults(data);\n              const endTime = performance.now();\n              const duration = ((endTime - startTime) / 1000).toFixed(2);\n              setSearchStatus(`Received ${data.length} results for '${value}' in ${duration} seconds.`);\n            })\n            .catch((error) =&gt; {\n              if (error.name !== \"AbortError\") {\n                console.error(\"Error fetching search results:\", error);\n                setResults([]);\n              }\n            });\n        } catch (error) {\n          console.error(\"Error fetching search results:\", error);\n          setResults([]);\n        }\n      }, 1000);\n    } else {\n      setResults([]);\n      setSearchStatus(\"\");\n    }\n    setSelectedXml(null); // Clear selected XML when the search box is cleared\n  };\n=======\n  const handleSearch = (e) =&gt; {\n    setQuery(e.target.value);\n    setSelectedXml(null); // Clear selected XML when the search box is cleared\n  };\n\n  useEffect(() =&gt; {\n    if (query.trim().length &lt; 3) {\n      setResults([]);\n      setSearchStatus(\"\");\n      return;\n    }\n\n    setSearchStatus(`Searching for '${query}'...`);\n\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort(); // Cancel any ongoing fetch requests\n    }\n\n    const startTime = performance.now();\n    abortControllerRef.current = new AbortController();\n    const { signal } = abortControllerRef.current;\n\n    const fetchData = async () =&gt; {\n      try {\n        const response = await fetch(`http://dgx:4444/offsets/${query}`, {\n          mode: \"cors\",\n          signal,\n        });\n        const data = await response.json();\n        setResults(data);\n        const endTime = performance.now();\n        const duration = ((endTime - startTime) / 1000).toFixed(2);\n        setSearchStatus(`Received ${data.length} results for '${query}' in ${duration} seconds.`);\n      } catch (error) {\n        if (error.name !== \"AbortError\") {\n          console.error(\"Error fetching search results:\", error);\n          setResults([]);\n        }\n      }\n    };\n\n    const timeoutId = setTimeout(fetchData, 1000);\n\n    return () =&gt; clearTimeout(timeoutId);\n  }, [query]);\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nThis refactoring uses useEffect to handle the debounce logic, ensuring that the fetch request is only dispatched after the user has stopped typing for one second. This should prevent unnecessary fetch requests and improve performance.\n\nTokens: 6.9k sent, 787 received. Cost: $0.03 message, $0.41 session.\nApplied edit to src/Wiki.jsx\nCommit 9289f8d refactor: Improve debounce logic for search requests using useEffect\nYou can use /undo to undo and discard each aider commit.\n\n\n\nWhen a search result is clicked on and setQuery(name) is called… a new offset search is being dispatched. This shouldn’t happen. The “text” of the search bar should be set, but no actual query should be made. Hopefully this could be done by maybe something like setQuery(name, textOnly=true) or something.\nTo prevent a new search from being dispatched when setting the query text from a search result click, we can introduce a new state variable to control whether the search should be triggered. Here’s how you can implement this:\n\nAdd a new state variable shouldSearch to control when the search should be triggered.\nModify the handleSearch function to set shouldSearch to true when the user types in the search box.\nUpdate the useEffect hook to only perform the search if shouldSearch is true.\nSet shouldSearch to false when setting the query from a search result click.\n\nHere are the changes:\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n  const [selectedXml, setSelectedXml] = useState(null);\n=======\n  const [selectedXml, setSelectedXml] = useState(null);\n  const [shouldSearch, setShouldSearch] = useState(true);\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n    setQuery(e.target.value);\n=======\n    setQuery(e.target.value);\n    setShouldSearch(true);\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n    if (query.trim().length &lt; 3) {\n=======\n    if (!shouldSearch || query.trim().length &lt; 3) {\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n      setSelectedXml(xmlData);\n=======\n      setQuery(name); // Place the result's name into the search bar\n      setShouldSearch(false);\n      setSelectedXml(xmlData);\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nThese changes ensure that the search is only triggered when the user types in the search box, and not when the query is set from a search result click.\n\nTokens: 7.0k sent, 360 received. Cost: $0.02 message, $0.43 session.\nApplied edit to src/Wiki.jsx\nCommit 863cc96 feat: Prevent search dispatch when setting query from search result click\nYou can use /undo to undo and discard each aider commit.\n\n\n\nAdd a radio button with two states, XML and HTML, with the default being XML. The button should come below the search bar, before the status line. When the radio button is set to XML, all current behavior remains the same. When it is set to HTML, we use a new selectedHtml component, and the URL is http://dgx:4444/html instead of http://dgx:4444/xml. Use a new  for displaying {selectedHtml && …\n\nhttp://dgx:4444/htmlAdd URL to the chat? (Y)es/(N)o/(A)ll/(S)kip all/(D)on't ask again [Yes]: n   http://dgx:4444/xml\nAdd URL to the chat? (Y)es/(N)o/(A)ll/(S)kip all/(D)on’t ask again [Yes]: n\n\nTo implement the requested changes, we need to update src/Wiki.jsx to:\n\nAdd a radio button group to toggle between XML and HTML.\nIntroduce a new state variable to track the selected format.\nModify the handleResultClick function to fetch data from the appropriate URL based on the selected format.\nRender the selected content in a new &lt;Card&gt; for HTML.\n\nHere are the SEARCH/REPLACE blocks:\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\nimport { Container, Form, FormControl, ListGroup, Card } from \"react-bootstrap\";\n=======\nimport { Container, Form, FormControl, ListGroup, Card, FormCheck } from \"react-bootstrap\";\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n  const [shouldSearch, setShouldSearch] = useState(true);\n=======\n  const [format, setFormat] = useState(\"XML\");\n  const [shouldSearch, setShouldSearch] = useState(true);\n  const [selectedHtml, setSelectedHtml] = useState(null);\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n  // Handle item click and fetch XML data\n=======\n  // Handle item click and fetch data based on selected format\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n      const response = await fetch(`http://dgx:4444/xml`, {\n=======\n      const url = format === \"XML\" ? \"http://dgx:4444/xml\" : \"http://dgx:4444/html\";\n      const response = await fetch(url, {\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n      const xmlData = await response.text();\n      setQuery(name); // Place the result's name into the search bar\n=======\n      const data = await response.text();\n      setQuery(name); // Place the result's name into the search bar\n      setShouldSearch(false);\n      if (format === \"XML\") {\n        setSelectedXml(data);\n        setSelectedHtml(null);\n      } else {\n        setSelectedHtml(data);\n        setSelectedXml(null);\n      }\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n      &lt;Form&gt;\n=======\n      &lt;Form className=\"mb-3\"&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n      {query && (\n=======\n      &lt;FormCheck\n        type=\"radio\"\n        label=\"XML\"\n        name=\"format\"\n        id=\"xml-radio\"\n        checked={format === \"XML\"}\n        onChange={() =&gt; setFormat(\"XML\")}\n        className=\"mt-2\"\n      /&gt;\n      &lt;FormCheck\n        type=\"radio\"\n        label=\"HTML\"\n        name=\"format\"\n        id=\"html-radio\"\n        checked={format === \"HTML\"}\n        onChange={() =&gt; setFormat(\"HTML\")}\n        className=\"mb-2\"\n      /&gt;\n\n      {query && searchStatus && (\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n    &lt;/Container&gt;\n=======\n      {selectedHtml && (\n        &lt;Card className=\"mt-3\"&gt;\n          &lt;Card.Body&gt;\n            &lt;div dangerouslySetInnerHTML={{ __html: selectedHtml }} /&gt;\n          &lt;/Card.Body&gt;\n        &lt;/Card&gt;\n      )}\n    &lt;/Container&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nThese changes will add a radio button group to toggle between XML and HTML formats, fetch data from the appropriate URL, and display the content accordingly.\n\nTokens: 6.4k sent, 706 received. Cost: $0.02 message, $0.46 session.\nCommitting src/Wiki.jsx before applying edits.\nCommit 2280058 style: Format search status and results list for better readability\nApplied edit to src/Wiki.jsx\nCommit 850857a feat: Add radio button to toggle between XML and HTML formats\nYou can use /undo to undo and discard each aider commit.\n\n\n\nMake sure the ‘Wiki’ tab is always “activated” whenever the page first loads (or reloads). I’m not sure if this should be handled in src/App.jsx.\nTo ensure the ‘Wiki’ tab is always activated when the page first loads or reloads, we need to set the defaultActiveKey to “wiki” in the Tabs component within src/App.jsx. Here is the necessary change:\nsrc/App.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n        &lt;Tabs defaultActiveKey=\"stats\" id=\"main-tabs\"&gt;\n=======\n        &lt;Tabs defaultActiveKey=\"wiki\" id=\"main-tabs\"&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nThis change will ensure that the ‘Wiki’ tab is the default active tab whenever the page is loaded.\n\nTokens: 7.4k sent, 116 received. Cost: $0.02 message, $0.48 session.\nCommitting src/App.jsx before applying edits.\nCommit 10b02e1 fix: Remove Stats tab from the main application view\nApplied edit to src/App.jsx\nCommit 61a843b feat: Set ‘Wiki’ tab as default active tab on page load\nYou can use /undo to undo and discard each aider commit.\n\n\n\n/multi\n\nMultiline mode: Enabled. Enter inserts newline, Alt-Enter submits text\n\n\n\n/add src/Utils.jsx\n\nAdded src/Utils.jsx to the chat\n\n\n\nVerify if src/Utils.jsx is correct; I am using it as a JSX module for helper routines.\nTo ensure src/Utils.jsx is correctly set up as a JSX module for helper routines, we need to ensure it exports the bytesToHuman function. Here’s the necessary change:\nsrc/Utils.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\nfunction bytesToHuman(bytes) {\n=======\nexport function bytesToHuman(bytes) {\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nThis change will export the bytesToHuman function, making it available for import in other modules.\n\nTokens: 7.7k sent, 93 received. Cost: $0.02 message, $0.50 session.\nCommitting src/Utils.jsx before applying edits.\nCommit 98a54f5 feat: Add Utils component for utility functions\nApplied edit to src/Utils.jsx\nCommit b7c8aec feat: Export bytesToHuman function from Utils module for usage in other files\nYou can use /undo to undo and discard each aider commit.\n\n\n\nAlter the search results such that after each text component is displayed, the size of the article is calculated (via last byte - first byte), and then displayed as ” [{bytesToHuman(size)}]“, e.g. if the search result item is”Python (programming language)“, it should now display”Python (programming language) [3.8 MB]” (assuming “3.8 MB” is returned by the bytesToHuman() routine).\nTo display the size of each article in the search results, we need to calculate the size using the difference between endByte and startByte, and then format it using the bytesToHuman function. Here’s how you can implement this:\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n        {results.map(([name, startByte, endByte]) =&gt; (\n          &lt;ListGroup.Item\n            key={`${name}-${startByte}`}\n            action\n            onClick={() =&gt; handleResultClick(name, startByte, endByte)}\n          &gt;\n            {name}\n          &lt;/ListGroup.Item&gt;\n        ))}\n=======\n        {results.map(([name, startByte, endByte]) =&gt; {\n          const size = endByte - startByte;\n          return (\n            &lt;ListGroup.Item\n              key={`${name}-${startByte}`}\n              action\n              onClick={() =&gt; handleResultClick(name, startByte, endByte)}\n            &gt;\n              {name} [{bytesToHuman(size)}]\n            &lt;/ListGroup.Item&gt;\n          );\n        })}\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\n\nTokens: 6.7k sent, 208 received. Cost: $0.02 message, $0.52 session.\nCommitting src/Wiki.jsx before applying edits.\nCommit a64ef15 refactor: Improve code formatting and clean up unused components in Wiki.jsx\nApplied edit to src/Wiki.jsx\nCommit 2e5d371 feat: Display article size in search results using bytesToHuman function\nYou can use /undo to undo and discard each aider commit.\n\n\n\nAdd additional code to the status line that displays the following after an XML document has been received: “Received {bytesToHuman(content-length)} in x.yz seconds.”.\nTo display the content length in the status line after receiving an XML document, we need to update the handleResultClick function in src/Wiki.jsx. We’ll calculate the content length from the response headers and update the status message accordingly.\nHere’s the necessary change:\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n      const data = await response.text();\n      setShouldSearch(false);\n      setQuery(name); // Place the result's name into the search bar\n      //setShouldSearch(true);\n      if (format === \"XML\") {\n        setSelectedXml(data);\n        setSelectedHtml(null);\n      } else {\n        setSelectedHtml(data);\n        setSelectedXml(null);\n      }\n      setResults([]); // Clear results when an item is clicked\n=======\n      const data = await response.text();\n      const contentLength = response.headers.get(\"Content-Length\");\n      const endTime = performance.now();\n      const duration = ((endTime - startTime) / 1000).toFixed(2);\n      setShouldSearch(false);\n      setQuery(name); // Place the result's name into the search bar\n      if (format === \"XML\") {\n        setSelectedXml(data);\n        setSelectedHtml(null);\n        setSearchStatus(\n          `Received ${bytesToHuman(contentLength)} in ${duration} seconds.`\n        );\n      } else {\n        setSelectedHtml(data);\n        setSelectedXml(null);\n      }\n      setResults([]); // Clear results when an item is clicked\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\n\nTokens: 7.0k sent, 297 received. Cost: $0.02 message, $0.54 session.\nApplied edit to src/Wiki.jsx\nCommit be53a22 feat: Display content length and duration in status line after XML receipt\nYou can use /undo to undo and discard each aider commit.\n\n\n\nFix this error:\n\n\n[eslint]\n\n\nsrc/Wiki.jsx\n\n\nLine 87:36: ‘startTime’ is not defined no-undef\nTo fix the error, we need to ensure that startTime is defined within the scope of the handleResultClick function. It seems like startTime was intended to be used to measure the duration of the fetch operation, but it wasn’t defined in the function. We should define startTime at the beginning of the handleResultClick function.\nHere’s the change:\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n    try {\n=======\n    const startTime = performance.now();\n    try {\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\n\nTokens: 7.5k sent, 108 received. Cost: $0.02 message, $0.56 session.\nApplied edit to src/Wiki.jsx\nCommit 14907ab fix: Define ‘startTime’ in handleResultClick to resolve no-undef error\nYou can use /undo to undo and discard each aider commit.\n\n\n\nChange the selectedXml style so that the lines wrap.\nTo enable line wrapping for the selectedXml content, we need to adjust the SyntaxHighlighter component’s style. We can achieve this by setting the wrapLongLines property to true.\nHere’s the change:\nsrc/Wiki.jsx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n            &lt;SyntaxHighlighter language=\"xml\" style={solarizedlight}&gt;\n=======\n            &lt;SyntaxHighlighter language=\"xml\" style={solarizedlight} wrapLongLines={true}&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\n\nTokens: 7.7k sent, 102 received. Cost: $0.02 message, $0.58 session.\nCommitting src/Wiki.jsx before applying edits.\nCommit 083bfad refactor: Improve search status handling and conditionally render results\nApplied edit to src/Wiki.jsx\nCommit eee4498 feat: Enable line wrapping for selectedXml in SyntaxHighlighter component\nYou can use /undo to undo and discard each aider commit.\n\n\n\nThat didn’t appear to do anything. Can you review the App.scss or App.css and see if anything can be done there?\nTo improve the styling of the selectedXml content for better readability, we can adjust the CSS in src/App.scss to ensure proper line wrapping and spacing. Let’s add some styles to enhance the display of the XML content.\nHere’s the SEARCH/REPLACE block for src/App.scss:\nsrc/App.scss\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH\n.wiki-search-container .list-group-item {\n    white-space: normal; // Allow text to wrap\n}\n=======\n.wiki-search-container .list-group-item {\n    white-space: normal; // Allow text to wrap\n}\n\n.wiki-search-container .card-body {\n    white-space: pre-wrap; // Preserve whitespace and wrap lines\n    word-wrap: break-word; // Break long words\n    overflow-wrap: break-word; // Ensure long words break\n    line-height: 1.5; // Improve readability with line height\n}\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE\nThese changes will ensure that the XML content is displayed with proper line wrapping and spacing, making it easier to read.\n\nTokens: 6.5k sent, 212 received. Cost: $0.02 message, $0.59 session.\nApplied edit to src/App.scss\nCommit 3cef238 style: Improve readability of selected XML content in App.scss\nYou can use /undo to undo and discard each aider commit."
  },
  {
    "objectID": "articles/from-pyparallel-to-python-free-threading/index.html#pytorch-deep-neural-networks-llms-and-andrej-karpathys-youtube-series",
    "href": "articles/from-pyparallel-to-python-free-threading/index.html#pytorch-deep-neural-networks-llms-and-andrej-karpathys-youtube-series",
    "title": "DRAFT: From PyParallel to Python Free-Threading",
    "section": "PyTorch, Deep Neural Networks, LLMs, and Andrej Karpathy’s YouTube Series",
    "text": "PyTorch, Deep Neural Networks, LLMs, and Andrej Karpathy’s YouTube Series"
  },
  {
    "objectID": "tools/index.html",
    "href": "tools/index.html",
    "title": "Tools",
    "section": "",
    "text": "Intel Intrinsics Guide\n\nIntel Intrinsics Guide.\n\n\n\nOak Ridge National Laboratory CUDA Training Series\n\nCUDA Training Series\nPDFs of the slides"
  },
  {
    "objectID": "projects/index.html",
    "href": "projects/index.html",
    "title": "Projects & Repositories",
    "section": "",
    "text": "PerfectHash\nTracer\nPyParallel (GitHub)"
  },
  {
    "objectID": "projects/index.html#recent",
    "href": "projects/index.html#recent",
    "title": "Projects & Repositories",
    "section": "",
    "text": "PerfectHash\nTracer\nPyParallel (GitHub)"
  },
  {
    "objectID": "projects/index.html#not-so-recent",
    "href": "projects/index.html#not-so-recent",
    "title": "Projects & Repositories",
    "section": "Not So Recent",
    "text": "Not So Recent\n\nEnversion\nCQ Python\nPersonal Python Library ‘tpn’"
  },
  {
    "objectID": "blog/posts/2025-xx-xx-pytorch-and-python-free-threading/index.html",
    "href": "blog/posts/2025-xx-xx-pytorch-and-python-free-threading/index.html",
    "title": "DRAFT: PyTorch and Python Free-Threading",
    "section": "",
    "text": "Introduction\n  Getting Started\n  \n  Parallelopedia\n  \n  Parallelopedia Web Interface\nThis blog post is sponsored in part by Meta in collaboration with Quansight and OpenTeams."
  },
  {
    "objectID": "blog/posts/2025-xx-xx-pytorch-and-python-free-threading/index.html#parallelopedia",
    "href": "blog/posts/2025-xx-xx-pytorch-and-python-free-threading/index.html#parallelopedia",
    "title": "DRAFT: PyTorch and Python Free-Threading",
    "section": "Parallelopedia",
    "text": "Parallelopedia\nAll of the code in this article is available in the Parallelopedia repository on Github.\n\nParallelopedia Web Interface\nThe React Bootstrap web interface lives in the Parallelopedia-UI repository.\n\n\n\n\n\n\nNote\n\n\n\nFull disclaimer: I’m not a web developer. I don’t know JavaScript, React, or Bootstrap with any level of proficiency other than what I’ve been able to bootstrap (heh) with in the past few months via LLMs like ChatGPT. In fact, a lot of the Parallelopedia-UI code was written by Aider using OpenAI’s GPT-4o model.\nSo, TL;DR, the web interface code probably sucks."
  },
  {
    "objectID": "articles/is-prefix-of-string-in-table/index.html",
    "href": "articles/is-prefix-of-string-in-table/index.html",
    "title": "Is Prefix Of String In Table?",
    "section": "",
    "text": "TL;DR\n  Overview\n  The Background\n  \n  The Tracer Project\n  Baseline C Implementation\n  The Proposed Interface\n  \n  The IsPrefixOfStringInTable Function\n  The STRING_MATCH Structure\n  \n  The Test Data\n  \n  NTFS Reserved Names\n  \n  \n  Requirements and Design Decisions\n  The Data Structures\n  \n  STRING_TABLE\n  STRING_ARRAY\n  STRING_SLOT\n  SLOT_INDEX\n  String Table Construction\n  \n  The Benchmark\n  \n  Release vs PGO Oddities\n  \n  The Implementations\n  \n  Round 1\n  \n  C Implementations\n  \n  IsPrefixOfCStrInArray\n  IsPrefixOfStringInTable_1\n  IsPrefixMatch\n  IsPrefixMatchAvx2\n  IsPrefixOfStringInTable_2\n  IsPrefixOfStringInTable_3\n  IsPrefixOfStringInTable_4\n  IsPrefixOfStringInTable_5\n  IsPrefixOfStringInTable_6\n  IsPrefixOfStringInTable_7\n  IsPrefixOfStringInTable_8\n  IsPrefixOfStringInTable_9\n  IsPrefixOfStringInTable_10\n  \n  Speeding Up Negative Matches with Assembly\n  \n  Windows x64 ABI Calling Conventions\n  \n  NESTED_ENTRY\n  LEAF_ENTRY\n  \n  \n  Assembly Implementations\n  \n  IsPrefixOfStringInTable_x64_1\n  IsPrefixOfStringInTable_x64_2\n  IsPrefixOfStringInTable_x64_3\n  \n  Internet Feedback\n  \n  Round 2—Post-Internet Feedback\n  \n  IsPrefixOfStringInTable_11\n  IsPrefixOfStringInTable_x64_4\n  IsPrefixOfStringInTable_12\n  IsPrefixOfStringInTable_13\n  IsPrefixOfStringInTable_14\n  IsPrefixOfStringInTable_x64_5\n  \n  \n  Reviewing x64 v3…\n  \n  IsPrefixOfStringInTable_x64_8\n  IsPrefixOfStringInTable_x64_9\n  IsPrefixOfStringInTable_x64_10\n  IsPrefixOfStringInTable_x64_11\n  IsPrefixOfStringInTable_x64_12\n  \n  Other Applications\n  Appendix\n  \n  Implementation Considerations\n  Release Build versus Profile Guided Optimization Build\n  Typedefs\n  \n  Colophon\n  \n  Quarto & Markdown\n  Data Visualization\n  \n  Algorithm Diagrams\n  Benchmarks\n  \n  \n  Comments\nPublished: 4th May, 2018. Last updated: 1st November, 2024.\nHacker News discussion | Reddit discussion"
  },
  {
    "objectID": "articles/is-prefix-of-string-in-table/index.html#the-tracer-project",
    "href": "articles/is-prefix-of-string-in-table/index.html#the-tracer-project",
    "title": "Is Prefix Of String In Table?",
    "section": "The Tracer Project",
    "text": "The Tracer Project\nOne of the frustrations I had with existing Python profilers was that there was no easy or efficient means to filter or exclude trace information based on the module name of the code being executed. I tackled this in my tracer project, which allows you to set an environment variable named TRACER_MODULE_NAMES to restrict which modules should be traced, e.g.:\nset TRACER_MODULE_NAMES=myproject1;myproject2;myproject3.subproject;numpy;pandas;scipy\nIf the code being executed is coming from the module myproject3.subproject.foo, then we need to trace it, as that string prefix matches the third entry on our list.\nThis article details the custom data structure and algorithm I came up with in order to try and solve the prefix matching problem more optimally with a SIMD approach. The resulting StringTable component is used extensively within the tracer project, and as such, must conform to unique constraints such as no use of the C runtime library and allocating all memory through TraceStore-backed allocators. Thus, it’s not really something you’d drop in to your current project in its current form. Hopefully, the article still proves to be interesting.\n\n\n\n\n\n\nNote\n\n\n\nThe code samples provided herein are copied directly from the tracer project, which is written in C and assembly, and uses the Pascal-esque Cutler Normal Form style for C. If you’re used to the more UNIX-style Kernel Normal Form of C, it’s quite like that, except that it’s absolutely nothing like that, and all these code samples will probably be very jarring."
  },
  {
    "objectID": "articles/is-prefix-of-string-in-table/index.html#baseline-c-implementation",
    "href": "articles/is-prefix-of-string-in-table/index.html#baseline-c-implementation",
    "title": "Is Prefix Of String In Table?",
    "section": "Baseline C Implementation",
    "text": "Baseline C Implementation\nThe simplest way of solving this in C is to have an array of C strings (i.e., NULL-terminated byte arrays), then for each string, loop through byte by byte and see if it prefix matches the search string.\n\nBaseline (Cutler Normal Form)Baseline (Kernel Normal Form)\n\n\n//\n// Declare a set of module names to be used as a string array.\n//\n\nconst PCSZ ModuleNames[] = {\n    \"myproject1\",\n    \"myproject2\",\n    \"myproject3.subproject\",\n    \"numpy\",\n    \"pandas\",\n    \"scipy\",\n    NULL,\n};\n\n//\n// Define the function pointer typedef.\n//\n\ntypedef\nSTRING_TABLE_INDEX\n(IS_PREFIX_OF_CSTR_IN_ARRAY)(\n    _In_ PCSZ *StringArray,\n    _In_ PCSZ String,\n    _Out_opt_ PSTRING_MATCH Match\n    );\ntypedef IS_PREFIX_OF_CSTR_IN_ARRAY *PIS_PREFIX_OF_CSTR_IN_ARRAY;\n\n//\n// Forward declaration.\n//\n\nIS_PREFIX_OF_CSTR_IN_ARRAY IsPrefixOfCStrInArray;\n\n_Use_decl_annotations_\nSTRING_TABLE_INDEX\nIsPrefixOfCStrInArray(\n    PCSZ *StringArray,\n    PCSZ String,\n    PSTRING_MATCH Match\n    )\n{\n    PCSZ Left;\n    PCSZ Right;\n    PCSZ *Target;\n    ULONG Index = 0;\n    ULONG Count;\n\n    for (Target = StringArray; *Target != NULL; Target++, Index++) {\n        Count = 0;\n        Left = String;\n        Right = *Target;\n\n        while (*Left && *Right && *Left++ == *Right++) {\n            Count++;\n        }\n\n        if (Count &gt; 0 && !*Right) {\n            if (ARGUMENT_PRESENT(Match)) {\n                Match-&gt;Index = (BYTE)Index;\n                Match-&gt;NumberOfMatchedCharacters = (BYTE)Count;\n                Match-&gt;String = NULL;\n            }\n            return (STRING_TABLE_INDEX)Index;\n        }\n    }\n\n    return NO_MATCH_FOUND;\n}\n\n\nconst char *module_names[] = {\n    \"myproject1\",\n    \"myproject2\",\n    \"myproject3.subproject\",\n    \"numpy\",\n    \"pandas\",\n    \"scipy\",\n    0,\n};\n\nstruct string_match {\n    /* Index of the match. */\n    unsigned char index;\n\n    /* Number of characters matched. */\n    unsigned char number_of_chars_matched;\n\n    /* Pad out to an 8-byte boundary. */\n    unsigned short padding[3];\n\n    /* Pointer to the string that was matched. */\n    char *str;\n};\n\nunsigned char\nis_prefix_of_c_str_in_array(const char **array,\n                            const char *str,\n                            struct string_match *match)\n{\n    char *left, *right, **target;\n    unsigned int c, i = 0;\n\n    for (target = array; target; target++, i++) {\n        c = 0;\n        left = str;\n        right *target;\n        while (*left && *right && *left++ == *right) {\n            c++;\n        }\n        if (c &gt; 0 && !*right) {\n            if (match) {\n                match-&gt;index = i;\n                match-&gt;chars_matched = c;\n                match-&gt;str = target[i];\n            }\n            return i;\n        }\n    }\n\n    return -1;\n}\n\n\n\nAnother type of code pattern that the string table attempts to replace is anything that does a lot of if/else if/else if-type string comparisons to look for keywords. For example, in the Quake III source, there’s some symbol/string processing logic that looks like this:\n// call instructions reset currentArgOffset\nif ( !strncmp( token, \"CALL\", 4 ) ) {\n    EmitByte( &segment[CODESEG], OP_CALL );\n    instructionCount++;\n    currentArgOffset = 0;\n    return;\n}\n\n// arg is converted to a reversed store\nif ( !strncmp( token, \"ARG\", 3 ) ) {\n    EmitByte( &segment[CODESEG], OP_ARG );\n    instructionCount++;\n    if ( 8 + currentArgOffset &gt;= 256 ) {\n        CodeError( \"currentArgOffset &gt;= 256\" );\n        return;\n    }\n    EmitByte( &segment[CODESEG], 8 + currentArgOffset );\n    currentArgOffset += 4;\n    return;\n}\n\n// ret just leaves something on the op stack\nif ( !strncmp( token, \"RET\", 3 ) ) {\n    EmitByte( &segment[CODESEG], OP_LEAVE );\n    instructionCount++;\n    EmitInt( &segment[CODESEG], 8 + currentLocals + currentArgs );\n    return;\n}\n\n// pop is needed to discard the return value of\n// a function\nif ( !strncmp( token, \"pop\", 3 ) ) {\n    EmitByte( &segment[CODESEG], OP_POP );\n    instructionCount++;\n    return;\n}\n...\nAn example of using the string table approach for this problem is discussed in the Other Applications section."
  },
  {
    "objectID": "articles/is-prefix-of-string-in-table/index.html#the-proposed-interface",
    "href": "articles/is-prefix-of-string-in-table/index.html#the-proposed-interface",
    "title": "Is Prefix Of String In Table?",
    "section": "The Proposed Interface",
    "text": "The Proposed Interface\nLet’s take a look at the interface we’re proposing, the IsPrefixOfStringInTable function, that this article is based upon:\n\nThe IsPrefixOfStringInTable Function\n//\n// Our string table index is simply a char, with -1 indicating no match found.\n//\n\ntypedef CHAR STRING_TABLE_INDEX;\n#define NO_MATCH_FOUND -1\n\ntypedef\nSTRING_TABLE_INDEX\n(IS_PREFIX_OF_STRING_IN_TABLE)(\n    _In_ PSTRING_TABLE StringTable,\n    _In_ PSTRING String,\n    _Out_opt_ PSTRING_MATCH StringMatch\n    );\ntypedef IS_PREFIX_OF_STRING_IN_TABLE *PIS_PREFIX_OF_STRING_IN_TABLE;\n\nIS_PREFIX_OF_STRING_IN_TABLE IsPrefixOfStringInTable;\n\n_Use_decl_annotations_\nSTRING_TABLE_INDEX\nIsPrefixOfStringInTable(\n    PSTRING_TABLE StringTable,\n    PSTRING String,\n    PSTRING_MATCH Match\n    )\n/*++\n\nRoutine Description:\n\n    Searches a string table to see if any strings \"prefix match\" the given\n    search string.  That is, whether any string in the table \"starts with\n    or is equal to\" the search string.\n\nArguments:\n\n    StringTable - Supplies a pointer to a STRING_TABLE struct.\n\n    String - Supplies a pointer to a STRING struct that contains the string to\n        search for.\n\n    Match - Optionally supplies a pointer to a variable that contains the\n        address of a STRING_MATCH structure.  This will be populated with\n        additional details about the match if a non-NULL pointer is supplied.\n\nReturn Value:\n\n    Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n\n--*/\nAll implementations discussed in this article adhere to that function signature. The STRING_TABLE structure will be discussed shortly.\n\n\nThe STRING_MATCH Structure\nThe STRING_MATCH structure is used to optionally communicate information about the prefix match back to the caller. The index and characters matched fields are often very useful when using the string table for text parsing; see the other applications section below for an example.\nThe structure is defined as follows:\n//\n// This structure is used to communicate matches back to the caller.\n//\n\ntypedef struct _STRING_MATCH {\n\n    //\n    // Index of the match.\n    //\n\n    BYTE Index;\n\n    //\n    // Number of characters matched.\n    //\n\n    BYTE NumberOfMatchedCharacters;\n\n    //\n    // Pad out to 8-bytes.\n    //\n\n    USHORT Padding[3];\n\n    //\n    // Pointer to the string that was matched.  The underlying buffer will\n    // stay valid for as long as the STRING_TABLE struct persists.\n    //\n\n    PSTRING String;\n\n} STRING_MATCH, *PSTRING_MATCH, **PPSTRING_MATCH;\nC_ASSERT(sizeof(STRING_MATCH) == 16);"
  },
  {
    "objectID": "articles/is-prefix-of-string-in-table/index.html#the-test-data",
    "href": "articles/is-prefix-of-string-in-table/index.html#the-test-data",
    "title": "Is Prefix Of String In Table?",
    "section": "The Test Data",
    "text": "The Test Data\nInstead of using some arbitrary Python module names, this article is going to focus on a string table constructed out of a set of 16 strings that represent reserved names of the NTFS file system, at least when it was first released way back in the early 90s.\nThis list is desirable as it has good distribution of characters, there is a good mix of both short and long entries, plus one oversized one ($INDEX_ALLOCATION, which clocks in at 17 characters), and almost all strings lead with a common character (the dollar sign), preventing a simple first character optimization used by the initial version of the StringTable component I wrote in 2016.\nSo the scenario we’ll be emulating, in this case, is that we’ve just been passed a filename for creation, and we need to check if it prefix matches any of the reserved names.\nHere’s the full list of NTFS names we’ll be using. We’re assuming 8-bit ASCII encoding (no UTF-8) and case sensitive. (If this were actually the NT kernel, we’d need to use wide characters with UTF-16 encoding, and be case-insensitive.)\n\nNTFS Reserved Names\n\n$AttrDef\n$BadClus\n$Bitmap\n$Boot\n$Extend\n$LogFile\n$MftMirr\n$Mft\n$Secure\n$UpCase\n$Volume\n$Cairo\n$INDEX_ALLOCATION\n$DATA\n????\n.\n\nThe ordering is important in certain cases. For example, when you have overlapping strings, such as $MftMirr and $Mft, you should put the longest strings first. They will be matched first, and as our routine terminates upon the first successful prefix match—if a longer string resided after a shorter one, it would never get detected.\nLet’s review some guiding design requirements and cover some of the design decisions I made, which should help shape your understanding of the implementation."
  },
  {
    "objectID": "articles/is-prefix-of-string-in-table/index.html#string_table",
    "href": "articles/is-prefix-of-string-in-table/index.html#string_table",
    "title": "Is Prefix Of String In Table?",
    "section": "STRING_TABLE",
    "text": "STRING_TABLE\nLet’s review the STRING_TABLE view on GitHub structure first and then touch on the supporting structures.\n\nC (Cutler Normal Form)C (Kernel Normal Form)MASM\n\n\n//\n// The STRING_TABLE struct is an optimized structure for testing whether a\n// prefix entry for a string is in a table, with the expectation that the\n// strings being compared will be relatively short (ideally &lt;= 16 characters),\n// and the table of string prefixes to compare to will be relatively small\n// (ideally &lt;= 16 strings).\n//\n// The overall goal is to be able to prefix match a string with the lowest\n// possible (amortized) latency.  Fixed-size, memory-aligned character arrays,\n// and SIMD instructions are used to try and achieve this.\n//\n\ntypedef struct _STRING_TABLE {\n\n    //\n    // A slot where each individual element contains a uniquely-identifying\n    // letter, with respect to the other strings in the table, of each string\n    // in an occupied slot.\n    //\n\n    STRING_SLOT UniqueChars;\n\n    //\n    // (16 bytes consumed.)\n    //\n\n    //\n    // For each unique character identified above, the following structure\n    // captures the 0-based index of that character in the underlying string.\n    // This is used as an input to vpshufb to rearrange the search string's\n    // characters such that it can be vpcmpeqb'd against the unique characters\n    // above.\n    //\n\n    SLOT_INDEX UniqueIndex;\n\n    //\n    // (32 bytes consumed.)\n    //\n\n    //\n    // Length of the underlying string in each slot.\n    //\n\n    SLOT_LENGTHS Lengths;\n\n    //\n    // (48 bytes consumed, aligned at 16 bytes.)\n    //\n\n    //\n    // Pointer to the STRING_ARRAY associated with this table, which we own\n    // (we create it and copy the caller's contents at creation time and\n    // deallocate it when we get destroyed).\n    //\n    // N.B.  We use pStringArray here instead of StringArray because the\n    //       latter is a field name at the end of the struct.\n    //\n    //\n\n    PSTRING_ARRAY pStringArray;\n\n    //\n    // (56 bytes consumed, aligned at 8 bytes.)\n    //\n\n    //\n    // String table flags.\n    //\n\n    STRING_TABLE_FLAGS Flags;\n\n    //\n    // (60 bytes consumed, aligned at 4 bytes.)\n    //\n\n    //\n    // A 16-bit bitmap indicating which slots are occupied.\n    //\n\n    USHORT OccupiedBitmap;\n\n    //\n    // A 16-bit bitmap indicating which slots have strings longer than 16 chars.\n    //\n\n    USHORT ContinuationBitmap;\n\n    //\n    // (64 bytes consumed, aligned at 64 bytes.)\n    //\n\n    //\n    // The 16-element array of STRING_SLOT structs.  We want this to be aligned\n    // on a 64-byte boundary, and it consumes 256-bytes of memory.\n    //\n\n    STRING_SLOT Slots[16];\n\n    //\n    // (320 bytes consumed, aligned at 64 bytes.)\n    //\n\n    //\n    // We want the structure size to be a power of 2 such that an even number\n    // can fit into a 4KB page (and reducing the likelihood of crossing page\n    // boundaries, which complicates SIMD boundary handling), so we have an\n    // extra 192-bytes to play with here.  The CopyStringArray() routine is\n    // special-cased to allocate the backing STRING_ARRAY structure plus the\n    // accommodating buffers in this space if it can fit.\n    //\n    // (You can test whether or not this occurred by checking the invariant\n    //  `StringTable-&gt;pStringArray == &StringTable-&gt;StringArray`, if this\n    //  is true, the array was allocated within this remaining padding space.)\n    //\n\n    union {\n        STRING_ARRAY StringArray;\n        CHAR Padding[192];\n    };\n\n} STRING_TABLE, *PSTRING_TABLE, **PPSTRING_TABLE;\n\n//\n// Assert critical size and alignment invariants at compile time.\n//\n\nC_ASSERT(FIELD_OFFSET(STRING_TABLE, UniqueIndex) == 16);\nC_ASSERT(FIELD_OFFSET(STRING_TABLE, Lengths) == 32);\nC_ASSERT(FIELD_OFFSET(STRING_TABLE, pStringArray) == 48);\nC_ASSERT(FIELD_OFFSET(STRING_TABLE, Slots)   == 64);\nC_ASSERT(FIELD_OFFSET(STRING_TABLE, Padding) == 320);\nC_ASSERT(sizeof(STRING_TABLE) == 512);\n\n\nstruct string_table {\n    char                       unique_chars[16];\n    unsigned char              unique_index[16];\n    unsigned char              slot_lengths[16];\n    struct string_array       *string_array_ptr;\n    struct string_table_flags  flags;\n    unsigned short             occupied_bitmap;\n    unsigned short             continuation_bitmap;\n    char                       slots[16][16];\n    union {\n        struct string_array    string_array;\n        char                   padding[184];\n    } u;\n};\n\n\nSTRING_TABLE struct\n    UniqueChars         CHAR 16 dup  (?)\n    UniqueIndex         BYTE 16 dup  (?)\n    Lengths             BYTE 16 dup  (?)\n    pStringArray        PSTRING_ARRAY ?\n    Flags               ULONG         ?\n    OccupiedBitmap      USHORT        ?\n    ContinuationBitmap  USHORT        ?\n    Slots               STRING_SLOT 16 dup ({ })\n    union\n        StringArray STRING_ARRAY {?}\n        Padding CHAR 192 dup (?)\n    ends\nSTRING_TABLE ends\n\n;\n; Assert our critical field offsets and structure size as per the same approach\n; taken in StringTable.h.\n;\n\n.erre (STRING_TABLE.UniqueIndex  eq  16), @CatStr(&lt;UnexpectedOffset STRING_TABLE.UniqueIndex: &gt;, %(STRING_TABLE.UniqueIndex))\n.erre (STRING_TABLE.Lengths      eq  32), @CatStr(&lt;UnexpectedOffset STRING_TABLE.Lengths: &gt;, %(STRING_TABLE.Lengths))\n.erre (STRING_TABLE.pStringArray eq  48), @CatStr(&lt;UnexpectedOffset STRING_TABLE.pStringArray: &gt;, %(STRING_TABLE.pStringArray))\n.erre (STRING_TABLE.Slots        eq  64), @CatStr(&lt;UnexpectedOffset STRING_TABLE.Slots: &gt;, %(STRING_TABLE.Slots))\n.erre (STRING_TABLE.Padding      eq 320), @CatStr(&lt;UnexpectedOffset STRING_TABLE.Padding: &gt;, %(STRING_TABLE.Padding))\n.erre (size STRING_TABLE eq 512), @CatStr(&lt;IncorrectStructSize: STRING_TABLE: &gt;, %(size STRING_TABLE))\n\nPSTRING_TABLE typedef ptr STRING_TABLE\n\n;\n; CamelCase typedefs that are nicer to work with in assembly\n; than their uppercase counterparts.\n;\n\nStringTable typedef STRING_TABLE\n\n\n\nThe following diagram depicts an in-memory representation of the STRING_TABLE structure using our NTFS reserved prefix names. It is created via the CreateStringTable routine, which we feature in the appendix of this article.\n\n\n\nSTRING_TABLE Diagram\n\n\nIn order to improve the uniqueness of the unique characters selected from each string, the strings are sorted by length during string table creation and enumerated in this order while identifying unique characters. The rationale behind this is that shorter strings simply have fewer characters to choose from, while longer strings have more to choose from. If we identified unique characters in the order they appear in the string table, we may have longer strings preceding shorter ones, such that toward the end of the table, nothing unique can be extracted from the short ones.\nThe utility of the string table is maximized by ensuring a unique character is selected from every string; thus, we sort by length first. Note that the uniqueness is actually determined by offset:character pairs, with the offsets becoming the indices stored in the UniqueIndex slot. If you trace through the diagram above, you’ll see that the unique character in each slot matches the character in the corresponding string slot, indicated by the underlying index."
  },
  {
    "objectID": "articles/is-prefix-of-string-in-table/index.html#string_array",
    "href": "articles/is-prefix-of-string-in-table/index.html#string_array",
    "title": "Is Prefix Of String In Table?",
    "section": "STRING_ARRAY",
    "text": "STRING_ARRAY\nThe string array captures a raw array representation of the underlying strings making up the string table. It is either embedded within the padding area at the end of the string table, or a separate allocation is made during string table creation. The main interface to creating a string table is via a STRING_ARRAY structure. The helper functions, CreateStringTableFromDelimitedString and CreateStringTableFromDelimitedEnvironmentVariable, simply break down their input into a STRING_ARRAY representation first before calling CreateStringTable.\ntypedef struct _Struct_size_bytes_(SizeInQuadwords&gt;&gt;3) _STRING_ARRAY {\n\n    //\n    // Size of the structure, in quadwords.  Why quadwords?  It allows us to\n    // keep this size field to a USHORT, which helps with the rest of the\n    // alignment in this struct (we want the STRING Strings[] array to start\n    // on an 8-byte boundary).\n    //\n    // N.B.  We can't express the exact field size in the SAL annotation\n    //       below, because the array of buffer sizes are inexpressible;\n    //       however, we know the maximum length, so we can use the implicit\n    //       invariant that the total buffer size can't exceed whatever num\n    //       elements * max size is.\n    //\n\n    _Field_range_(&lt;=, (\n        sizeof(struct _STRING_ARRAY) +\n        ((NumberOfElements - 1) * sizeof(STRING)) +\n        (MaximumLength * NumberOfElements)\n    ) &gt;&gt; 3)\n    USHORT SizeInQuadwords;\n\n    //\n    // Number of elements in the array.\n    //\n\n    USHORT NumberOfElements;\n\n    //\n    // Minimum and maximum lengths for the String-&gt;Length fields.  Optional.\n    //\n\n    USHORT MinimumLength;\n    USHORT MaximumLength;\n\n    //\n    // A pointer to the STRING_TABLE structure that \"owns\" us.\n    //\n\n    struct _STRING_TABLE *StringTable;\n\n    //\n    // The string array.  Number of elements in the array is governed by the\n    // NumberOfElements field above.\n    //\n\n    STRING Strings[ANYSIZE_ARRAY];\n\n} STRING_ARRAY, *PSTRING_ARRAY, **PPSTRING_ARRAY;\n\n\n\n\n\n\nNote\n\n\n\nThe odd-looking macros _Struct_size_bytes_ and _Field_range_ are SAL Annotations. There’s a neat deck called Engineering Better Software at Microsoft which captures some interesting details about SAL, for those wanting to read more. The Code Analysis engine that uses the annotations is built upon the Z3 Theorem Prover, which is a fascinating little project in its own right.\n\n\nAnd finally, we’re left with the smaller helper structs that we use to encapsulate the various innards of the string table. (I use unions that feature XMMWORD representations (which is a typedef of __m128i, representing an XMM register) as well as underlying byte/character representations, as I personally find it makes the resulting C code a bit nicer.)"
  },
  {
    "objectID": "articles/is-prefix-of-string-in-table/index.html#string_slot",
    "href": "articles/is-prefix-of-string-in-table/index.html#string_slot",
    "title": "Is Prefix Of String In Table?",
    "section": "STRING_SLOT",
    "text": "STRING_SLOT\n//\n// String tables are composed of a 16 element array of 16 byte string \"slots\",\n// which represent a unique character (with respect to other strings in the\n// table) for a string in a given slot index. The STRING_SLOT structure\n// provides a convenient wrapper around this construct.\n//\n\ntypedef union DECLSPEC_ALIGN(16) _STRING_SLOT {\n    XMMWORD CharsXmm;\n    CHAR Char[16];\n} STRING_SLOT, *PSTRING_SLOT, **PPSTRING_SLOT;\nC_ASSERT(sizeof(STRING_SLOT) == 16);"
  },
  {
    "objectID": "articles/is-prefix-of-string-in-table/index.html#slot_index",
    "href": "articles/is-prefix-of-string-in-table/index.html#slot_index",
    "title": "Is Prefix Of String In Table?",
    "section": "SLOT_INDEX",
    "text": "SLOT_INDEX\n//\n// A 16 element array of 1 byte unsigned integers, used to capture the length\n// of each string slot in a single XMM 128-bit register.\n//\n\ntypedef union DECLSPEC_ALIGN(16) _SLOT_LENGTHS {\n    XMMWORD SlotsXmm;\n    BYTE Slots[16];\n} SLOT_LENGTHS, *PSLOT_LENGTHS, **PPSLOT_LENGTHS;\nC_ASSERT(sizeof(SLOT_LENGTHS) == 16);"
  },
  {
    "objectID": "articles/is-prefix-of-string-in-table/index.html#createstringtable",
    "href": "articles/is-prefix-of-string-in-table/index.html#createstringtable",
    "title": "Is Prefix Of String In Table?",
    "section": "String Table Construction",
    "text": "String Table Construction\nThe CreateSingleStringTable routine is responsible for the construction of a new STRING_TABLE. It is here that we identify the unique set of characters (and their indices) to store in the first two fields of the string table.\n//\n// Define private types used by this module.\n//\n\ntypedef struct _LENGTH_INDEX_ENTRY {\n    BYTE Length;\n    BYTE Index;\n} LENGTH_INDEX_ENTRY;\ntypedef LENGTH_INDEX_ENTRY *PLENGTH_INDEX_ENTRY;\n\ntypedef struct _LENGTH_INDEX_TABLE {\n    LENGTH_INDEX_ENTRY Entry[16];\n} LENGTH_INDEX_TABLE;\ntypedef LENGTH_INDEX_TABLE *PLENGTH_INDEX_TABLE;\n\ntypedef union DECLSPEC_ALIGN(32) _CHARACTER_BITMAP {\n    YMMWORD Ymm;\n    XMMWORD Xmm[2];\n    LONG Bits[(256 / (4 &lt;&lt; 3))];  // 8\n} CHARACTER_BITMAP;\nC_ASSERT(sizeof(CHARACTER_BITMAP) == 32);\ntypedef CHARACTER_BITMAP *PCHARACTER_BITMAP;\n\ntypedef struct _SLOT_BITMAPS {\n    CHARACTER_BITMAP Bitmap[16];\n} SLOT_BITMAPS;\ntypedef SLOT_BITMAPS *PSLOT_BITMAPS;\n\n//\n// Function implementation.\n//\n\n_Use_decl_annotations_\nPSTRING_TABLE\nCreateSingleStringTable(\n    PRTL Rtl,\n    PALLOCATOR StringTableAllocator,\n    PALLOCATOR StringArrayAllocator,\n    PSTRING_ARRAY StringArray,\n    BOOL CopyArray\n    )\n/*++\n\nRoutine Description:\n\n    Allocates space for a STRING_TABLE structure using the provided allocators,\n    then initializes it using the provided STRING_ARRAY.  If CopyArray is set\n    to TRUE, the routine will copy the string array such that the caller is\n    free to destroy it after the table has been successfully created.  If it\n    is set to FALSE and StringArray-&gt;StringTable has a non-NULL value, it is\n    assumed that sufficient space has already been allocated for the string\n    table and this pointer will be used to initialize the rest of the structure.\n\n    DestroyStringTable() must be called against the returned PSTRING_TABLE when\n    the structure is no longer needed in order to ensure resources are released.\n\nArguments:\n\n    Rtl - Supplies a pointer to an initialized RTL structure.\n\n    StringTableAllocator - Supplies a pointer to an ALLOCATOR structure which\n        will be used for creating the STRING_TABLE.\n\n    StringArrayAllocator - Supplies a pointer to an ALLOCATOR structure which\n        may be used to create the STRING_ARRAY if it cannot fit within the\n        padding of the STRING_TABLE structure.  This is kept separate from the\n        StringTableAllocator due to the stringent alignment requirements of the\n        string table.\n\n    StringArray - Supplies a pointer to an initialized STRING_ARRAY structure\n        that contains the STRING structures that are to be added to the table.\n\n    CopyArray - Supplies a boolean value indicating whether or not the\n        StringArray structure should be deep-copied during creation.  This is\n        typically set when the caller wants to be able to free the structure\n        as soon as this call returns (or can't guarantee it will persist past\n        this function's invocation, i.e. if it was stack allocated).\n\nReturn Value:\n\n    A pointer to a valid PSTRING_TABLE structure on success, NULL on failure.\n    Call DestroyStringTable() on the returned structure when it is no longer\n    needed in order to ensure resources are cleaned up appropriately.\n\n--*/\n{\n    BYTE Byte;\n    BYTE Count;\n    BYTE Index;\n    BYTE Length;\n    BYTE NumberOfElements;\n    ULONG HighestBit;\n    ULONG OccupiedMask;\n    PULONG Bits;\n    USHORT OccupiedBitmap;\n    USHORT ContinuationBitmap;\n    PSTRING_TABLE StringTable;\n    PSTRING_ARRAY StringArray;\n    PSTRING String;\n    PSTRING_SLOT Slot;\n    STRING_SLOT UniqueChars;\n    SLOT_INDEX UniqueIndex;\n    SLOT_INDEX LengthIndex;\n    SLOT_LENGTHS Lengths;\n    LENGTH_INDEX_TABLE LengthIndexTable;\n    PCHARACTER_BITMAP Bitmap;\n    SLOT_BITMAPS SlotBitmaps;\n    PLENGTH_INDEX_ENTRY Entry;\n\n    //\n    // Validate arguments.\n    //\n\n    if (!ARGUMENT_PRESENT(StringTableAllocator)) {\n        return NULL;\n    }\n\n    if (!ARGUMENT_PRESENT(StringArrayAllocator)) {\n        return NULL;\n    }\n\n    if (!ARGUMENT_PRESENT(SourceStringArray)) {\n        return NULL;\n    }\n\n    if (SourceStringArray-&gt;NumberOfElements == 0) {\n        return NULL;\n    }\n\n    //\n    // Copy the incoming string array if applicable.\n    //\n\n    if (CopyArray) {\n\n        StringArray = CopyStringArray(\n            StringTableAllocator,\n            StringArrayAllocator,\n            SourceStringArray,\n            FIELD_OFFSET(STRING_TABLE, StringArray),\n            sizeof(STRING_TABLE),\n            &StringTable\n        );\n\n        if (!StringArray) {\n            return NULL;\n        }\n\n    } else {\n\n        //\n        // We're not copying the array, so initialize StringArray to point at\n        // the caller's SourceStringArray, and StringTable to point at the\n        // array's StringTable field (which will be non-NULL if sufficient\n        // space has been allocated).\n        //\n\n        StringArray = SourceStringArray;\n        StringTable = StringArray-&gt;StringTable;\n\n    }\n\n    //\n    // If StringTable has no value, we've either been called with CopyArray set\n    // to FALSE, or CopyStringArray() wasn't able to allocate sufficient space\n    // for both the table and itself.  Either way, we need to allocate space for\n    // the table.\n    //\n\n    if (!StringTable) {\n\n        StringTable = (PSTRING_TABLE)(\n            StringTableAllocator-&gt;AlignedCalloc(\n                StringTableAllocator-&gt;Context,\n                1,\n                sizeof(STRING_TABLE),\n                STRING_TABLE_ALIGNMENT\n            )\n        );\n\n        if (!StringTable) {\n            return NULL;\n        }\n    }\n\n    //\n    // Make sure the fields that are sensitive to alignment are, in fact,\n    // aligned correctly.\n    //\n\n    if (!AssertStringTableFieldAlignment(StringTable)) {\n        DestroyStringTable(StringTableAllocator,\n                           StringArrayAllocator,\n                           StringTable);\n        return NULL;\n    }\n\n    //\n    // At this point, we have copied the incoming StringArray if necessary,\n    // and we've allocated sufficient space for the StringTable structure.\n    // Enumerate over all of the strings, set the continuation bit if the\n    // length &gt; 16, set the relevant slot length, set the relevant unique\n    // character entry, then move the first 16-bytes of the string into the\n    // relevant slot via an aligned SSE mov.\n    //\n\n    //\n    // Initialize pointers and counters, clear stack-based structures.\n    //\n\n    Slot = StringTable-&gt;Slots;\n    String = StringArray-&gt;Strings;\n\n    OccupiedBitmap = 0;\n    ContinuationBitmap = 0;\n    NumberOfElements = (BYTE)StringArray-&gt;NumberOfElements;\n    UniqueChars.CharsXmm = _mm_setzero_si128();\n    UniqueIndex.IndexXmm = _mm_setzero_si128();\n    LengthIndex.IndexXmm = _mm_setzero_si128();\n\n    //\n    // Set all the slot lengths to 0x7f up front instead of defaulting\n    // to zero.  This allows for simpler logic when searching for a prefix\n    // string, which involves broadcasting a search string's length to an XMM\n    // register, then doing _mm_cmpgt_epi8() against the lengths array and\n    // the string length.  If we left the lengths as 0 for unused slots, they\n    // would get included in the resulting comparison register (i.e. the high\n    // bits would be set to 1), so we'd have to do a subsequent masking of\n    // the result at some point using the OccupiedBitmap.  By defaulting the\n    // lengths to 0x7f, we ensure they'll never get included in any cmpgt-type\n    // SIMD matches.  (We use 0x7f instead of 0xff because the _mm_cmpgt_epi8()\n    // intrinsic assumes packed signed integers.)\n    //\n\n    Lengths.SlotsXmm = _mm_set1_epi8(0x7f);\n\n    ZeroStruct(LengthIndexTable);\n    ZeroStruct(SlotBitmaps);\n\n    for (Count = 0; Count &lt; NumberOfElements; Count++) {\n\n        XMMWORD CharsXmm;\n\n        //\n        // Set the string length for the slot.\n        //\n\n        Length = Lengths.Slots[Count] = (BYTE)String-&gt;Length;\n\n        //\n        // Set the appropriate bit in the continuation bitmap if the string is\n        // longer than 16 bytes.\n        //\n\n        if (Length &gt; 16) {\n            ContinuationBitmap |= (Count == 0 ? 1 : 1 &lt;&lt; (Count + 1));\n        }\n\n        if (Count == 0) {\n\n            Entry = &LengthIndexTable.Entry[0];\n            Entry-&gt;Index = 0;\n            Entry-&gt;Length = Length;\n\n        } else {\n\n            //\n            // Perform a linear scan of the length-index table in order to\n            // identify an appropriate insertion point.\n            //\n\n            for (Index = 0; Index &lt; Count; Index++) {\n                if (Length &lt; LengthIndexTable.Entry[Index].Length) {\n                    break;\n                }\n            }\n\n            if (Index != Count) {\n\n                //\n                // New entry doesn't go at the end of the table, so shuffle\n                // everything else down.\n                //\n\n                Rtl-&gt;RtlMoveMemory(&LengthIndexTable.Entry[Index + 1],\n                                   &LengthIndexTable.Entry[Index],\n                                   (Count - Index) * sizeof(*Entry));\n            }\n\n            Entry = &LengthIndexTable.Entry[Index];\n            Entry-&gt;Index = Count;\n            Entry-&gt;Length = Length;\n        }\n\n        //\n        // Copy the first 16-bytes of the string into the relevant slot.  We\n        // have taken care to ensure everything is 16-byte aligned by this\n        // stage, so we can use SSE intrinsics here.\n        //\n\n        CharsXmm = _mm_load_si128((PXMMWORD)String-&gt;Buffer);\n        _mm_store_si128(&(*Slot).CharsXmm, CharsXmm);\n\n        //\n        // Advance our pointers.\n        //\n\n        ++Slot;\n        ++String;\n\n    }\n\n    //\n    // Store the slot lengths.\n    //\n\n    _mm_store_si128(&(StringTable-&gt;Lengths.SlotsXmm), Lengths.SlotsXmm);\n\n    //\n    // Loop through the strings in order of shortest to longest and construct\n    // the uniquely-identifying character table with corresponding index.\n    //\n\n\n    for (Count = 0; Count &lt; NumberOfElements; Count++) {\n        Entry = &LengthIndexTable.Entry[Count];\n        Length = Entry-&gt;Length;\n        Slot = &StringTable-&gt;Slots[Entry-&gt;Index];\n\n        //\n        // Iterate over each character in the slot and find the first one\n        // without a corresponding bit set.\n        //\n\n        for (Index = 0; Index &lt; Length; Index++) {\n            Bitmap = &SlotBitmaps.Bitmap[Index];\n            Bits = (PULONG)&Bitmap-&gt;Bits[0];\n            Byte = Slot-&gt;Char[Index];\n            if (!BitTestAndSet(Bits, Byte)) {\n                break;\n            }\n        }\n\n        UniqueChars.Char[Count] = Byte;\n        UniqueIndex.Index[Count] = Index;\n        LengthIndex.Index[Count] = Entry-&gt;Index;\n    }\n\n    //\n    // Loop through the elements again such that the unique chars are stored\n    // in the order they appear in the table.\n    //\n\n    for (Count = 0; Count &lt; NumberOfElements; Count++) {\n        for (Index = 0; Index &lt; NumberOfElements; Index++) {\n            if (LengthIndex.Index[Index] == Count) {\n                StringTable-&gt;UniqueChars.Char[Count] = UniqueChars.Char[Index];\n                StringTable-&gt;UniqueIndex.Index[Count] = UniqueIndex.Index[Index];\n                break;\n            }\n        }\n    }\n\n    //\n    // Generate and store the occupied bitmap.  Each bit, from low to high,\n    // corresponds to the index of a slot.  When set, the slot is occupied.\n    // When clear, it is not.  So, fill bits from the highest bit set down.\n    //\n\n    HighestBit = (1 &lt;&lt; (StringArray-&gt;NumberOfElements-1));\n    OccupiedMask = _blsmsk_u32(HighestBit);\n    StringTable-&gt;OccupiedBitmap = (USHORT)OccupiedMask;\n\n    //\n    // Store the continuation bitmap.\n    //\n\n    StringTable-&gt;ContinuationBitmap = (USHORT)(ContinuationBitmap);\n\n    //\n    // Wire up the string array to the table.\n    //\n\n    StringTable-&gt;pStringArray = StringArray;\n\n    //\n    // And we're done, return the table.\n    //\n\n    return StringTable;\n}"
  },
  {
    "objectID": "articles/is-prefix-of-string-in-table/index.html#release-vs-pgo-oddities",
    "href": "articles/is-prefix-of-string-in-table/index.html#release-vs-pgo-oddities",
    "title": "Is Prefix Of String In Table?",
    "section": "Release vs PGO Oddities",
    "text": "Release vs PGO Oddities\nAll of the times in the graphs come from the profile-guided optimization (PGO) build of the StringTable component. The PGO build is faster than the normal release build in every case except one, where it is notably slower.\nIt’s… odd. I haven’t investigated it. The following graph depicts the affected function, IsPrefixOfStringInTable_1, and a few other versions for reference, showing the performance of the PGO build compared to the release build on the input strings \"$INDEX_ALLOCATION\" and \"$Bai123456789012\".\n\n\n\nBenchmark Release vs PGO\n\n\nOnly that function is affected, and the problem mainly manifests with the two example test strings shown. As this routine essentially serves as one of the initial baseline implementations, it would be misleading to compare all optimized PGO versions to the abnormally slow baseline implementation. Therefore, the release and PGO timings were blended into a single CSV, and the Excel PivotTables select the minimum time for a given function and test input.\nThus, you’re always looking at the PGO timings, except for this outlier case where the release versions are faster."
  },
  {
    "objectID": "articles/is-prefix-of-string-in-table/index.html#round1",
    "href": "articles/is-prefix-of-string-in-table/index.html#round1",
    "title": "Is Prefix Of String In Table?",
    "section": "Round 1",
    "text": "Round 1\nIn this section, we’ll take a look at the various implementations I experimented with on the first pass, prior to soliciting any feedback. I figured there were a couple of ways I could present this information. First, I could hand-pick what I choose to show and hide, creating a rosy picture that makes it seem like I effortlessly arrived at the fastest implementation without much actual effort whatsoever.\nOr I could show the gritty reality of how everything actually went down in chronological fashion, errors and all. And there were definitely some errors! For better or worse, I’ve chosen this route, so you’ll get to see some pretty tedious tweaks (changing a single line, for example) before the juicy stuff really kicks in.\nAdditionally, with the benefit of writing this section introduction retroactively, iterations 4 and 5 aren’t testing what I initially thought they were testing. I’ve left them in as is; if anything, it demonstrates the importance of only changing one thing at a time and making sure you’re testing what you think you’re testing. I’ll discuss the errors with those iterations later in the article.\n\nC Implementations\n\nIsPrefixOfCStrInArray\nIsPrefixOfStringInTable_1 →\nLet’s review the baseline implementation again, as that’s what we’re ultimately comparing ourselves against. This version enumerates the string array (and thus has a slightly different function signature than the STRING_TABLE-based functions) looking for prefix matches. No SIMD instructions are used. The timings captured should be proportional to the location of the test input string in the array. That is, it should take less time to prefix match strings that occur earlier in the array versus those that appear later.\n_Use_decl_annotations_\nSTRING_TABLE_INDEX\nIsPrefixOfCStrInArray(\n    PCSZ *StringArray,\n    PCSZ String,\n    PSTRING_MATCH Match\n    )\n{\n    PCSZ Left;\n    PCSZ Right;\n    PCSZ *Target;\n    ULONG Index = 0;\n    ULONG Count;\n\n    for (Target = StringArray; *Target != NULL; Target++, Index++) {\n        Count = 0;\n        Left = String;\n        Right = *Target;\n\n        while (*Left && *Right && *Left++ == *Right++) {\n            Count++;\n        }\n\n        if (Count &gt; 0 && !*Right) {\n            if (ARGUMENT_PRESENT(Match)) {\n                Match-&gt;Index = (BYTE)Index;\n                Match-&gt;NumberOfMatchedCharacters = (BYTE)Count;\n                Match-&gt;String = NULL;\n            }\n            return (STRING_TABLE_INDEX)Index;\n        }\n    }\n\n    return NO_MATCH_FOUND;\n}\n\n\nIsPrefixOfStringInTable_1\n← IsPrefixOfCStrInArray | IsPrefixOfStringInTable_2 →\nThis version is similar to the IsPrefixOfCStrInArray implementation, except it utilizes the slot length information provided by the STRING_ARRAY structure and conforms to our standard IsPrefixOfStringInTable function signature. It uses no SIMD instructions.\n_Use_decl_annotations_\nSTRING_TABLE_INDEX\nIsPrefixOfStringInTable_1(\n    PSTRING_TABLE StringTable,\n    PSTRING String,\n    PSTRING_MATCH Match\n    )\n/*++\n\nRoutine Description:\n\n    Searches a string table to see if any strings \"prefix match\" the given\n    search string.  That is, whether any string in the table \"starts with\n    or is equal to\" the search string.\n\n    This routine performs a simple linear scan of the string table looking for\n    a prefix match against each slot.\n\nArguments:\n\n    StringTable - Supplies a pointer to a STRING_TABLE struct.\n\n    String - Supplies a pointer to a STRING struct that contains the string to\n        search for.\n\n    Match - Optionally supplies a pointer to a variable that contains the\n        address of a STRING_MATCH structure.  This will be populated with\n        additional details about the match if a non-NULL pointer is supplied.\n\nReturn Value:\n\n    Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n\n--*/\n{\n    BYTE Left;\n    BYTE Right;\n    ULONG Index;\n    ULONG Count;\n    PSTRING_ARRAY StringArray;\n    PSTRING TargetString;\n\n    //IACA_VC_START();\n\n    StringArray = StringTable-&gt;pStringArray;\n\n    if (StringArray-&gt;MinimumLength &gt; String-&gt;Length) {\n        return NO_MATCH_FOUND;\n    }\n\n    for (Count = 0; Count &lt; StringArray-&gt;NumberOfElements; Count++) {\n\n        TargetString = &StringArray-&gt;Strings[Count];\n\n        if (String-&gt;Length &lt; TargetString-&gt;Length) {\n            continue;\n        }\n\n        for (Index = 0; Index &lt; TargetString-&gt;Length; Index++) {\n            Left = String-&gt;Buffer[Index];\n            Right = TargetString-&gt;Buffer[Index];\n            if (Left != Right) {\n                break;\n            }\n        }\n\n        if (Index == TargetString-&gt;Length) {\n\n            if (ARGUMENT_PRESENT(Match)) {\n\n                Match-&gt;Index = (BYTE)Count;\n                Match-&gt;NumberOfMatchedCharacters = (BYTE)Index;\n                Match-&gt;String = TargetString;\n\n            }\n\n            return (STRING_TABLE_INDEX)Count;\n        }\n\n    }\n\n    //IACA_VC_END();\n\n    return NO_MATCH_FOUND;\n}\n\n\nBenchmark 1\nHere’s the performance of these two baseline routines:\n\n\n\nBenchmark 1\n\n\nThat’s an interesting result! Even without using any SIMD instructions, version 1, the IsPrefixOfStringInTable_1 routine, is faster (in all but one case) than the baseline IsPrefixOfCStrInArray routine, thanks to a more sophisticated data structure.\n(And really, it’s not even using the sophisticated parts of the STRING_TABLE; it’s just leveraging the fact that we’ve captured the lengths of each string in the backing STRING_ARRAY structure by virtue of using the STRING structure to wrap our strings (instead of relying on the standard NULL-terminated C string approach).)\n\nBefore we look at IsPrefixOfStringInTable_2, which is the first of the routines to use SIMD instructions, it’s helpfu to know some backstory. The _2 version is based on the prefix matching routine I wrote for the first version of the StringTable component back in 2016. The layout of the STRING_TABLE struct differed in the first version; only the first character of each slot was used to do the initial exclusion (as opposed to the unique character), and lengths were unsigned shorts instead of chars (16 bits instead of 8 bits), so the match bitmap had to be constructed slightly differently.\nNone of those details really apply to our second attempt at the StringTable component, detailed in this article. Our lengths are 8 bits, and we use unique characters in the initial negative match fast-path. However, the first version used an elaborate AVX2 prefix match routine geared toward matching long strings, attempting to use non-temporal streaming load instructions where possible (which would only make sense for a large number of long strings in specific cache-thrashing scenarios).\nCompare our simpler implementation, IsPrefixMatch, used from version 3 onward, to the far more elaborate (and unnecessary) IsPrefixMatchAvx2:\n\n\nIsPrefixMatch\nFORCEINLINE\nBYTE\nIsPrefixMatch(\n    _In_ PCSTRING SearchString,\n    _In_ PCSTRING TargetString,\n    _In_ BYTE Offset\n    )\n{\n    PBYTE Left;\n    PBYTE Right;\n    BYTE Matched = 0;\n    BYTE Remaining = (SearchString-&gt;Length - Offset) + 1;\n\n    Left = (PBYTE)RtlOffsetToPointer(SearchString-&gt;Buffer, Offset);\n    Right = (PBYTE)RtlOffsetToPointer(TargetString-&gt;Buffer, Offset);\n\n    while (--Remaining && *Left++ == *Right++) {\n        Matched++;\n    }\n\n    Matched += Offset;\n    if (Matched != TargetString-&gt;Length) {\n        return NO_MATCH_FOUND;\n    }\n\n    return Matched;\n}\n\n\nIsPrefixMatchAvx2\nThe AVX2 routine is overkill, especially considering the emphasis we put on favoring short strings over longer ones in the requirements section. However, we want to put broad statements like that to the test, so let’s include it as our first SIMD implementation to see how it stacks up against the simpler versions.\nFORCEINLINE\nUSHORT\nIsPrefixMatchAvx2(\n    _In_ PCSTRING SearchString,\n    _In_ PCSTRING TargetString,\n    _In_ USHORT Offset\n    )\n{\n    USHORT SearchStringRemaining;\n    USHORT TargetStringRemaining;\n    ULONGLONG SearchStringAlignment;\n    ULONGLONG TargetStringAlignment;\n    USHORT CharactersMatched = Offset;\n\n    LONG Count;\n    LONG Mask;\n\n    PCHAR SearchBuffer;\n    PCHAR TargetBuffer;\n\n    STRING_SLOT SearchSlot;\n\n    XMMWORD SearchXmm;\n    XMMWORD TargetXmm;\n    XMMWORD ResultXmm;\n\n    YMMWORD SearchYmm;\n    YMMWORD TargetYmm;\n    YMMWORD ResultYmm;\n\n    SearchStringRemaining = SearchString-&gt;Length - Offset;\n    TargetStringRemaining = TargetString-&gt;Length - Offset;\n\n    SearchBuffer = (PCHAR)RtlOffsetToPointer(SearchString-&gt;Buffer, Offset);\n    TargetBuffer = (PCHAR)RtlOffsetToPointer(TargetString-&gt;Buffer, Offset);\n\n    //\n    // This routine is only called in the final stage of a prefix match when\n    // we've already verified the slot's corresponding original string length\n    // (referred in this routine as the target string) is less than or equal\n    // to the length of the search string.\n    //\n    // We attempt as many 32-byte comparisons as we can, then as many 16-byte\n    // comparisons as we can, then a final &lt; 16-byte comparison if necessary.\n    //\n    // We use aligned loads if possible, falling back to unaligned if not.\n    //\n\nStartYmm:\n\n    if (SearchStringRemaining &gt;= 32 && TargetStringRemaining &gt;= 32) {\n\n        //\n        // We have at least 32 bytes to compare for each string.  Check the\n        // alignment for each buffer and do an aligned streaming load (non-\n        // temporal hint) if our alignment is at a 32-byte boundary or better;\n        // reverting to an unaligned load when not.\n        //\n\n        SearchStringAlignment = GetAddressAlignment(SearchBuffer);\n        TargetStringAlignment = GetAddressAlignment(TargetBuffer);\n\n        if (SearchStringAlignment &lt; 32) {\n            SearchYmm = _mm256_loadu_si256((PYMMWORD)SearchBuffer);\n        } else {\n            SearchYmm = _mm256_stream_load_si256((PYMMWORD)SearchBuffer);\n        }\n\n        if (TargetStringAlignment &lt; 32) {\n            TargetYmm = _mm256_loadu_si256((PYMMWORD)TargetBuffer);\n        } else {\n            TargetYmm = _mm256_stream_load_si256((PYMMWORD)TargetBuffer);\n        }\n\n        //\n        // Compare the two vectors.\n        //\n\n        ResultYmm = _mm256_cmpeq_epi8(SearchYmm, TargetYmm);\n\n        //\n        // Generate a mask from the result of the comparison.\n        //\n\n        Mask = _mm256_movemask_epi8(ResultYmm);\n\n        //\n        // There were at least 32 characters remaining in each string buffer,\n        // thus, every character needs to have matched in order for this search\n        // to continue.  If there were less than 32 characters, we can terminate\n        // this prefix search here.  (-1 == 0xffffffff == all bits set == all\n        // characters matched.)\n        //\n\n        if (Mask != -1) {\n\n            //\n            // Not all characters were matched, terminate the prefix search.\n            //\n\n            return NO_MATCH_FOUND;\n        }\n\n        //\n        // All 32 characters were matched.  Update counters and pointers\n        // accordingly and jump back to the start of the 32-byte processing.\n        //\n\n        SearchStringRemaining -= 32;\n        TargetStringRemaining -= 32;\n\n        CharactersMatched += 32;\n\n        SearchBuffer += 32;\n        TargetBuffer += 32;\n\n        goto StartYmm;\n    }\n\n    //\n    // Intentional follow-on to StartXmm.\n    //\n\nStartXmm:\n\n    //\n    // Update the search string's alignment.\n    //\n\n    if (SearchStringRemaining &gt;= 16 && TargetStringRemaining &gt;= 16) {\n\n        //\n        // We have at least 16 bytes to compare for each string.  Check the\n        // alignment for each buffer and do an aligned streaming load (non-\n        // temporal hint) if our alignment is at a 16-byte boundary or better;\n        // reverting to an unaligned load when not.\n        //\n\n        SearchStringAlignment = GetAddressAlignment(SearchBuffer);\n\n        if (SearchStringAlignment &lt; 16) {\n            SearchXmm = _mm_loadu_si128((XMMWORD *)SearchBuffer);\n        } else {\n            SearchXmm = _mm_stream_load_si128((XMMWORD *)SearchBuffer);\n        }\n\n        TargetXmm = _mm_stream_load_si128((XMMWORD *)TargetBuffer);\n\n        //\n        // Compare the two vectors.\n        //\n\n        ResultXmm = _mm_cmpeq_epi8(SearchXmm, TargetXmm);\n\n        //\n        // Generate a mask from the result of the comparison.\n        //\n\n        Mask = _mm_movemask_epi8(ResultXmm);\n\n        //\n        // There were at least 16 characters remaining in each string buffer,\n        // thus, every character needs to have matched in order for this search\n        // to continue.  If there were less than 16 characters, we can terminate\n        // this prefix search here.  (-1 == 0xffff -&gt; all bits set -&gt; all chars\n        // matched.)\n        //\n\n        if ((SHORT)Mask != (SHORT)-1) {\n\n            //\n            // Not all characters were matched, terminate the prefix search.\n            //\n\n            return NO_MATCH_FOUND;\n        }\n\n        //\n        // All 16 characters were matched.  Update counters and pointers\n        // accordingly and jump back to the start of the 16-byte processing.\n        //\n\n        SearchStringRemaining -= 16;\n        TargetStringRemaining -= 16;\n\n        CharactersMatched += 16;\n\n        SearchBuffer += 16;\n        TargetBuffer += 16;\n\n        goto StartXmm;\n    }\n\n    if (TargetStringRemaining == 0) {\n\n        //\n        // We'll get here if we successfully prefix matched the search string\n        // and all our buffers were aligned (i.e. we don't have a trailing\n        // &lt; 16 bytes comparison to perform).\n        //\n\n        return CharactersMatched;\n    }\n\n    //\n    // If we get here, we have less than 16 bytes to compare.  Our target\n    // strings are guaranteed to be 16-byte aligned, so we can load them\n    // using an aligned stream load as in the previous cases.\n    //\n\n    TargetXmm = _mm_stream_load_si128((PXMMWORD)TargetBuffer);\n\n    //\n    // Loading the remainder of our search string's buffer is a little more\n    // complicated.  It could reside within 15 bytes of the end of the page\n    // boundary, which would mean that a 128-bit load would cross a page\n    // boundary.\n    //\n    // At best, the page will belong to our process and we'll take a performance\n    // hit.  At worst, we won't own the page, and we'll end up triggering a hard\n    // page fault.\n    //\n    // So, see if the current search buffer address plus 16 bytes crosses a page\n    // boundary.  If it does, take the safe but slower approach of a ranged\n    // memcpy (movsb) into a local stack-allocated STRING_SLOT structure.\n    //\n\n    if (!PointerToOffsetCrossesPageBoundary(SearchBuffer, 16)) {\n\n        //\n        // No page boundary is crossed, so just do an unaligned 128-bit move\n        // into our Xmm register.  (We could do the aligned/unaligned dance\n        // here, but it's the last load we'll be doing (i.e. it's not\n        // potentially on a loop path), so I don't think it's worth the extra\n        // branch cost, although I haven't measured this empirically.)\n        //\n\n        SearchXmm = _mm_loadu_si128((XMMWORD *)SearchBuffer);\n\n    } else {\n\n        //\n        // We cross a page boundary, so only copy the the bytes we need via\n        // __movsb(), then do an aligned stream load into the Xmm register\n        // we'll use in the comparison.\n        //\n\n        __movsb((PBYTE)&SearchSlot.Char,\n                (PBYTE)SearchBuffer,\n                SearchStringRemaining);\n\n        SearchXmm = _mm_stream_load_si128(&SearchSlot.CharsXmm);\n    }\n\n    //\n    // Compare the final vectors.\n    //\n\n    ResultXmm = _mm_cmpeq_epi8(SearchXmm, TargetXmm);\n\n    //\n    // Generate a mask from the result of the comparison, but mask off (zero\n    // out) high bits from the target string's remaining length.\n    //\n\n    Mask = _bzhi_u32(_mm_movemask_epi8(ResultXmm), TargetStringRemaining);\n\n    //\n    // Count how many characters were matched and determine if we were a\n    // successful prefix match or not.\n    //\n\n    Count = __popcnt(Mask);\n\n    if ((USHORT)Count == TargetStringRemaining) {\n\n        //\n        // If we matched the same amount of characters as remaining in the\n        // target string, we've successfully prefix matched the search string.\n        // Return the total number of characters we matched.\n        //\n\n        CharactersMatched += (USHORT)Count;\n        return CharactersMatched;\n    }\n\n    //\n    // After all that work, our string match failed at the final stage!  Return\n    // to the caller indicating we were unable to make a prefix match.\n    //\n\n    return NO_MATCH_FOUND;\n}\n\n\nIsPrefixOfStringInTable_2\n← IsPrefixOfStringInTable_1 | IsPrefixOfStringInTable_3 →\n\n\n\n\n\n\nNote\n\n\n\nThis is is the first time we’re seeing the full body of the SIMD-style IsPrefixOfStringInTable implementation. It’s heavily commented, and generally, the core algorithm doesn’t fundamentally change across iterations (just slight tweaks). I’d recommend reading through it thoroughly to build a mental model of how the matching algorithm works. It’s straightforward, and the subsequent iterations will make much more sense, as they’re typically presented as diffs against the previous version.\n\n\n_Use_decl_annotations_\nSTRING_TABLE_INDEX\nIsPrefixOfStringInTable_2(\n    PSTRING_TABLE StringTable,\n    PSTRING String,\n    PSTRING_MATCH Match\n    )\n/*++\n\nRoutine Description:\n\n    Searches a string table to see if any strings \"prefix match\" the given\n    search string.  That is, whether any string in the table \"starts with\n    or is equal to\" the search string.\n\n    This is our first AVX-optimized version of the routine.\n\nArguments:\n\n    StringTable - Supplies a pointer to a STRING_TABLE struct.\n\n    String - Supplies a pointer to a STRING struct that contains the string to\n        search for.\n\n    Match - Optionally supplies a pointer to a variable that contains the\n        address of a STRING_MATCH structure.  This will be populated with\n        additional details about the match if a non-NULL pointer is supplied.\n\nReturn Value:\n\n    Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n\n--*/\n{\n    ULONG Bitmap;\n    ULONG Mask;\n    ULONG Count;\n    ULONG Length;\n    ULONG Index;\n    ULONG Shift = 0;\n    ULONG CharactersMatched;\n    ULONG NumberOfTrailingZeros;\n    ULONG SearchLength;\n    PSTRING TargetString;\n    PSTRING_ARRAY StringArray;\n    STRING_SLOT Slot;\n    STRING_SLOT Search;\n    STRING_SLOT Compare;\n    SLOT_LENGTHS Lengths;\n    XMMWORD LengthXmm;\n    XMMWORD UniqueChar;\n    XMMWORD TableUniqueChars;\n    XMMWORD IncludeSlotsByUniqueChar;\n    XMMWORD IgnoreSlotsByLength;\n    XMMWORD IncludeSlotsByLength;\n    XMMWORD IncludeSlots;\n    const XMMWORD AllOnesXmm = _mm_set1_epi8(0xff);\n\n    StringArray = StringTable-&gt;pStringArray;\n\n    //\n    // If the minimum length of the string array is greater than the length of\n    // our search string, there can't be a prefix match.\n    //\n\n    if (StringArray-&gt;MinimumLength &gt; String-&gt;Length) {\n        goto NoMatch;\n    }\n\n    //\n    // Unconditionally do the following five operations before checking any of\n    // the results and determining how the search should proceed:\n    //\n    //  1. Load the search string into an Xmm register, and broadcast the\n    //     character indicated by the unique character index (relative to\n    //     other strings in the table) across a second Xmm register.\n    //\n    //  2. Load the string table's unique character array into an Xmm register.\n    //\n    //  3. Broadcast the search string's length into an XMM register.\n    //\n    //  3. Load the string table's slot lengths array into an XMM register.\n    //\n    //  4. Compare the unique character from step 1 to the string table's unique\n    //     character array set up in step 2.  The result of this comparison\n    //     will produce an XMM register with each byte set to either 0xff if\n    //     the unique character was found, or 0x0 if it wasn't.\n    //\n    //  5. Compare the search string's length from step 3 to the string table's\n    //     slot length array set up in step 3.  This allows us to identify the\n    //     slots that have strings that are of lesser or equal length to our\n    //     search string.  As we're doing a prefix search, we can ignore any\n    //     slots longer than our incoming search string.\n    //\n    // We do all five of these operations up front regardless of whether or not\n    // they're strictly necessary.  That is, if the unique character isn't in\n    // the unique character array, we don't need to load array lengths -- and\n    // vice versa.  However, we assume the benefits afforded by giving the CPU\n    // a bunch of independent things to do unconditionally up-front outweigh\n    // the cost of putting in branches and conditionally loading things if\n    // necessary.\n    //\n\n    //\n    // Load the first 16-bytes of the search string into an XMM register.\n    //\n\n    LoadSearchStringIntoXmmRegister(Search, String, SearchLength);\n\n    //\n    // Broadcast the search string's unique characters according to the string\n    // table's unique character index.\n    //\n\n    UniqueChar = _mm_shuffle_epi8(Search.CharsXmm,\n                                  StringTable-&gt;UniqueIndex.IndexXmm);\n\n    //\n    // Load the slot length array into an XMM register.\n    //\n\n    Lengths.SlotsXmm = _mm_load_si128(&StringTable-&gt;Lengths.SlotsXmm);\n\n    //\n    // Load the string table's unique character array into an XMM register.\n    //\n\n    TableUniqueChars = _mm_load_si128(&StringTable-&gt;UniqueChars.CharsXmm);\n\n    //\n    // Broadcast the search string's length into an XMM register.\n    //\n\n    LengthXmm.m128i_u8[0] = (BYTE)String-&gt;Length;\n    LengthXmm = _mm_broadcastb_epi8(LengthXmm);\n\n    //\n    // Compare the search string's unique character with all of the unique\n    // characters of strings in the table, saving the results into an XMM\n    // register.  This comparison will indicate which slots we can ignore\n    // because the characters at a given index don't match.  Matched slots\n    // will be 0xff, unmatched slots will be 0x0.\n    //\n\n    IncludeSlotsByUniqueChar = _mm_cmpeq_epi8(UniqueChar, TableUniqueChars);\n\n    //\n    // Find all slots that are longer than the incoming string length, as these\n    // are the ones we're going to exclude from any prefix match.\n    //\n    // N.B. Because we default the length of empty slots to 0x7f, they will\n    //      handily be included in the ignored set (i.e. their words will also\n    //      be set to 0xff), which means they'll also get filtered out when\n    //      we invert the mask shortly after.\n    //\n\n    IgnoreSlotsByLength = _mm_cmpgt_epi8(Lengths.SlotsXmm, LengthXmm);\n\n    //\n    // Invert the result of the comparison; we want 0xff for slots to include\n    // and 0x0 for slots to ignore (it's currently the other way around).  We\n    // can achieve this by XOR'ing the result against our all-ones XMM register.\n    //\n\n    IncludeSlotsByLength = _mm_xor_si128(IgnoreSlotsByLength, AllOnesXmm);\n\n    //\n    // We're now ready to intersect the two XMM registers to determine which\n    // slots should still be included in the comparison (i.e. which slots have\n    // the exact same unique character as the string and a length less than or\n    // equal to the length of the search string).\n    //\n\n    IncludeSlots = _mm_and_si128(IncludeSlotsByUniqueChar,\n                                 IncludeSlotsByLength);\n\n    //\n    // Generate a mask.\n    //\n\n    Bitmap = _mm_movemask_epi8(IncludeSlots);\n\n    if (!Bitmap) {\n\n        //\n        // No bits were set, so there are no strings in this table starting\n        // with the same character and of a lesser or equal length as the\n        // search string.\n        //\n\n        goto NoMatch;\n    }\n\n    //\n    // A popcount against the mask will tell us how many slots we matched, and\n    // thus, need to compare.\n    //\n\n    Count = __popcnt(Bitmap);\n\n    do {\n\n        //\n        // Extract the next index by counting the number of trailing zeros left\n        // in the bitmap and adding the amount we've already shifted by.\n        //\n\n        NumberOfTrailingZeros = _tzcnt_u32(Bitmap);\n        Index = NumberOfTrailingZeros + Shift;\n\n        //\n        // Shift the bitmap right, past the zeros and the 1 that was just found,\n        // such that it's positioned correctly for the next loop's tzcnt. Update\n        // the shift count accordingly.\n        //\n\n        Bitmap &gt;&gt;= (NumberOfTrailingZeros + 1);\n        Shift = Index + 1;\n\n        //\n        // Load the slot and its length.\n        //\n\n        Slot.CharsXmm = _mm_load_si128(&StringTable-&gt;Slots[Index].CharsXmm);\n        Length = Lengths.Slots[Index];\n\n        //\n        // Compare the slot to the search string.\n        //\n\n        Compare.CharsXmm = _mm_cmpeq_epi8(Slot.CharsXmm, Search.CharsXmm);\n\n        //\n        // Create a mask of the comparison, then filter out high bits from the\n        // search string's length (which is capped at 16).  (This shouldn't be\n        // technically necessary as the string array buffers should have been\n        // calloc'd and zeroed, but optimizing compilers can often ignore the\n        // zeroing request -- which can produce some bizarre results where the\n        // debug build is correct (because the buffers were zeroed) but the\n        // release build fails because the zeroing got ignored and there are\n        // junk bytes past the NULL terminator, which get picked up in our\n        // 128-bit loads.)\n        //\n\n        Mask = _bzhi_u32(_mm_movemask_epi8(Compare.CharsXmm), SearchLength);\n\n        //\n        // Count how many characters matched.\n        //\n\n        CharactersMatched = __popcnt(Mask);\n\n        if ((USHORT)CharactersMatched == 16 && Length &gt; 16) {\n\n            //\n            // The first 16 characters in the string matched against this\n            // slot, and the slot is oversized (longer than 16 characters),\n            // so do a direct comparison between the remaining buffers.\n            //\n\n            TargetString = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n            CharactersMatched = IsPrefixMatchAvx2(String, TargetString, 16);\n\n            if (CharactersMatched == NO_MATCH_FOUND) {\n\n                //\n                // The prefix match failed, continue our search.\n                //\n\n                continue;\n\n            } else {\n\n                //\n                // We successfully prefix matched the search string against\n                // this slot.  The code immediately following us deals with\n                // handling a successful prefix match at the initial slot\n                // level; let's avoid an unnecessary branch and just jump\n                // directly into it.\n                //\n\n                goto FoundMatch;\n            }\n        }\n\n        if ((USHORT)CharactersMatched == Length) {\n\nFoundMatch:\n\n            //\n            // This slot is a prefix match.  Fill out the Match structure if the\n            // caller provided a non-NULL pointer, then return the index of the\n            // match.\n            //\n\n\n            if (ARGUMENT_PRESENT(Match)) {\n\n                Match-&gt;Index = (BYTE)Index;\n                Match-&gt;NumberOfMatchedCharacters = (BYTE)CharactersMatched;\n                Match-&gt;String = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n            }\n\n            return (STRING_TABLE_INDEX)Index;\n        }\n\n        //\n        // Not enough characters matched, so continue the loop.\n        //\n\n    } while (--Count);\n\n    //\n    // If we get here, we didn't find a match.\n    //\n\nNoMatch:\n\n    //IACA_VC_END();\n\n    return NO_MATCH_FOUND;\n}\n\n\nBenchmark 2\nLet’s see how version 2, our first SIMD attempt, performs in comparison to the two baselines.\n\n\n\nBenchmark 2\n\n\nEek! Our first SIMD attempt actually has worse prefix matching performance in most cases! The only area where it shows a performance improvement is in negative matching.\n\n\nIsPrefixOfStringInTable_3\n← IsPrefixOfStringInTable_2 | IsPrefixOfStringInTable_4 →\nFor version 3, let’s replace the call to IsPrefixMatchAvx2 with our simpler version, IsPrefixMatch:\n\nDiffFull\n\n\n% diff -u IsPrefixOfStringInTable_2.c IsPrefixOfStringInTable_3.c\n--- IsPrefixOfStringInTable_2.c 2018-04-15 22:35:55.458773500 -0400\n+++ IsPrefixOfStringInTable_3.c 2018-04-15 22:35:55.456274700 -0400\n@@ -18,7 +18,7 @@\n\n _Use_decl_annotations_\n STRING_TABLE_INDEX\n-IsPrefixOfStringInTable_2(\n+IsPrefixOfStringInTable_3(\n     PSTRING_TABLE StringTable,\n     PSTRING String,\n     PSTRING_MATCH Match\n@@ -278,7 +278,7 @@\n\n             TargetString = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n-            CharactersMatched = IsPrefixMatchAvx2(String, TargetString, 16);\n+            CharactersMatched = IsPrefixMatch(String, TargetString, 16);\n\n             if (CharactersMatched == NO_MATCH_FOUND) {\n\n\n_Use_decl_annotations_\nSTRING_TABLE_INDEX\nIsPrefixOfStringInTable_3(\n    PSTRING_TABLE StringTable,\n    PSTRING String,\n    PSTRING_MATCH Match\n    )\n/*++\n\nRoutine Description:\n\n    Searches a string table to see if any strings \"prefix match\" the given\n    search string.  That is, whether any string in the table \"starts with\n    or is equal to\" the search string.\n\n    This is our first AVX-optimized version of the routine.\n\nArguments:\n\n    StringTable - Supplies a pointer to a STRING_TABLE struct.\n\n    String - Supplies a pointer to a STRING struct that contains the string to\n        search for.\n\n    Match - Optionally supplies a pointer to a variable that contains the\n        address of a STRING_MATCH structure.  This will be populated with\n        additional details about the match if a non-NULL pointer is supplied.\n\nReturn Value:\n\n    Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n\n--*/\n{\n    ULONG Bitmap;\n    ULONG Mask;\n    ULONG Count;\n    ULONG Length;\n    ULONG Index;\n    ULONG Shift = 0;\n    ULONG CharactersMatched;\n    ULONG NumberOfTrailingZeros;\n    ULONG SearchLength;\n    PSTRING TargetString;\n    PSTRING_ARRAY StringArray;\n    STRING_SLOT Slot;\n    STRING_SLOT Search;\n    STRING_SLOT Compare;\n    SLOT_LENGTHS Lengths;\n    XMMWORD LengthXmm;\n    XMMWORD UniqueChar;\n    XMMWORD TableUniqueChars;\n    XMMWORD IncludeSlotsByUniqueChar;\n    XMMWORD IgnoreSlotsByLength;\n    XMMWORD IncludeSlotsByLength;\n    XMMWORD IncludeSlots;\n    const XMMWORD AllOnesXmm = _mm_set1_epi8(0xff);\n\n    StringArray = StringTable-&gt;pStringArray;\n\n    //\n    // If the minimum length of the string array is greater than the length of\n    // our search string, there can't be a prefix match.\n    //\n\n    if (StringArray-&gt;MinimumLength &gt; String-&gt;Length) {\n        goto NoMatch;\n    }\n\n    //\n    // Unconditionally do the following five operations before checking any of\n    // the results and determining how the search should proceed:\n    //\n    //  1. Load the search string into an Xmm register, and broadcast the\n    //     character indicated by the unique character index (relative to\n    //     other strings in the table) across a second Xmm register.\n    //\n    //  2. Load the string table's unique character array into an Xmm register.\n    //\n    //  3. Broadcast the search string's length into an XMM register.\n    //\n    //  3. Load the string table's slot lengths array into an XMM register.\n    //\n    //  4. Compare the unique character from step 1 to the string table's unique\n    //     character array set up in step 2.  The result of this comparison\n    //     will produce an XMM register with each byte set to either 0xff if\n    //     the unique character was found, or 0x0 if it wasn't.\n    //\n    //  5. Compare the search string's length from step 3 to the string table's\n    //     slot length array set up in step 3.  This allows us to identify the\n    //     slots that have strings that are of lesser or equal length to our\n    //     search string.  As we're doing a prefix search, we can ignore any\n    //     slots longer than our incoming search string.\n    //\n    // We do all five of these operations up front regardless of whether or not\n    // they're strictly necessary.  That is, if the unique character isn't in\n    // the unique character array, we don't need to load array lengths -- and\n    // vice versa.  However, we assume the benefits afforded by giving the CPU\n    // a bunch of independent things to do unconditionally up-front outweigh\n    // the cost of putting in branches and conditionally loading things if\n    // necessary.\n    //\n\n    //\n    // Load the first 16-bytes of the search string into an XMM register.\n    //\n\n    LoadSearchStringIntoXmmRegister(Search, String, SearchLength);\n\n    //\n    // Broadcast the search string's unique characters according to the string\n    // table's unique character index.\n    //\n\n    UniqueChar = _mm_shuffle_epi8(Search.CharsXmm,\n                                  StringTable-&gt;UniqueIndex.IndexXmm);\n\n    //\n    // Load the slot length array into an XMM register.\n    //\n\n    Lengths.SlotsXmm = _mm_load_si128(&StringTable-&gt;Lengths.SlotsXmm);\n\n    //\n    // Load the string table's unique character array into an XMM register.\n    //\n\n    TableUniqueChars = _mm_load_si128(&StringTable-&gt;UniqueChars.CharsXmm);\n\n    //\n    // Broadcast the search string's length into an XMM register.\n    //\n\n    LengthXmm.m128i_u8[0] = (BYTE)String-&gt;Length;\n    LengthXmm = _mm_broadcastb_epi8(LengthXmm);\n\n    //\n    // Compare the search string's unique character with all of the unique\n    // characters of strings in the table, saving the results into an XMM\n    // register.  This comparison will indicate which slots we can ignore\n    // because the characters at a given index don't match.  Matched slots\n    // will be 0xff, unmatched slots will be 0x0.\n    //\n\n    IncludeSlotsByUniqueChar = _mm_cmpeq_epi8(UniqueChar, TableUniqueChars);\n\n    //\n    // Find all slots that are longer than the incoming string length, as these\n    // are the ones we're going to exclude from any prefix match.\n    //\n    // N.B. Because we default the length of empty slots to 0x7f, they will\n    //      handily be included in the ignored set (i.e. their words will also\n    //      be set to 0xff), which means they'll also get filtered out when\n    //      we invert the mask shortly after.\n    //\n\n    IgnoreSlotsByLength = _mm_cmpgt_epi8(Lengths.SlotsXmm, LengthXmm);\n\n    //\n    // Invert the result of the comparison; we want 0xff for slots to include\n    // and 0x0 for slots to ignore (it's currently the other way around).  We\n    // can achieve this by XOR'ing the result against our all-ones XMM register.\n    //\n\n    IncludeSlotsByLength = _mm_xor_si128(IgnoreSlotsByLength, AllOnesXmm);\n\n    //\n    // We're now ready to intersect the two XMM registers to determine which\n    // slots should still be included in the comparison (i.e. which slots have\n    // the exact same unique character as the string and a length less than or\n    // equal to the length of the search string).\n    //\n\n    IncludeSlots = _mm_and_si128(IncludeSlotsByUniqueChar,\n                                 IncludeSlotsByLength);\n\n    //\n    // Generate a mask.\n    //\n\n    Bitmap = _mm_movemask_epi8(IncludeSlots);\n\n    if (!Bitmap) {\n\n        //\n        // No bits were set, so there are no strings in this table starting\n        // with the same character and of a lesser or equal length as the\n        // search string.\n        //\n\n        goto NoMatch;\n    }\n\n    //\n    // A popcount against the mask will tell us how many slots we matched, and\n    // thus, need to compare.\n    //\n\n    Count = __popcnt(Bitmap);\n\n    do {\n\n        //\n        // Extract the next index by counting the number of trailing zeros left\n        // in the bitmap and adding the amount we've already shifted by.\n        //\n\n        NumberOfTrailingZeros = _tzcnt_u32(Bitmap);\n        Index = NumberOfTrailingZeros + Shift;\n\n        //\n        // Shift the bitmap right, past the zeros and the 1 that was just found,\n        // such that it's positioned correctly for the next loop's tzcnt. Update\n        // the shift count accordingly.\n        //\n\n        Bitmap &gt;&gt;= (NumberOfTrailingZeros + 1);\n        Shift = Index + 1;\n\n        //\n        // Load the slot and its length.\n        //\n\n        Slot.CharsXmm = _mm_load_si128(&StringTable-&gt;Slots[Index].CharsXmm);\n        Length = Lengths.Slots[Index];\n\n        //\n        // Compare the slot to the search string.\n        //\n\n        Compare.CharsXmm = _mm_cmpeq_epi8(Slot.CharsXmm, Search.CharsXmm);\n\n        //\n        // Create a mask of the comparison, then filter out high bits from the\n        // search string's length (which is capped at 16).  (This shouldn't be\n        // technically necessary as the string array buffers should have been\n        // calloc'd and zeroed, but optimizing compilers can often ignore the\n        // zeroing request -- which can produce some bizarre results where the\n        // debug build is correct (because the buffers were zeroed) but the\n        // release build fails because the zeroing got ignored and there are\n        // junk bytes past the NULL terminator, which get picked up in our\n        // 128-bit loads.)\n        //\n\n        Mask = _bzhi_u32(_mm_movemask_epi8(Compare.CharsXmm), SearchLength);\n\n        //\n        // Count how many characters matched.\n        //\n\n        CharactersMatched = __popcnt(Mask);\n\n        if ((USHORT)CharactersMatched == 16 && Length &gt; 16) {\n\n            //\n            // The first 16 characters in the string matched against this\n            // slot, and the slot is oversized (longer than 16 characters),\n            // so do a direct comparison between the remaining buffers.\n            //\n\n            TargetString = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n            CharactersMatched = IsPrefixMatch(String, TargetString, 16);\n\n            if (CharactersMatched == NO_MATCH_FOUND) {\n\n                //\n                // The prefix match failed, continue our search.\n                //\n\n                continue;\n\n            } else {\n\n                //\n                // We successfully prefix matched the search string against\n                // this slot.  The code immediately following us deals with\n                // handling a successful prefix match at the initial slot\n                // level; let's avoid an unnecessary branch and just jump\n                // directly into it.\n                //\n\n                goto FoundMatch;\n            }\n        }\n\n        if ((USHORT)CharactersMatched == Length) {\n\nFoundMatch:\n\n            //\n            // This slot is a prefix match.  Fill out the Match structure if the\n            // caller provided a non-NULL pointer, then return the index of the\n            // match.\n            //\n\n\n            if (ARGUMENT_PRESENT(Match)) {\n\n                Match-&gt;Index = (BYTE)Index;\n                Match-&gt;NumberOfMatchedCharacters = (BYTE)CharactersMatched;\n                Match-&gt;String = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n            }\n\n            return (STRING_TABLE_INDEX)Index;\n        }\n\n        //\n        // Not enough characters matched, so continue the loop.\n        //\n\n    } while (--Count);\n\n    //\n    // If we get here, we didn't find a match.\n    //\n\nNoMatch:\n\n    //IACA_VC_END();\n\n    return NO_MATCH_FOUND;\n}\n\n\n\n\n\nBenchmark 3\n\n\n\nBenchmark 3\n\n\nPhew! We finally see superior performance across the board. This ends the short-lived tenure of version 2, which is demonstrably worse in every case.\nWe’ll also omit the IsPrefixOfCStrInArray routine from the graphs for now (for the most part), as it has served its initial baseline purpose.\n\n\nIsPrefixOfStringInTable_4\n← IsPrefixOfStringInTable_3 | IsPrefixOfStringInTable_5 →\nWhen I first wrote the initial string table code, I was experimenting with different strategies for loading the initial search string buffer. That resulted in the file StringLoadStoreOperations.h, which defined a bunch of helper macros. I’ve included them below, but don’t spend too much time absorbing them—they’re not good practice, and they all become irrelevant as soon as we switch to _mm_loadu_si128() in a few versions. I’m including them because they set the scene for versions 4, 5, and 6.\n/*++\n\n    VOID\n    LoadSearchStringIntoXmmRegister_SEH(\n        _In_ STRING_SLOT Slot,\n        _In_ PSTRING String,\n        _In_ USHORT LengthVar\n        );\n\nRoutine Description:\n\n    Attempts an aligned 128-bit load of String-&gt;Buffer into Slot.CharXmm via\n    the _mm_load_si128() intrinsic.  The intrinsic is surrounded in a __try/\n    __except block that catches EXCEPTION_ACCESS_VIOLATION exceptions.\n\n    If such an exception is caught, the routine will check to see if the string\n    buffer's address will cross a page boundary if 16-bytes are loaded.  If a\n    page boundary would be crossed, a __movsb() intrinsic is used to copy only\n    the bytes specified by String-&gt;Length, otherwise, an unaligned 128-bit load\n    is attemped via the _mm_loadu_si128() intrinsic.\n\nArguments:\n\n    Slot - Supplies the STRING_SLOT local variable name within the calling\n        function that will receive the results of the load operation.\n\n    String - Supplies the name of the PSTRING variable that is to be loaded\n        into the slot.  This will usually be one of the function parameters.\n\n    LengthVar - Supplies the name of a USHORT local variable that will receive\n        the value of min(String-&gt;Length, 16).\n\nReturn Value:\n\n    None.\n\n--*/\n#define LoadSearchStringIntoXmmRegister_SEH(Slot, String, LengthVar)   \\\n    LengthVar = min(String-&gt;Length, 16);                               \\\n    TRY_SSE42_ALIGNED {                                                \\\n        Slot.CharsXmm = _mm_load_si128((PXMMWORD)String-&gt;Buffer);      \\\n    } CATCH_EXCEPTION_ACCESS_VIOLATION {                               \\\n        if (PointerToOffsetCrossesPageBoundary(String-&gt;Buffer, 16)) {  \\\n            __movsb(Slot.Char, String-&gt;Buffer, LengthVar);             \\\n        } else {                                                       \\\n            Slot.CharsXmm = _mm_loadu_si128((PXMMWORD)String-&gt;Buffer); \\\n        }                                                              \\\n    }\n\n/*++\n\n    VOID\n    LoadSearchStringIntoXmmRegister_AlignmentCheck(\n        _In_ STRING_SLOT Slot,\n        _In_ PSTRING String,\n        _In_ USHORT LengthVar\n        );\n\nRoutine Description:\n\n    This routine checks to see if a page boundary will be crossed if 16-bytes\n    are loaded from the address supplied by String-&gt;Buffer.  If a page boundary\n    will be crossed, a __movsb() intrinsic is used to only copy String-&gt;Length\n    bytes into the given Slot.\n\n    If no page boundary will be crossed by a 128-bit load, the alignment of\n    the address supplied by String-&gt;Buffer is checked.  If the alignment isn't\n    at least on a 16-byte boundary, an unaligned load will be issued via the\n    _mm_loadu_si128() intrinsic, otherwise, an _mm_load_si128() will be used.\n\nArguments:\n\n    Slot - Supplies the STRING_SLOT local variable name within the calling\n        function that will receive the results of the load operation.\n\n    String - Supplies the name of the PSTRING variable that is to be loaded\n        into the slot.  This will usually be one of the function parameters.\n\n    LengthVar - Supplies the name of a USHORT local variable that will receive\n        the value of min(String-&gt;Length, 16).\n\nReturn Value:\n\n    None.\n\n--*/\n#define LoadSearchStringIntoXmmRegister_AlignmentCheck(Slot, String,LengthVar) \\\n    LengthVar = min(String-&gt;Length, 16);                                       \\\n    if (PointerToOffsetCrossesPageBoundary(String-&gt;Buffer, 16)) {              \\\n        __movsb(Slot.Char, String-&gt;Buffer, LengthVar);                         \\\n    } else if (GetAddressAlignment(String-&gt;Buffer) &lt; 16) {                     \\\n        Slot.CharsXmm = _mm_loadu_si128((PXMMWORD)String-&gt;Buffer);             \\\n    } else {                                                                   \\\n        Slot.CharsXmm = _mm_load_si128((PXMMWORD)String-&gt;Buffer);              \\\n    }\n\n/*++\n\n    VOID\n    LoadSearchStringIntoXmmRegister_AlwaysUnaligned(\n        _In_ STRING_SLOT Slot,\n        _In_ PSTRING String,\n        _In_ USHORT LengthVar\n        );\n\nRoutine Description:\n\n    This routine performs an unaligned 128-bit load of the address supplied by\n    String-&gt;Buffer into the given Slot via the _mm_loadu_si128() intrinsic.\n    No checks are done regarding whether or not a page boundary will be crossed.\n\nArguments:\n\n    Slot - Supplies the STRING_SLOT local variable name within the calling\n        function that will receive the results of the load operation.\n\n    String - Supplies the name of the PSTRING variable that is to be loaded\n        into the slot.  This will usually be one of the function parameters.\n\n    LengthVar - Supplies the name of a USHORT local variable that will receive\n        the value of min(String-&gt;Length, 16).\n\nReturn Value:\n\n    None.\n\n--*/\n#define LoadSearchStringIntoXmmRegister_Unaligned(Slot, String, LengthVar) \\\n    LengthVar = min(String-&gt;Length, 16);                                   \\\n    if (PointerToOffsetCrossesPageBoundary(String-&gt;Buffer, 16)) {          \\\n        __movsb(Slot.Char, String-&gt;Buffer, LengthVar);                     \\\n    } else if (GetAddressAlignment(String-&gt;Buffer) &lt; 16) {                 \\\n        Slot.CharsXmm = _mm_loadu_si128(String-&gt;Buffer);                   \\\n    } else {                                                               \\\n        Slot.CharsXmm = _mm_load_si128(String-&gt;Buffer);                    \\\n    }\n\n/*++\n\n    VOID\n    LoadSearchStringIntoXmmRegister_AlwaysMovsb(\n        _In_ STRING_SLOT Slot,\n        _In_ PSTRING String,\n        _In_ USHORT LengthVar\n        );\n\nRoutine Description:\n\n    This routine copies min(String-&gt;Length, 16) bytes from String-&gt;Buffer\n    into the given Slot via the __movsb() intrinsic.  The memory referenced by\n    the Slot is not cleared first via SecureZeroMemory().\n\nArguments:\n\n    Slot - Supplies the STRING_SLOT local variable name within the calling\n        function that will receive the results of the load operation.\n\n    String - Supplies the name of the PSTRING variable that is to be loaded\n        into the slot.  This will usually be one of the function parameters.\n\n    LengthVar - Supplies the name of a USHORT local variable that will receive\n        the value of min(String-&gt;Length, 16).\n\nReturn Value:\n\n    None.\n\n--*/\n#define LoadSearchStringIntoXmmRegister_AlwaysMovsb(Slot, String, LengthVar) \\\n    LengthVar = min(String-&gt;Length, 16);                                     \\\n    __movsb(Slot.Char, String-&gt;Buffer, LengthVar);\nIn our StringTable2.vcxproj file, we have the following:\n\n  &lt;PropertyGroup Label=\"Globals\"&gt;\n    ...\n    &lt;LoadSearchStringStrategy&gt;AlwaysMovsb&lt;/LoadSearchStringStrategy&gt;\n    &lt;!--\n    &lt;LoadSearchStringStrategy&gt;SEH&lt;/LoadSearchStringStrategy&gt;\n    &lt;LoadSearchStringStrategy&gt;AlignmentCheck&lt;/LoadSearchStringStrategy&gt;\n    &lt;LoadSearchStringStrategy&gt;AlwaysUnaligned&lt;/LoadSearchStringStrategy&gt;\n    --&gt;\nThis setup allowed me to toggle which strategy I wanted to use for loading the search string into an XMM register. As shown above, the default is to use the AlwaysMovsb approach*; so, for version 4, let’s swap that out for the SEH approach, which wraps the aligned load in a structured exception handler that falls back to __movsb() if the aligned load fails and the pointer plus 16 bytes crosses a page boundary.\n [*]: Or was it?\nNarrator: it wasn’t.\n\n\nDiffFull\n\n\n% diff -u IsPrefixOfStringInTable_4.c IsPrefixOfStringInTable_3.c\n--- IsPrefixOfStringInTable_3.c 2018-04-15 22:35:55.456274700 -0400\n+++ IsPrefixOfStringInTable_4.c 2018-04-15 22:35:55.453274200 -0400\n@@ -18,7 +18,7 @@\n\n _Use_decl_annotations_\n STRING_TABLE_INDEX\n-IsPrefixOfStringInTable_3(\n+IsPrefixOfStringInTable_4(\n     PSTRING_TABLE StringTable,\n     PSTRING String,\n     PSTRING_MATCH Match\n@@ -31,7 +31,8 @@\n     search string.  That is, whether any string in the table \"starts with\n     or is equal to\" the search string.\n\n-    This is our first AVX-optimized version of the routine.\n+    This routine is a variant of version 3 that uses a structured exception\n+    handler for loading the initial search string.\n\n Arguments:\n\n@@ -123,7 +124,7 @@\n     // Load the first 16-bytes of the search string into an XMM register.\n     //\n\n-    LoadSearchStringIntoXmmRegister(Search, String, SearchLength);\n+    LoadSearchStringIntoXmmRegister_SEH(Search, String, SearchLength);\n\n     //\n     // Broadcast the search string's unique characters according to the string\n\n\n_Use_decl_annotations_\nSTRING_TABLE_INDEX\nIsPrefixOfStringInTable_4(\n    PSTRING_TABLE StringTable,\n    PSTRING String,\n    PSTRING_MATCH Match\n    )\n/*++\n\nRoutine Description:\n\n    Searches a string table to see if any strings \"prefix match\" the given\n    search string.  That is, whether any string in the table \"starts with\n    or is equal to\" the search string.\n\n    This routine is a variant of version 3 that uses a structured exception\n    handler for loading the initial search string.\n\nArguments:\n\n    StringTable - Supplies a pointer to a STRING_TABLE struct.\n\n    String - Supplies a pointer to a STRING struct that contains the string to\n        search for.\n\n    Match - Optionally supplies a pointer to a variable that contains the\n        address of a STRING_MATCH structure.  This will be populated with\n        additional details about the match if a non-NULL pointer is supplied.\n\nReturn Value:\n\n    Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n\n--*/\n{\n    ULONG Bitmap;\n    ULONG Mask;\n    ULONG Count;\n    ULONG Length;\n    ULONG Index;\n    ULONG Shift = 0;\n    ULONG CharactersMatched;\n    ULONG NumberOfTrailingZeros;\n    ULONG SearchLength;\n    PSTRING TargetString;\n    PSTRING_ARRAY StringArray;\n    STRING_SLOT Slot;\n    STRING_SLOT Search;\n    STRING_SLOT Compare;\n    SLOT_LENGTHS Lengths;\n    XMMWORD LengthXmm;\n    XMMWORD UniqueChar;\n    XMMWORD TableUniqueChars;\n    XMMWORD IncludeSlotsByUniqueChar;\n    XMMWORD IgnoreSlotsByLength;\n    XMMWORD IncludeSlotsByLength;\n    XMMWORD IncludeSlots;\n    const XMMWORD AllOnesXmm = _mm_set1_epi8(0xff);\n\n    StringArray = StringTable-&gt;pStringArray;\n\n    //\n    // If the minimum length of the string array is greater than the length of\n    // our search string, there can't be a prefix match.\n    //\n\n    if (StringArray-&gt;MinimumLength &gt; String-&gt;Length) {\n        goto NoMatch;\n    }\n\n    //\n    // Unconditionally do the following five operations before checking any of\n    // the results and determining how the search should proceed:\n    //\n    //  1. Load the search string into an Xmm register, and broadcast the\n    //     character indicated by the unique character index (relative to\n    //     other strings in the table) across a second Xmm register.\n    //\n    //  2. Load the string table's unique character array into an Xmm register.\n    //\n    //  3. Broadcast the search string's length into an XMM register.\n    //\n    //  3. Load the string table's slot lengths array into an XMM register.\n    //\n    //  4. Compare the unique character from step 1 to the string table's unique\n    //     character array set up in step 2.  The result of this comparison\n    //     will produce an XMM register with each byte set to either 0xff if\n    //     the unique character was found, or 0x0 if it wasn't.\n    //\n    //  5. Compare the search string's length from step 3 to the string table's\n    //     slot length array set up in step 3.  This allows us to identify the\n    //     slots that have strings that are of lesser or equal length to our\n    //     search string.  As we're doing a prefix search, we can ignore any\n    //     slots longer than our incoming search string.\n    //\n    // We do all five of these operations up front regardless of whether or not\n    // they're strictly necessary.  That is, if the unique character isn't in\n    // the unique character array, we don't need to load array lengths -- and\n    // vice versa.  However, we assume the benefits afforded by giving the CPU\n    // a bunch of independent things to do unconditionally up-front outweigh\n    // the cost of putting in branches and conditionally loading things if\n    // necessary.\n    //\n\n    //\n    // Load the first 16-bytes of the search string into an XMM register.\n    //\n\n    LoadSearchStringIntoXmmRegister_SEH(Search, String, SearchLength);\n\n    //\n    // Broadcast the search string's unique characters according to the string\n    // table's unique character index.\n    //\n\n    UniqueChar = _mm_shuffle_epi8(Search.CharsXmm,\n                                  StringTable-&gt;UniqueIndex.IndexXmm);\n\n    //\n    // Load the slot length array into an XMM register.\n    //\n\n    Lengths.SlotsXmm = _mm_load_si128(&StringTable-&gt;Lengths.SlotsXmm);\n\n    //\n    // Load the string table's unique character array into an XMM register.\n    //\n\n    TableUniqueChars = _mm_load_si128(&StringTable-&gt;UniqueChars.CharsXmm);\n\n    //\n    // Broadcast the search string's length into an XMM register.\n    //\n\n    LengthXmm.m128i_u8[0] = (BYTE)String-&gt;Length;\n    LengthXmm = _mm_broadcastb_epi8(LengthXmm);\n\n    //\n    // Compare the search string's unique character with all of the unique\n    // characters of strings in the table, saving the results into an XMM\n    // register.  This comparison will indicate which slots we can ignore\n    // because the characters at a given index don't match.  Matched slots\n    // will be 0xff, unmatched slots will be 0x0.\n    //\n\n    IncludeSlotsByUniqueChar = _mm_cmpeq_epi8(UniqueChar, TableUniqueChars);\n\n    //\n    // Find all slots that are longer than the incoming string length, as these\n    // are the ones we're going to exclude from any prefix match.\n    //\n    // N.B. Because we default the length of empty slots to 0x7f, they will\n    //      handily be included in the ignored set (i.e. their words will also\n    //      be set to 0xff), which means they'll also get filtered out when\n    //      we invert the mask shortly after.\n    //\n\n    IgnoreSlotsByLength = _mm_cmpgt_epi8(Lengths.SlotsXmm, LengthXmm);\n\n    //\n    // Invert the result of the comparison; we want 0xff for slots to include\n    // and 0x0 for slots to ignore (it's currently the other way around).  We\n    // can achieve this by XOR'ing the result against our all-ones XMM register.\n    //\n\n    IncludeSlotsByLength = _mm_xor_si128(IgnoreSlotsByLength, AllOnesXmm);\n\n    //\n    // We're now ready to intersect the two XMM registers to determine which\n    // slots should still be included in the comparison (i.e. which slots have\n    // the exact same unique character as the string and a length less than or\n    // equal to the length of the search string).\n    //\n\n    IncludeSlots = _mm_and_si128(IncludeSlotsByUniqueChar,\n                                 IncludeSlotsByLength);\n\n    //\n    // Generate a mask.\n    //\n\n    Bitmap = _mm_movemask_epi8(IncludeSlots);\n\n    if (!Bitmap) {\n\n        //\n        // No bits were set, so there are no strings in this table starting\n        // with the same character and of a lesser or equal length as the\n        // search string.\n        //\n\n        goto NoMatch;\n    }\n\n    //\n    // A popcount against the mask will tell us how many slots we matched, and\n    // thus, need to compare.\n    //\n\n    Count = __popcnt(Bitmap);\n\n    do {\n\n        //\n        // Extract the next index by counting the number of trailing zeros left\n        // in the bitmap and adding the amount we've already shifted by.\n        //\n\n        NumberOfTrailingZeros = _tzcnt_u32(Bitmap);\n        Index = NumberOfTrailingZeros + Shift;\n\n        //\n        // Shift the bitmap right, past the zeros and the 1 that was just found,\n        // such that it's positioned correctly for the next loop's tzcnt. Update\n        // the shift count accordingly.\n        //\n\n        Bitmap &gt;&gt;= (NumberOfTrailingZeros + 1);\n        Shift = Index + 1;\n\n        //\n        // Load the slot and its length.\n        //\n\n        Slot.CharsXmm = _mm_load_si128(&StringTable-&gt;Slots[Index].CharsXmm);\n        Length = Lengths.Slots[Index];\n\n        //\n        // Compare the slot to the search string.\n        //\n\n        Compare.CharsXmm = _mm_cmpeq_epi8(Slot.CharsXmm, Search.CharsXmm);\n\n        //\n        // Create a mask of the comparison, then filter out high bits from the\n        // search string's length (which is capped at 16).  (This shouldn't be\n        // technically necessary as the string array buffers should have been\n        // calloc'd and zeroed, but optimizing compilers can often ignore the\n        // zeroing request -- which can produce some bizarre results where the\n        // debug build is correct (because the buffers were zeroed) but the\n        // release build fails because the zeroing got ignored and there are\n        // junk bytes past the NULL terminator, which get picked up in our\n        // 128-bit loads.)\n        //\n\n        Mask = _bzhi_u32(_mm_movemask_epi8(Compare.CharsXmm), SearchLength);\n\n        //\n        // Count how many characters matched.\n        //\n\n        CharactersMatched = __popcnt(Mask);\n\n        if ((USHORT)CharactersMatched == 16 && Length &gt; 16) {\n\n            //\n            // The first 16 characters in the string matched against this\n            // slot, and the slot is oversized (longer than 16 characters),\n            // so do a direct comparison between the remaining buffers.\n            //\n\n            TargetString = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n            CharactersMatched = IsPrefixMatch(String, TargetString, 16);\n\n            if (CharactersMatched == NO_MATCH_FOUND) {\n\n                //\n                // The prefix match failed, continue our search.\n                //\n\n                continue;\n\n            } else {\n\n                //\n                // We successfully prefix matched the search string against\n                // this slot.  The code immediately following us deals with\n                // handling a successful prefix match at the initial slot\n                // level; let's avoid an unnecessary branch and just jump\n                // directly into it.\n                //\n\n                goto FoundMatch;\n            }\n        }\n\n        if ((USHORT)CharactersMatched == Length) {\n\nFoundMatch:\n\n            //\n            // This slot is a prefix match.  Fill out the Match structure if the\n            // caller provided a non-NULL pointer, then return the index of the\n            // match.\n            //\n\n\n            if (ARGUMENT_PRESENT(Match)) {\n\n                Match-&gt;Index = (BYTE)Index;\n                Match-&gt;NumberOfMatchedCharacters = (BYTE)CharactersMatched;\n                Match-&gt;String = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n            }\n\n            return (STRING_TABLE_INDEX)Index;\n        }\n\n        //\n        // Not enough characters matched, so continue the loop.\n        //\n\n    } while (--Count);\n\n    //\n    // If we get here, we didn't find a match.\n    //\n\nNoMatch:\n\n    //IACA_VC_END();\n\n    return NO_MATCH_FOUND;\n}\n\n\n\n\n\nBenchmark 4\nThe performance of version 4 was slightly worse than 3 in every case:\n\n\n\nBenchmark 4\n\n\nVersion 3 is still in the lead with the AlwaysMovsb-based search string loading approach.\n Narrator: except the AlignmentCheck macro was actually active, not the AlwaysMovsb one. \n\n\nIsPrefixOfStringInTable_5\n← IsPrefixOfStringInTable_4 | IsPrefixOfStringInTable_6 →\nVersion 5 is an interesting one. It’s the first time we attempt to validate our claim that it’s more efficient to give the CPU a bunch of independent things to do up front, rather than adding more branches and attempting to terminate as early as possible.\nNote: we’ll also explicitly use the LoadSearchStringIntoXmmRegister_AlwaysMovsb macro here, instead of LoadSearchStringIntoXmmRegister, to make it clear that we’re actually relying on the __movsb()-based string loading routine.\n Narrator: can anyone spot the mistake with this logic? \n\nDiffFull\n\n\n% diff -u IsPrefixOfStringInTable_3.c IsPrefixOfStringInTable_5.c\n--- IsPrefixOfStringInTable_3.c 2018-04-15 22:35:55.456274700 -0400\n+++ IsPrefixOfStringInTable_5.c 2018-04-15 13:24:52.480972900 -0400\n@@ -16,9 +16,13 @@\n\n #include \"stdafx.h\"\n\n+//\n+// Variant of v3 with early-exits.\n+//\n+\n _Use_decl_annotations_\n STRING_TABLE_INDEX\n-IsPrefixOfStringInTable_3(\n+IsPrefixOfStringInTable_5(\n     PSTRING_TABLE StringTable,\n     PSTRING String,\n     PSTRING_MATCH Match\n@@ -31,7 +35,11 @@\n     search string.  That is, whether any string in the table \"starts with\n     or is equal to\" the search string.\n\n-    This is our first AVX-optimized version of the routine.\n+    This routine is a variant of version 3 that uses early exits (i.e.\n+    returning NO_MATCH_FOUND as early as we can).  It is designed to evaluate\n+    the assertion we've been making that it's more optimal to give the CPU\n+    to do a bunch of things up front versus doing something, then potentially\n+    branching, doing the next thing, potentially branching, etc.\n\n Arguments:\n\n@@ -51,6 +59,8 @@\n --*/\n {\n     ULONG Bitmap;\n+    ULONG CharBitmap;\n+    ULONG LengthBitmap;\n     ULONG Mask;\n     ULONG Count;\n     ULONG Length;\n@@ -71,7 +81,6 @@\n     XMMWORD IncludeSlotsByUniqueChar;\n     XMMWORD IgnoreSlotsByLength;\n     XMMWORD IncludeSlotsByLength;\n-    XMMWORD IncludeSlots;\n     const XMMWORD AllOnesXmm = _mm_set1_epi8(0xff);\n\n     StringArray = StringTable-&gt;pStringArray;\n@@ -123,7 +132,7 @@\n     // Load the first 16-bytes of the search string into an XMM register.\n     //\n\n-    LoadSearchStringIntoXmmRegister(Search, String, SearchLength);\n+    LoadSearchStringIntoXmmRegister_AlwaysMovsb(Search, String, SearchLength);\n\n     //\n     // Broadcast the search string's unique characters according to the string\n@@ -133,11 +142,6 @@\n     UniqueChar = _mm_shuffle_epi8(Search.CharsXmm,\n                                   StringTable-&gt;UniqueIndex.IndexXmm);\n\n-    //\n-    // Load the slot length array into an XMM register.\n-    //\n-\n-    Lengths.SlotsXmm = _mm_load_si128(&StringTable-&gt;Lengths.SlotsXmm);\n\n     //\n     // Load the string table's unique character array into an XMM register.\n@@ -146,13 +150,6 @@\n     TableUniqueChars = _mm_load_si128(&StringTable-&gt;UniqueChars.CharsXmm);\n\n     //\n-    // Broadcast the search string's length into an XMM register.\n-    //\n-\n-    LengthXmm.m128i_u8[0] = (BYTE)String-&gt;Length;\n-    LengthXmm = _mm_broadcastb_epi8(LengthXmm);\n-\n-    //\n     // Compare the search string's unique character with all of the unique\n     // characters of strings in the table, saving the results into an XMM\n     // register.  This comparison will indicate which slots we can ignore\n@@ -162,6 +159,25 @@\n\n     IncludeSlotsByUniqueChar = _mm_cmpeq_epi8(UniqueChar, TableUniqueChars);\n\n+    CharBitmap = _mm_movemask_epi8(IncludeSlotsByUniqueChar);\n+\n+    if (!CharBitmap) {\n+        return NO_MATCH_FOUND;\n+    }\n+\n+    //\n+    // Load the slot length array into an XMM register.\n+    //\n+\n+    Lengths.SlotsXmm = _mm_load_si128(&StringTable-&gt;Lengths.SlotsXmm);\n+\n+    //\n+    // Broadcast the search string's length into an XMM register.\n+    //\n+\n+    LengthXmm.m128i_u8[0] = (BYTE)String-&gt;Length;\n+    LengthXmm = _mm_broadcastb_epi8(LengthXmm);\n+\n     //\n     // Find all slots that are longer than the incoming string length, as these\n     // are the ones we're going to exclude from any prefix match.\n@@ -182,31 +198,16 @@\n\n     IncludeSlotsByLength = _mm_xor_si128(IgnoreSlotsByLength, AllOnesXmm);\n\n-    //\n-    // We're now ready to intersect the two XMM registers to determine which\n-    // slots should still be included in the comparison (i.e. which slots have\n-    // the exact same unique character as the string and a length less than or\n-    // equal to the length of the search string).\n-    //\n-\n-    IncludeSlots = _mm_and_si128(IncludeSlotsByUniqueChar,\n-                                 IncludeSlotsByLength);\n+    LengthBitmap = _mm_movemask_epi8(IncludeSlotsByLength);\n\n-    //\n-    // Generate a mask.\n-    //\n+    if (!LengthBitmap) {\n+        return NO_MATCH_FOUND;\n+    }\n\n-    Bitmap = _mm_movemask_epi8(IncludeSlots);\n+    Bitmap = CharBitmap & LengthBitmap;\n\n     if (!Bitmap) {\n-\n-        //\n-        // No bits were set, so there are no strings in this table starting\n-        // with the same character and of a lesser or equal length as the\n-        // search string.\n-        //\n-\n-        goto NoMatch;\n+        return NO_MATCH_FOUND;\n     }\n\n     //\n\n\n_Use_decl_annotations_\nSTRING_TABLE_INDEX\nIsPrefixOfStringInTable_5(\n    PSTRING_TABLE StringTable,\n    PSTRING String,\n    PSTRING_MATCH Match\n    )\n/*++\n\nRoutine Description:\n\n    Searches a string table to see if any strings \"prefix match\" the given\n    search string.  That is, whether any string in the table \"starts with\n    or is equal to\" the search string.\n\n    This routine is a variant of version 3 that uses early exits (i.e.\n    returning NO_MATCH_FOUND as early as we can).  It is designed to evaluate\n    the assertion we've been making that it's more optimal to give the CPU\n    to do a bunch of things up front versus doing something, then potentially\n    branching, doing the next thing, potentially branching, etc.\n\nArguments:\n\n    StringTable - Supplies a pointer to a STRING_TABLE struct.\n\n    String - Supplies a pointer to a STRING struct that contains the string to\n        search for.\n\n    Match - Optionally supplies a pointer to a variable that contains the\n        address of a STRING_MATCH structure.  This will be populated with\n        additional details about the match if a non-NULL pointer is supplied.\n\nReturn Value:\n\n    Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n\n--*/\n{\n    ULONG Bitmap;\n    ULONG CharBitmap;\n    ULONG LengthBitmap;\n    ULONG Mask;\n    ULONG Count;\n    ULONG Length;\n    ULONG Index;\n    ULONG Shift = 0;\n    ULONG CharactersMatched;\n    ULONG NumberOfTrailingZeros;\n    ULONG SearchLength;\n    PSTRING TargetString;\n    PSTRING_ARRAY StringArray;\n    STRING_SLOT Slot;\n    STRING_SLOT Search;\n    STRING_SLOT Compare;\n    SLOT_LENGTHS Lengths;\n    XMMWORD LengthXmm;\n    XMMWORD UniqueChar;\n    XMMWORD TableUniqueChars;\n    XMMWORD IncludeSlotsByUniqueChar;\n    XMMWORD IgnoreSlotsByLength;\n    XMMWORD IncludeSlotsByLength;\n    const XMMWORD AllOnesXmm = _mm_set1_epi8(0xff);\n\n    StringArray = StringTable-&gt;pStringArray;\n\n    //\n    // If the minimum length of the string array is greater than the length of\n    // our search string, there can't be a prefix match.\n    //\n\n    if (StringArray-&gt;MinimumLength &gt; String-&gt;Length) {\n        goto NoMatch;\n    }\n\n    //\n    // Unconditionally do the following five operations before checking any of\n    // the results and determining how the search should proceed:\n    //\n    //  1. Load the search string into an Xmm register, and broadcast the\n    //     character indicated by the unique character index (relative to\n    //     other strings in the table) across a second Xmm register.\n    //\n    //  2. Load the string table's unique character array into an Xmm register.\n    //\n    //  3. Broadcast the search string's length into an XMM register.\n    //\n    //  3. Load the string table's slot lengths array into an XMM register.\n    //\n    //  4. Compare the unique character from step 1 to the string table's unique\n    //     character array set up in step 2.  The result of this comparison\n    //     will produce an XMM register with each byte set to either 0xff if\n    //     the unique character was found, or 0x0 if it wasn't.\n    //\n    //  5. Compare the search string's length from step 3 to the string table's\n    //     slot length array set up in step 3.  This allows us to identify the\n    //     slots that have strings that are of lesser or equal length to our\n    //     search string.  As we're doing a prefix search, we can ignore any\n    //     slots longer than our incoming search string.\n    //\n    // We do all five of these operations up front regardless of whether or not\n    // they're strictly necessary.  That is, if the unique character isn't in\n    // the unique character array, we don't need to load array lengths -- and\n    // vice versa.  However, we assume the benefits afforded by giving the CPU\n    // a bunch of independent things to do unconditionally up-front outweigh\n    // the cost of putting in branches and conditionally loading things if\n    // necessary.\n    //\n\n    //\n    // Load the first 16-bytes of the search string into an XMM register.\n    //\n\n    LoadSearchStringIntoXmmRegister_AlwaysMovsb(Search, String, SearchLength);\n\n    //\n    // Broadcast the search string's unique characters according to the string\n    // table's unique character index.\n    //\n\n    UniqueChar = _mm_shuffle_epi8(Search.CharsXmm,\n                                  StringTable-&gt;UniqueIndex.IndexXmm);\n\n\n    //\n    // Load the string table's unique character array into an XMM register.\n    //\n\n    TableUniqueChars = _mm_load_si128(&StringTable-&gt;UniqueChars.CharsXmm);\n\n    //\n    // Compare the search string's unique character with all of the unique\n    // characters of strings in the table, saving the results into an XMM\n    // register.  This comparison will indicate which slots we can ignore\n    // because the characters at a given index don't match.  Matched slots\n    // will be 0xff, unmatched slots will be 0x0.\n    //\n\n    IncludeSlotsByUniqueChar = _mm_cmpeq_epi8(UniqueChar, TableUniqueChars);\n\n    CharBitmap = _mm_movemask_epi8(IncludeSlotsByUniqueChar);\n\n    if (!CharBitmap) {\n        return NO_MATCH_FOUND;\n    }\n\n    //\n    // Load the slot length array into an XMM register.\n    //\n\n    Lengths.SlotsXmm = _mm_load_si128(&StringTable-&gt;Lengths.SlotsXmm);\n\n    //\n    // Broadcast the search string's length into an XMM register.\n    //\n\n    LengthXmm.m128i_u8[0] = (BYTE)String-&gt;Length;\n    LengthXmm = _mm_broadcastb_epi8(LengthXmm);\n\n    //\n    // Find all slots that are longer than the incoming string length, as these\n    // are the ones we're going to exclude from any prefix match.\n    //\n    // N.B. Because we default the length of empty slots to 0x7f, they will\n    //      handily be included in the ignored set (i.e. their words will also\n    //      be set to 0xff), which means they'll also get filtered out when\n    //      we invert the mask shortly after.\n    //\n\n    IgnoreSlotsByLength = _mm_cmpgt_epi8(Lengths.SlotsXmm, LengthXmm);\n\n    //\n    // Invert the result of the comparison; we want 0xff for slots to include\n    // and 0x0 for slots to ignore (it's currently the other way around).  We\n    // can achieve this by XOR'ing the result against our all-ones XMM register.\n    //\n\n    IncludeSlotsByLength = _mm_xor_si128(IgnoreSlotsByLength, AllOnesXmm);\n\n    LengthBitmap = _mm_movemask_epi8(IncludeSlotsByLength);\n\n    if (!LengthBitmap) {\n        return NO_MATCH_FOUND;\n    }\n\n    Bitmap = CharBitmap & LengthBitmap;\n\n    if (!Bitmap) {\n        return NO_MATCH_FOUND;\n    }\n\n    //\n    // A popcount against the mask will tell us how many slots we matched, and\n    // thus, need to compare.\n    //\n\n    Count = __popcnt(Bitmap);\n\n    do {\n\n        //\n        // Extract the next index by counting the number of trailing zeros left\n        // in the bitmap and adding the amount we've already shifted by.\n        //\n\n        NumberOfTrailingZeros = _tzcnt_u32(Bitmap);\n        Index = NumberOfTrailingZeros + Shift;\n\n        //\n        // Shift the bitmap right, past the zeros and the 1 that was just found,\n        // such that it's positioned correctly for the next loop's tzcnt. Update\n        // the shift count accordingly.\n        //\n\n        Bitmap &gt;&gt;= (NumberOfTrailingZeros + 1);\n        Shift = Index + 1;\n\n        //\n        // Load the slot and its length.\n        //\n\n        Slot.CharsXmm = _mm_load_si128(&StringTable-&gt;Slots[Index].CharsXmm);\n        Length = Lengths.Slots[Index];\n\n        //\n        // Compare the slot to the search string.\n        //\n\n        Compare.CharsXmm = _mm_cmpeq_epi8(Slot.CharsXmm, Search.CharsXmm);\n\n        //\n        // Create a mask of the comparison, then filter out high bits from the\n        // search string's length (which is capped at 16).  (This shouldn't be\n        // technically necessary as the string array buffers should have been\n        // calloc'd and zeroed, but optimizing compilers can often ignore the\n        // zeroing request -- which can produce some bizarre results where the\n        // debug build is correct (because the buffers were zeroed) but the\n        // release build fails because the zeroing got ignored and there are\n        // junk bytes past the NULL terminator, which get picked up in our\n        // 128-bit loads.)\n        //\n\n        Mask = _bzhi_u32(_mm_movemask_epi8(Compare.CharsXmm), SearchLength);\n\n        //\n        // Count how many characters matched.\n        //\n\n        CharactersMatched = __popcnt(Mask);\n\n        if ((USHORT)CharactersMatched == 16 && Length &gt; 16) {\n\n            //\n            // The first 16 characters in the string matched against this\n            // slot, and the slot is oversized (longer than 16 characters),\n            // so do a direct comparison between the remaining buffers.\n            //\n\n            TargetString = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n            CharactersMatched = IsPrefixMatch(String, TargetString, 16);\n\n            if (CharactersMatched == NO_MATCH_FOUND) {\n\n                //\n                // The prefix match failed, continue our search.\n                //\n\n                continue;\n\n            } else {\n\n                //\n                // We successfully prefix matched the search string against\n                // this slot.  The code immediately following us deals with\n                // handling a successful prefix match at the initial slot\n                // level; let's avoid an unnecessary branch and just jump\n                // directly into it.\n                //\n\n                goto FoundMatch;\n            }\n        }\n\n        if ((USHORT)CharactersMatched == Length) {\n\nFoundMatch:\n\n            //\n            // This slot is a prefix match.  Fill out the Match structure if the\n            // caller provided a non-NULL pointer, then return the index of the\n            // match.\n            //\n\n\n            if (ARGUMENT_PRESENT(Match)) {\n\n                Match-&gt;Index = (BYTE)Index;\n                Match-&gt;NumberOfMatchedCharacters = (BYTE)CharactersMatched;\n                Match-&gt;String = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n            }\n\n            return (STRING_TABLE_INDEX)Index;\n        }\n\n        //\n        // Not enough characters matched, so continue the loop.\n        //\n\n    } while (--Count);\n\n    //\n    // If we get here, we didn't find a match.\n    //\n\nNoMatch:\n\n    //IACA_VC_END();\n\n    return NO_MATCH_FOUND;\n}\n\n\n\n\n\nBenchmark 5\nIf our theory is correct, the performance of this version should be worse, due to all the extra branches in the initial test. Let’s see if we’re right:\n\n\n\nBenchmark 5\n\n\nHoly smokes, version 5 is bad! It’s so bad it’s actually closest in performance to the failed version 2 with the elaborate AVX2 prefix matching routine.\n\n\n\n\n\n\nNote\n\n\n\nIt was actually so close I double-checked the two routines to ensure they were correct; they were, so this is just a coincidence.\n\n\nThat’s good news, though, as it validates the assumption we’ve been working with since inception:\n//\n// We do all five of these operations up front regardless of whether or not\n// they're strictly necessary.  That is, if the unique character isn't in\n// the unique character array, we don't need to load array lengths -- and\n// vice versa.  However, we assume the benefits afforded by giving the CPU\n// a bunch of independent things to do unconditionally up-front outweigh\n// the cost of putting in branches and conditionally loading things if\n// necessary.\n//\nThat’s the end of version 5’s tenure. TL;DR: fewer branches &gt; more branches.\n Narrator: more accurate TL;DR: __movsb() is slow, and always make sure you’re testing what you think you’re testing.] \n\n\nIsPrefixOfStringInTable_6\n← IsPrefixOfStringInTable_5 | IsPrefixOfStringInTable_7 →\nVersion 6 is boring. We tweak the initial loading of the search string, explicitly loading it via an unaligned load. If the underlying buffer is aligned on a 16-byte boundary, this is just as fast as an aligned load. If not, at least it doesn’t crash—it’s just slow.\n\n\n\n\n\n\nTip\n\n\n\nIf you attempt an aligned load on an address that isn’t aligned at a 16-byte boundary, the processor will generate an exception, causing your program to crash (assuming you don’t have any structured exception handlers in place to catch the error).\n\n\n\nDiffFull\n\n\n% diff -u IsPrefixOfStringInTable_3.c IsPrefixOfStringInTable_6.c\n--- IsPrefixOfStringInTable_3.c 2018-04-15 22:35:55.456274700 -0400\n+++ IsPrefixOfStringInTable_6.c 2018-04-26 18:29:40.594556800 -0400\n@@ -18,7 +18,7 @@\n\n _Use_decl_annotations_\n STRING_TABLE_INDEX\n-IsPrefixOfStringInTable_3(\n+IsPrefixOfStringInTable_6(\n     PSTRING_TABLE StringTable,\n     PSTRING String,\n     PSTRING_MATCH Match\n@@ -31,7 +31,8 @@\n     search string.  That is, whether any string in the table \"starts with\n     or is equal to\" the search string.\n\n-    This is our first AVX-optimized version of the routine.\n+    This routine differs from version 3 in that we do an unaligned load of\n+    the search string buffer without any SEH wrappers or alignment checks.\n\n Arguments:\n\n@@ -123,7 +124,8 @@\n     // Load the first 16-bytes of the search string into an XMM register.\n     //\n\n-    LoadSearchStringIntoXmmRegister(Search, String, SearchLength);\n+    SearchLength = min(String-&gt;Length, 16);\n+    Search.CharsXmm = _mm_loadu_si128((PXMMWORD)String-&gt;Buffer);\n\n     //\n     // Broadcast the search string's unique characters according to the string\n\n\n_Use_decl_annotations_\nSTRING_TABLE_INDEX\nIsPrefixOfStringInTable_6(\n    PSTRING_TABLE StringTable,\n    PSTRING String,\n    PSTRING_MATCH Match\n    )\n/*++\n\nRoutine Description:\n\n    Searches a string table to see if any strings \"prefix match\" the given\n    search string.  That is, whether any string in the table \"starts with\n    or is equal to\" the search string.\n\n    This routine differs from version 3 in that we do an unaligned load of\n    the search string buffer without any SEH wrappers or alignment checks.\n\nArguments:\n\n    StringTable - Supplies a pointer to a STRING_TABLE struct.\n\n    String - Supplies a pointer to a STRING struct that contains the string to\n        search for.\n\n    Match - Optionally supplies a pointer to a variable that contains the\n        address of a STRING_MATCH structure.  This will be populated with\n        additional details about the match if a non-NULL pointer is supplied.\n\nReturn Value:\n\n    Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n\n--*/\n{\n    ULONG Bitmap;\n    ULONG Mask;\n    ULONG Count;\n    ULONG Length;\n    ULONG Index;\n    ULONG Shift = 0;\n    ULONG CharactersMatched;\n    ULONG NumberOfTrailingZeros;\n    ULONG SearchLength;\n    PSTRING TargetString;\n    PSTRING_ARRAY StringArray;\n    STRING_SLOT Slot;\n    STRING_SLOT Search;\n    STRING_SLOT Compare;\n    SLOT_LENGTHS Lengths;\n    XMMWORD LengthXmm;\n    XMMWORD UniqueChar;\n    XMMWORD TableUniqueChars;\n    XMMWORD IncludeSlotsByUniqueChar;\n    XMMWORD IgnoreSlotsByLength;\n    XMMWORD IncludeSlotsByLength;\n    XMMWORD IncludeSlots;\n    const XMMWORD AllOnesXmm = _mm_set1_epi8(0xff);\n\n    StringArray = StringTable-&gt;pStringArray;\n\n    //\n    // If the minimum length of the string array is greater than the length of\n    // our search string, there can't be a prefix match.\n    //\n\n    if (StringArray-&gt;MinimumLength &gt; String-&gt;Length) {\n        goto NoMatch;\n    }\n\n    //\n    // Unconditionally do the following five operations before checking any of\n    // the results and determining how the search should proceed:\n    //\n    //  1. Load the search string into an Xmm register, and broadcast the\n    //     character indicated by the unique character index (relative to\n    //     other strings in the table) across a second Xmm register.\n    //\n    //  2. Load the string table's unique character array into an Xmm register.\n    //\n    //  3. Broadcast the search string's length into an XMM register.\n    //\n    //  3. Load the string table's slot lengths array into an XMM register.\n    //\n    //  4. Compare the unique character from step 1 to the string table's unique\n    //     character array set up in step 2.  The result of this comparison\n    //     will produce an XMM register with each byte set to either 0xff if\n    //     the unique character was found, or 0x0 if it wasn't.\n    //\n    //  5. Compare the search string's length from step 3 to the string table's\n    //     slot length array set up in step 3.  This allows us to identify the\n    //     slots that have strings that are of lesser or equal length to our\n    //     search string.  As we're doing a prefix search, we can ignore any\n    //     slots longer than our incoming search string.\n    //\n    // We do all five of these operations up front regardless of whether or not\n    // they're strictly necessary.  That is, if the unique character isn't in\n    // the unique character array, we don't need to load array lengths -- and\n    // vice versa.  However, we assume the benefits afforded by giving the CPU\n    // a bunch of independent things to do unconditionally up-front outweigh\n    // the cost of putting in branches and conditionally loading things if\n    // necessary.\n    //\n\n    //\n    // Load the first 16-bytes of the search string into an XMM register.\n    //\n\n    SearchLength = min(String-&gt;Length, 16);\n    Search.CharsXmm = _mm_loadu_si128((PXMMWORD)String-&gt;Buffer);\n\n    //\n    // Broadcast the search string's unique characters according to the string\n    // table's unique character index.\n    //\n\n    UniqueChar = _mm_shuffle_epi8(Search.CharsXmm,\n                                  StringTable-&gt;UniqueIndex.IndexXmm);\n\n    //\n    // Load the slot length array into an XMM register.\n    //\n\n    Lengths.SlotsXmm = _mm_load_si128(&StringTable-&gt;Lengths.SlotsXmm);\n\n    //\n    // Load the string table's unique character array into an XMM register.\n    //\n\n    TableUniqueChars = _mm_load_si128(&StringTable-&gt;UniqueChars.CharsXmm);\n\n    //\n    // Broadcast the search string's length into an XMM register.\n    //\n\n    LengthXmm.m128i_u8[0] = (BYTE)String-&gt;Length;\n    LengthXmm = _mm_broadcastb_epi8(LengthXmm);\n\n    //\n    // Compare the search string's unique character with all of the unique\n    // characters of strings in the table, saving the results into an XMM\n    // register.  This comparison will indicate which slots we can ignore\n    // because the characters at a given index don't match.  Matched slots\n    // will be 0xff, unmatched slots will be 0x0.\n    //\n\n    IncludeSlotsByUniqueChar = _mm_cmpeq_epi8(UniqueChar, TableUniqueChars);\n\n    //\n    // Find all slots that are longer than the incoming string length, as these\n    // are the ones we're going to exclude from any prefix match.\n    //\n    // N.B. Because we default the length of empty slots to 0x7f, they will\n    //      handily be included in the ignored set (i.e. their words will also\n    //      be set to 0xff), which means they'll also get filtered out when\n    //      we invert the mask shortly after.\n    //\n\n    IgnoreSlotsByLength = _mm_cmpgt_epi8(Lengths.SlotsXmm, LengthXmm);\n\n    //\n    // Invert the result of the comparison; we want 0xff for slots to include\n    // and 0x0 for slots to ignore (it's currently the other way around).  We\n    // can achieve this by XOR'ing the result against our all-ones XMM register.\n    //\n\n    IncludeSlotsByLength = _mm_xor_si128(IgnoreSlotsByLength, AllOnesXmm);\n\n    //\n    // We're now ready to intersect the two XMM registers to determine which\n    // slots should still be included in the comparison (i.e. which slots have\n    // the exact same unique character as the string and a length less than or\n    // equal to the length of the search string).\n    //\n\n    IncludeSlots = _mm_and_si128(IncludeSlotsByUniqueChar,\n                                 IncludeSlotsByLength);\n\n    //\n    // Generate a mask.\n    //\n\n    Bitmap = _mm_movemask_epi8(IncludeSlots);\n\n    if (!Bitmap) {\n\n        //\n        // No bits were set, so there are no strings in this table starting\n        // with the same character and of a lesser or equal length as the\n        // search string.\n        //\n\n        goto NoMatch;\n    }\n\n    //\n    // A popcount against the mask will tell us how many slots we matched, and\n    // thus, need to compare.\n    //\n\n    Count = __popcnt(Bitmap);\n\n    do {\n\n        //\n        // Extract the next index by counting the number of trailing zeros left\n        // in the bitmap and adding the amount we've already shifted by.\n        //\n\n        NumberOfTrailingZeros = _tzcnt_u32(Bitmap);\n        Index = NumberOfTrailingZeros + Shift;\n\n        //\n        // Shift the bitmap right, past the zeros and the 1 that was just found,\n        // such that it's positioned correctly for the next loop's tzcnt. Update\n        // the shift count accordingly.\n        //\n\n        Bitmap &gt;&gt;= (NumberOfTrailingZeros + 1);\n        Shift = Index + 1;\n\n        //\n        // Load the slot and its length.\n        //\n\n        Slot.CharsXmm = _mm_load_si128(&StringTable-&gt;Slots[Index].CharsXmm);\n        Length = Lengths.Slots[Index];\n\n        //\n        // Compare the slot to the search string.\n        //\n\n        Compare.CharsXmm = _mm_cmpeq_epi8(Slot.CharsXmm, Search.CharsXmm);\n\n        //\n        // Create a mask of the comparison, then filter out high bits from the\n        // search string's length (which is capped at 16).  (This shouldn't be\n        // technically necessary as the string array buffers should have been\n        // calloc'd and zeroed, but optimizing compilers can often ignore the\n        // zeroing request -- which can produce some bizarre results where the\n        // debug build is correct (because the buffers were zeroed) but the\n        // release build fails because the zeroing got ignored and there are\n        // junk bytes past the NULL terminator, which get picked up in our\n        // 128-bit loads.)\n        //\n\n        Mask = _bzhi_u32(_mm_movemask_epi8(Compare.CharsXmm), SearchLength);\n\n        //\n        // Count how many characters matched.\n        //\n\n        CharactersMatched = __popcnt(Mask);\n\n        if ((USHORT)CharactersMatched == 16 && Length &gt; 16) {\n\n            //\n            // The first 16 characters in the string matched against this\n            // slot, and the slot is oversized (longer than 16 characters),\n            // so do a direct comparison between the remaining buffers.\n            //\n\n            TargetString = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n            CharactersMatched = IsPrefixMatch(String, TargetString, 16);\n\n            if (CharactersMatched == NO_MATCH_FOUND) {\n\n                //\n                // The prefix match failed, continue our search.\n                //\n\n                continue;\n\n            } else {\n\n                //\n                // We successfully prefix matched the search string against\n                // this slot.  The code immediately following us deals with\n                // handling a successful prefix match at the initial slot\n                // level; let's avoid an unnecessary branch and just jump\n                // directly into it.\n                //\n\n                goto FoundMatch;\n            }\n        }\n\n        if ((USHORT)CharactersMatched == Length) {\n\nFoundMatch:\n\n            //\n            // This slot is a prefix match.  Fill out the Match structure if the\n            // caller provided a non-NULL pointer, then return the index of the\n            // match.\n            //\n\n\n            if (ARGUMENT_PRESENT(Match)) {\n\n                Match-&gt;Index = (BYTE)Index;\n                Match-&gt;NumberOfMatchedCharacters = (BYTE)CharactersMatched;\n                Match-&gt;String = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n            }\n\n            return (STRING_TABLE_INDEX)Index;\n        }\n\n        //\n        // Not enough characters matched, so continue the loop.\n        //\n\n    } while (--Count);\n\n    //\n    // If we get here, we didn't find a match.\n    //\n\nNoMatch:\n\n    //IACA_VC_END();\n\n    return NO_MATCH_FOUND;\n}\n\n\n\n\n\nBenchmark 6\nVersion 6 should be faster than version 3; we omit alignment checks, all of our input buffers are aligned at 32 bytes, and an unaligned XMM load of an aligned buffer should definitely be faster than a __movsb(). Let’s see:\n\n\n\nBenchmark 6\n\n\nWe have a new winner! Version 3 had a good run, but it’s time to retire. Let’s tweak version 6 going forward.\n Narrator: this is actually testing _mm_loadu_si128() against the AlignmentCheck routine, which first calls PointerToOffsetCrossesPageBoundary(), and then checks the address alignment before calling _mm_load_si128(). Since unaligned loads are just as fast as aligned loads as long as the underlying buffer is aligned, all this shows is that it’s slightly faster to skip the pointer boundary and address alignment checks, which isn’t too surprising. \n\n\nIsPrefixOfStringInTable_7\n← IsPrefixOfStringInTable_6 | IsPrefixOfStringInTable_8 →\nVersion 7 tweaks version 6 a little bit. We don’t need the search string length calculated so early in the routine. Let’s move it to later.\n\nDiffFull\n\n\n% diff -u IsPrefixOfStringInTable_6.c IsPrefixOfStringInTable_7.c\n--- IsPrefixOfStringInTable_6.c 2018-04-15 22:35:55.450273700 -0400\n+++ IsPrefixOfStringInTable_7.c 2018-04-26 10:00:53.905933700 -0400\n@@ -18,7 +18,7 @@\n\n _Use_decl_annotations_\n STRING_TABLE_INDEX\n-IsPrefixOfStringInTable_6(\n+IsPrefixOfStringInTable_7(\n     PSTRING_TABLE StringTable,\n     PSTRING String,\n     PSTRING_MATCH Match\n@@ -31,9 +31,10 @@\n     search string.  That is, whether any string in the table \"starts with\n     or is equal to\" the search string.\n\n-    This routine differs from version 3 in that we do an aligned load of the\n-    search string buffer without any SEH wrappers or alignment checks.  (Thus,\n-    this routine will fault if the buffer is unaligned.)\n+    This routine is based off version 6, but alters when we calculate the\n+    \"search length\" for the given string, which is done via the expression\n+    'min(String-&gt;Length, 16)'.  We don't need this value until later in the\n+    routine, when we're ready to start comparing strings.\n\n Arguments:\n\n@@ -125,7 +126,6 @@\n     // Load the first 16-bytes of the search string into an XMM register.\n     //\n\n-    SearchLength = min(String-&gt;Length, 16);\n     Search.CharsXmm = _mm_loadu_si128((PXMMWORD)String-&gt;Buffer);\n\n     //\n@@ -213,6 +213,13 @@\n     }\n\n     //\n+    // Calculate the \"search length\" of the incoming string, which ensures we\n+    // only compare up to the first 16 characters.\n+    //\n+\n+    SearchLength = min(String-&gt;Length, 16);\n+\n+    //\n     // A popcount against the mask will tell us how many slots we matched, and\n     // thus, need to compare.\n     //\n\n\n_Use_decl_annotations_\nSTRING_TABLE_INDEX\nIsPrefixOfStringInTable_7(\n    PSTRING_TABLE StringTable,\n    PSTRING String,\n    PSTRING_MATCH Match\n    )\n/*++\n\nRoutine Description:\n\n    Searches a string table to see if any strings \"prefix match\" the given\n    search string.  That is, whether any string in the table \"starts with\n    or is equal to\" the search string.\n\n    This routine is based off version 6, but alters when we calculate the\n    \"search length\" for the given string, which is done via the expression\n    'min(String-&gt;Length, 16)'.  We don't need this value until later in the\n    routine, when we're ready to start comparing strings.\n\nArguments:\n\n    StringTable - Supplies a pointer to a STRING_TABLE struct.\n\n    String - Supplies a pointer to a STRING struct that contains the string to\n        search for.\n\n    Match - Optionally supplies a pointer to a variable that contains the\n        address of a STRING_MATCH structure.  This will be populated with\n        additional details about the match if a non-NULL pointer is supplied.\n\nReturn Value:\n\n    Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n\n--*/\n{\n    ULONG Bitmap;\n    ULONG Mask;\n    ULONG Count;\n    ULONG Length;\n    ULONG Index;\n    ULONG Shift = 0;\n    ULONG CharactersMatched;\n    ULONG NumberOfTrailingZeros;\n    ULONG SearchLength;\n    PSTRING TargetString;\n    PSTRING_ARRAY StringArray;\n    STRING_SLOT Slot;\n    STRING_SLOT Search;\n    STRING_SLOT Compare;\n    SLOT_LENGTHS Lengths;\n    XMMWORD LengthXmm;\n    XMMWORD UniqueChar;\n    XMMWORD TableUniqueChars;\n    XMMWORD IncludeSlotsByUniqueChar;\n    XMMWORD IgnoreSlotsByLength;\n    XMMWORD IncludeSlotsByLength;\n    XMMWORD IncludeSlots;\n    const XMMWORD AllOnesXmm = _mm_set1_epi8(0xff);\n\n    StringArray = StringTable-&gt;pStringArray;\n\n    //\n    // If the minimum length of the string array is greater than the length of\n    // our search string, there can't be a prefix match.\n    //\n\n    if (StringArray-&gt;MinimumLength &gt; String-&gt;Length) {\n        goto NoMatch;\n    }\n\n    //\n    // Unconditionally do the following five operations before checking any of\n    // the results and determining how the search should proceed:\n    //\n    //  1. Load the search string into an Xmm register, and broadcast the\n    //     character indicated by the unique character index (relative to\n    //     other strings in the table) across a second Xmm register.\n    //\n    //  2. Load the string table's unique character array into an Xmm register.\n    //\n    //  3. Broadcast the search string's length into an XMM register.\n    //\n    //  3. Load the string table's slot lengths array into an XMM register.\n    //\n    //  4. Compare the unique character from step 1 to the string table's unique\n    //     character array set up in step 2.  The result of this comparison\n    //     will produce an XMM register with each byte set to either 0xff if\n    //     the unique character was found, or 0x0 if it wasn't.\n    //\n    //  5. Compare the search string's length from step 3 to the string table's\n    //     slot length array set up in step 3.  This allows us to identify the\n    //     slots that have strings that are of lesser or equal length to our\n    //     search string.  As we're doing a prefix search, we can ignore any\n    //     slots longer than our incoming search string.\n    //\n    // We do all five of these operations up front regardless of whether or not\n    // they're strictly necessary.  That is, if the unique character isn't in\n    // the unique character array, we don't need to load array lengths -- and\n    // vice versa.  However, we assume the benefits afforded by giving the CPU\n    // a bunch of independent things to do unconditionally up-front outweigh\n    // the cost of putting in branches and conditionally loading things if\n    // necessary.\n    //\n\n    //\n    // Load the first 16-bytes of the search string into an XMM register.\n    //\n\n    Search.CharsXmm = _mm_loadu_si128((PXMMWORD)String-&gt;Buffer);\n\n    //\n    // Broadcast the search string's unique characters according to the string\n    // table's unique character index.\n    //\n\n    UniqueChar = _mm_shuffle_epi8(Search.CharsXmm,\n                                  StringTable-&gt;UniqueIndex.IndexXmm);\n\n    //\n    // Load the slot length array into an XMM register.\n    //\n\n    Lengths.SlotsXmm = _mm_load_si128(&StringTable-&gt;Lengths.SlotsXmm);\n\n    //\n    // Load the string table's unique character array into an XMM register.\n    //\n\n    TableUniqueChars = _mm_load_si128(&StringTable-&gt;UniqueChars.CharsXmm);\n\n    //\n    // Broadcast the search string's length into an XMM register.\n    //\n\n    LengthXmm.m128i_u8[0] = (BYTE)String-&gt;Length;\n    LengthXmm = _mm_broadcastb_epi8(LengthXmm);\n\n    //\n    // Compare the search string's unique character with all of the unique\n    // characters of strings in the table, saving the results into an XMM\n    // register.  This comparison will indicate which slots we can ignore\n    // because the characters at a given index don't match.  Matched slots\n    // will be 0xff, unmatched slots will be 0x0.\n    //\n\n    IncludeSlotsByUniqueChar = _mm_cmpeq_epi8(UniqueChar, TableUniqueChars);\n\n    //\n    // Find all slots that are longer than the incoming string length, as these\n    // are the ones we're going to exclude from any prefix match.\n    //\n    // N.B. Because we default the length of empty slots to 0x7f, they will\n    //      handily be included in the ignored set (i.e. their words will also\n    //      be set to 0xff), which means they'll also get filtered out when\n    //      we invert the mask shortly after.\n    //\n\n    IgnoreSlotsByLength = _mm_cmpgt_epi8(Lengths.SlotsXmm, LengthXmm);\n\n    //\n    // Invert the result of the comparison; we want 0xff for slots to include\n    // and 0x0 for slots to ignore (it's currently the other way around).  We\n    // can achieve this by XOR'ing the result against our all-ones XMM register.\n    //\n\n    IncludeSlotsByLength = _mm_xor_si128(IgnoreSlotsByLength, AllOnesXmm);\n\n    //\n    // We're now ready to intersect the two XMM registers to determine which\n    // slots should still be included in the comparison (i.e. which slots have\n    // the exact same unique character as the string and a length less than or\n    // equal to the length of the search string).\n    //\n\n    IncludeSlots = _mm_and_si128(IncludeSlotsByUniqueChar,\n                                 IncludeSlotsByLength);\n\n    //\n    // Generate a mask.\n    //\n\n    Bitmap = _mm_movemask_epi8(IncludeSlots);\n\n    if (!Bitmap) {\n\n        //\n        // No bits were set, so there are no strings in this table starting\n        // with the same character and of a lesser or equal length as the\n        // search string.\n        //\n\n        goto NoMatch;\n    }\n\n    //\n    // Calculate the \"search length\" of the incoming string, which ensures we\n    // only compare up to the first 16 characters.\n    //\n\n    SearchLength = min(String-&gt;Length, 16);\n\n    //\n    // A popcount against the mask will tell us how many slots we matched, and\n    // thus, need to compare.\n    //\n\n    Count = __popcnt(Bitmap);\n\n    do {\n\n        //\n        // Extract the next index by counting the number of trailing zeros left\n        // in the bitmap and adding the amount we've already shifted by.\n        //\n\n        NumberOfTrailingZeros = _tzcnt_u32(Bitmap);\n        Index = NumberOfTrailingZeros + Shift;\n\n        //\n        // Shift the bitmap right, past the zeros and the 1 that was just found,\n        // such that it's positioned correctly for the next loop's tzcnt. Update\n        // the shift count accordingly.\n        //\n\n        Bitmap &gt;&gt;= (NumberOfTrailingZeros + 1);\n        Shift = Index + 1;\n\n        //\n        // Load the slot and its length.\n        //\n\n        Slot.CharsXmm = _mm_load_si128(&StringTable-&gt;Slots[Index].CharsXmm);\n        Length = Lengths.Slots[Index];\n\n        //\n        // Compare the slot to the search string.\n        //\n\n        Compare.CharsXmm = _mm_cmpeq_epi8(Slot.CharsXmm, Search.CharsXmm);\n\n        //\n        // Create a mask of the comparison, then filter out high bits from the\n        // search string's length (which is capped at 16).  (This shouldn't be\n        // technically necessary as the string array buffers should have been\n        // calloc'd and zeroed, but optimizing compilers can often ignore the\n        // zeroing request -- which can produce some bizarre results where the\n        // debug build is correct (because the buffers were zeroed) but the\n        // release build fails because the zeroing got ignored and there are\n        // junk bytes past the NULL terminator, which get picked up in our\n        // 128-bit loads.)\n        //\n\n        Mask = _bzhi_u32(_mm_movemask_epi8(Compare.CharsXmm), SearchLength);\n\n        //\n        // Count how many characters matched.\n        //\n\n        CharactersMatched = __popcnt(Mask);\n\n        if ((USHORT)CharactersMatched == 16 && Length &gt; 16) {\n\n            //\n            // The first 16 characters in the string matched against this\n            // slot, and the slot is oversized (longer than 16 characters),\n            // so do a direct comparison between the remaining buffers.\n            //\n\n            TargetString = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n            CharactersMatched = IsPrefixMatch(String, TargetString, 16);\n\n            if (CharactersMatched == NO_MATCH_FOUND) {\n\n                //\n                // The prefix match failed, continue our search.\n                //\n\n                continue;\n\n            } else {\n\n                //\n                // We successfully prefix matched the search string against\n                // this slot.  The code immediately following us deals with\n                // handling a successful prefix match at the initial slot\n                // level; let's avoid an unnecessary branch and just jump\n                // directly into it.\n                //\n\n                goto FoundMatch;\n            }\n        }\n\n        if ((USHORT)CharactersMatched == Length) {\n\nFoundMatch:\n\n            //\n            // This slot is a prefix match.  Fill out the Match structure if the\n            // caller provided a non-NULL pointer, then return the index of the\n            // match.\n            //\n\n\n            if (ARGUMENT_PRESENT(Match)) {\n\n                Match-&gt;Index = (BYTE)Index;\n                Match-&gt;NumberOfMatchedCharacters = (BYTE)CharactersMatched;\n                Match-&gt;String = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n            }\n\n            return (STRING_TABLE_INDEX)Index;\n        }\n\n        //\n        // Not enough characters matched, so continue the loop.\n        //\n\n    } while (--Count);\n\n    //\n    // If we get here, we didn't find a match.\n    //\n\nNoMatch:\n\n    //IACA_VC_END();\n\n    return NO_MATCH_FOUND;\n}\n\n\n\nThis is a tiny change; if it shows any performance difference, it should lean towards a positive change, although it’s possible the compiler deferred scheduling until after the initial negative match logic since the expression wasn’t used immediately. Let’s see.\n\n\nBenchmark 7\n\n\n\nBenchmark 7\n\n\nTiny change, tiny performance improvement! Looks like this saves a couple of cycles, thus ending the short-lived reign of version 6.\n\n\nIsPrefixOfStringInTable_8\n← IsPrefixOfStringInTable_7 | IsPrefixOfStringInTable_9 →\nVersion 8 is based off version 7, but omits the initial length test. Again, it’s another small change, but if version 5 was anything to go off, the less branches, the better.\n\nDiffFull\n\n\n\n% diff -u IsPrefixOfStringInTable_7.c IsPrefixOfStringInTable_8.c\n--- IsPrefixOfStringInTable_7.c 2018-04-26 10:21:43.253466500 -0400\n+++ IsPrefixOfStringInTable_8.c 2018-04-26 10:21:27.109761800 -0400\n@@ -18,7 +18,7 @@\n\n _Use_decl_annotations_\n STRING_TABLE_INDEX\n-IsPrefixOfStringInTable_7(\n+IsPrefixOfStringInTable_8(\n     PSTRING_TABLE StringTable,\n     PSTRING String,\n     PSTRING_MATCH Match\n@@ -31,10 +31,8 @@\n     search string.  That is, whether any string in the table \"starts with\n     or is equal to\" the search string.\n\n-    This routine is based off version 6, but alters when we calculate the\n-    \"search length\" for the given string, which is done via the expression\n-    'min(String-&gt;Length, 16)'.  We don't need this value until later in the\n-    routine, when we're ready to start comparing strings.\n+    This routine is based off version 7, but omits the initial minimum\n+    length test of the string array.\n\n Arguments:\n\n@@ -63,7 +61,6 @@\n     ULONG NumberOfTrailingZeros;\n     ULONG SearchLength;\n     PSTRING TargetString;\n-    PSTRING_ARRAY StringArray;\n     STRING_SLOT Slot;\n     STRING_SLOT Search;\n     STRING_SLOT Compare;\n@@ -77,17 +74,6 @@\n     XMMWORD IncludeSlots;\n     const XMMWORD AllOnesXmm = _mm_set1_epi8(0xff);\n\n-    StringArray = StringTable-&gt;pStringArray;\n-\n-    //\n-    // If the minimum length of the string array is greater than the length of\n-    // our search string, there can't be a prefix match.\n-    //\n-\n-    if (StringArray-&gt;MinimumLength &gt; String-&gt;Length) {\n-        goto NoMatch;\n-    }\n-\n     //\n     // Unconditionally do the following five operations before checking any of\n     // the results and determining how the search should proceed:\n\n\n_Use_decl_annotations_\nSTRING_TABLE_INDEX\nIsPrefixOfStringInTable_8(\n    PSTRING_TABLE StringTable,\n    PSTRING String,\n    PSTRING_MATCH Match\n    )\n/*++\n\nRoutine Description:\n\n    Searches a string table to see if any strings \"prefix match\" the given\n    search string.  That is, whether any string in the table \"starts with\n    or is equal to\" the search string.\n\n    This routine is based off version 7, but omits the initial minimum\n    length test of the string array.\n\nArguments:\n\n    StringTable - Supplies a pointer to a STRING_TABLE struct.\n\n    String - Supplies a pointer to a STRING struct that contains the string to\n        search for.\n\n    Match - Optionally supplies a pointer to a variable that contains the\n        address of a STRING_MATCH structure.  This will be populated with\n        additional details about the match if a non-NULL pointer is supplied.\n\nReturn Value:\n\n    Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n\n--*/\n{\n    ULONG Bitmap;\n    ULONG Mask;\n    ULONG Count;\n    ULONG Length;\n    ULONG Index;\n    ULONG Shift = 0;\n    ULONG CharactersMatched;\n    ULONG NumberOfTrailingZeros;\n    ULONG SearchLength;\n    PSTRING TargetString;\n    STRING_SLOT Slot;\n    STRING_SLOT Search;\n    STRING_SLOT Compare;\n    SLOT_LENGTHS Lengths;\n    XMMWORD LengthXmm;\n    XMMWORD UniqueChar;\n    XMMWORD TableUniqueChars;\n    XMMWORD IncludeSlotsByUniqueChar;\n    XMMWORD IgnoreSlotsByLength;\n    XMMWORD IncludeSlotsByLength;\n    XMMWORD IncludeSlots;\n    const XMMWORD AllOnesXmm = _mm_set1_epi8(0xff);\n\n    //\n    // Unconditionally do the following five operations before checking any of\n    // the results and determining how the search should proceed:\n    //\n    //  1. Load the search string into an Xmm register, and broadcast the\n    //     character indicated by the unique character index (relative to\n    //     other strings in the table) across a second Xmm register.\n    //\n    //  2. Load the string table's unique character array into an Xmm register.\n    //\n    //  3. Broadcast the search string's length into an XMM register.\n    //\n    //  3. Load the string table's slot lengths array into an XMM register.\n    //\n    //  4. Compare the unique character from step 1 to the string table's unique\n    //     character array set up in step 2.  The result of this comparison\n    //     will produce an XMM register with each byte set to either 0xff if\n    //     the unique character was found, or 0x0 if it wasn't.\n    //\n    //  5. Compare the search string's length from step 3 to the string table's\n    //     slot length array set up in step 3.  This allows us to identify the\n    //     slots that have strings that are of lesser or equal length to our\n    //     search string.  As we're doing a prefix search, we can ignore any\n    //     slots longer than our incoming search string.\n    //\n    // We do all five of these operations up front regardless of whether or not\n    // they're strictly necessary.  That is, if the unique character isn't in\n    // the unique character array, we don't need to load array lengths -- and\n    // vice versa.  However, we assume the benefits afforded by giving the CPU\n    // a bunch of independent things to do unconditionally up-front outweigh\n    // the cost of putting in branches and conditionally loading things if\n    // necessary.\n    //\n\n    //\n    // Load the first 16-bytes of the search string into an XMM register.\n    //\n\n    Search.CharsXmm = _mm_loadu_si128((PXMMWORD)String-&gt;Buffer);\n\n    //\n    // Broadcast the search string's unique characters according to the string\n    // table's unique character index.\n    //\n\n    UniqueChar = _mm_shuffle_epi8(Search.CharsXmm,\n                                  StringTable-&gt;UniqueIndex.IndexXmm);\n\n    //\n    // Load the slot length array into an XMM register.\n    //\n\n    Lengths.SlotsXmm = _mm_load_si128(&StringTable-&gt;Lengths.SlotsXmm);\n\n    //\n    // Load the string table's unique character array into an XMM register.\n    //\n\n    TableUniqueChars = _mm_load_si128(&StringTable-&gt;UniqueChars.CharsXmm);\n\n    //\n    // Broadcast the search string's length into an XMM register.\n    //\n\n    LengthXmm.m128i_u8[0] = (BYTE)String-&gt;Length;\n    LengthXmm = _mm_broadcastb_epi8(LengthXmm);\n\n    //\n    // Compare the search string's unique character with all of the unique\n    // characters of strings in the table, saving the results into an XMM\n    // register.  This comparison will indicate which slots we can ignore\n    // because the characters at a given index don't match.  Matched slots\n    // will be 0xff, unmatched slots will be 0x0.\n    //\n\n    IncludeSlotsByUniqueChar = _mm_cmpeq_epi8(UniqueChar, TableUniqueChars);\n\n    //\n    // Find all slots that are longer than the incoming string length, as these\n    // are the ones we're going to exclude from any prefix match.\n    //\n    // N.B. Because we default the length of empty slots to 0x7f, they will\n    //      handily be included in the ignored set (i.e. their words will also\n    //      be set to 0xff), which means they'll also get filtered out when\n    //      we invert the mask shortly after.\n    //\n\n    IgnoreSlotsByLength = _mm_cmpgt_epi8(Lengths.SlotsXmm, LengthXmm);\n\n    //\n    // Invert the result of the comparison; we want 0xff for slots to include\n    // and 0x0 for slots to ignore (it's currently the other way around).  We\n    // can achieve this by XOR'ing the result against our all-ones XMM register.\n    //\n\n    IncludeSlotsByLength = _mm_xor_si128(IgnoreSlotsByLength, AllOnesXmm);\n\n    //\n    // We're now ready to intersect the two XMM registers to determine which\n    // slots should still be included in the comparison (i.e. which slots have\n    // the exact same unique character as the string and a length less than or\n    // equal to the length of the search string).\n    //\n\n    IncludeSlots = _mm_and_si128(IncludeSlotsByUniqueChar,\n                                 IncludeSlotsByLength);\n\n    //\n    // Generate a mask.\n    //\n\n    Bitmap = _mm_movemask_epi8(IncludeSlots);\n\n    if (!Bitmap) {\n\n        //\n        // No bits were set, so there are no strings in this table starting\n        // with the same character and of a lesser or equal length as the\n        // search string.\n        //\n\n        goto NoMatch;\n    }\n\n    //\n    // Calculate the \"search length\" of the incoming string, which ensures we\n    // only compare up to the first 16 characters.\n    //\n\n    SearchLength = min(String-&gt;Length, 16);\n\n    //\n    // A popcount against the mask will tell us how many slots we matched, and\n    // thus, need to compare.\n    //\n\n    Count = __popcnt(Bitmap);\n\n    do {\n\n        //\n        // Extract the next index by counting the number of trailing zeros left\n        // in the bitmap and adding the amount we've already shifted by.\n        //\n\n        NumberOfTrailingZeros = _tzcnt_u32(Bitmap);\n        Index = NumberOfTrailingZeros + Shift;\n\n        //\n        // Shift the bitmap right, past the zeros and the 1 that was just found,\n        // such that it's positioned correctly for the next loop's tzcnt. Update\n        // the shift count accordingly.\n        //\n\n        Bitmap &gt;&gt;= (NumberOfTrailingZeros + 1);\n        Shift = Index + 1;\n\n        //\n        // Load the slot and its length.\n        //\n\n        Slot.CharsXmm = _mm_load_si128(&StringTable-&gt;Slots[Index].CharsXmm);\n        Length = Lengths.Slots[Index];\n\n        //\n        // Compare the slot to the search string.\n        //\n\n        Compare.CharsXmm = _mm_cmpeq_epi8(Slot.CharsXmm, Search.CharsXmm);\n\n        //\n        // Create a mask of the comparison, then filter out high bits from the\n        // search string's length (which is capped at 16).  (This shouldn't be\n        // technically necessary as the string array buffers should have been\n        // calloc'd and zeroed, but optimizing compilers can often ignore the\n        // zeroing request -- which can produce some bizarre results where the\n        // debug build is correct (because the buffers were zeroed) but the\n        // release build fails because the zeroing got ignored and there are\n        // junk bytes past the NULL terminator, which get picked up in our\n        // 128-bit loads.)\n        //\n\n        Mask = _bzhi_u32(_mm_movemask_epi8(Compare.CharsXmm), SearchLength);\n\n        //\n        // Count how many characters matched.\n        //\n\n        CharactersMatched = __popcnt(Mask);\n\n        if ((USHORT)CharactersMatched == 16 && Length &gt; 16) {\n\n            //\n            // The first 16 characters in the string matched against this\n            // slot, and the slot is oversized (longer than 16 characters),\n            // so do a direct comparison between the remaining buffers.\n            //\n\n            TargetString = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n            CharactersMatched = IsPrefixMatch(String, TargetString, 16);\n\n            if (CharactersMatched == NO_MATCH_FOUND) {\n\n                //\n                // The prefix match failed, continue our search.\n                //\n\n                continue;\n\n            } else {\n\n                //\n                // We successfully prefix matched the search string against\n                // this slot.  The code immediately following us deals with\n                // handling a successful prefix match at the initial slot\n                // level; let's avoid an unnecessary branch and just jump\n                // directly into it.\n                //\n\n                goto FoundMatch;\n            }\n        }\n\n        if ((USHORT)CharactersMatched == Length) {\n\nFoundMatch:\n\n            //\n            // This slot is a prefix match.  Fill out the Match structure if the\n            // caller provided a non-NULL pointer, then return the index of the\n            // match.\n            //\n\n\n            if (ARGUMENT_PRESENT(Match)) {\n\n                Match-&gt;Index = (BYTE)Index;\n                Match-&gt;NumberOfMatchedCharacters = (BYTE)CharactersMatched;\n                Match-&gt;String = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n            }\n\n            return (STRING_TABLE_INDEX)Index;\n        }\n\n        //\n        // Not enough characters matched, so continue the loop.\n        //\n\n    } while (--Count);\n\n    //\n    // If we get here, we didn't find a match.\n    //\n\nNoMatch:\n\n    //IACA_VC_END();\n\n    return NO_MATCH_FOUND;\n}\n\n\n\n\n\nBenchmark 8\n\n\n\nBenchmark 8\n\n\nHey, look at that, another win across the board! Omitting the length test shaves off a few more cycles for both prefix and negative matching. Version 7’s one-round reign has come to a timely end.\n\n\nIsPrefixOfStringInTable_9\n← IsPrefixOfStringInTable_8 | IsPrefixOfStringInTable_10 →\nVersion 9 tweaks version 8 by simply using return NO_MATCH_FOUND after the initial bitmap check instead of goto NoMatch. (The use of goto was a bit peculiar there anyway. We’re going to rewrite the body similarly for version 10, but let’s try to stick to making one change at a time.)\n\nDiffFull\n\n\n--- IsPrefixOfStringInTable_8.c 2018-04-26 10:30:52.337935400 -0400\n+++ IsPrefixOfStringInTable_9.c 2018-04-26 10:32:04.986734400 -0400\n@@ -18,7 +18,7 @@\n\n _Use_decl_annotations_\n STRING_TABLE_INDEX\n-IsPrefixOfStringInTable_8(\n+IsPrefixOfStringInTable_9(\n     PSTRING_TABLE StringTable,\n     PSTRING String,\n     PSTRING_MATCH Match\n@@ -31,8 +31,8 @@\n     search string.  That is, whether any string in the table \"starts with\n     or is equal to\" the search string.\n\n-    This routine is based off version 7, but omits the initial minimum\n-    length test of the string array.\n+    This is a tweaked version of version 8 that does 'return NO_MATCH_FOUND'\n+    after the initial bitmap check versus 'goto NoMatch'.\n\n Arguments:\n\n@@ -195,7 +195,7 @@\n         // search string.\n         //\n\n-        goto NoMatch;\n+        return NO_MATCH_FOUND;\n     }\n\n     //\n@@ -330,8 +330,6 @@\n     // If we get here, we didn't find a match.\n     //\n\n-NoMatch:\n-\n     //IACA_VC_END();\n\n     return NO_MATCH_FOUND;\n\n\n_Use_decl_annotations_\nSTRING_TABLE_INDEX\nIsPrefixOfStringInTable_9(\n    PSTRING_TABLE StringTable,\n    PSTRING String,\n    PSTRING_MATCH Match\n    )\n/*++\n\nRoutine Description:\n\n    Searches a string table to see if any strings \"prefix match\" the given\n    search string.  That is, whether any string in the table \"starts with\n    or is equal to\" the search string.\n\n    This is a tweaked version of version 9 that does 'return NO_MATCH_FOUND'\n    after the initial bitmap check versus 'goto NoMatch'.\n\nArguments:\n\n    StringTable - Supplies a pointer to a STRING_TABLE struct.\n\n    String - Supplies a pointer to a STRING struct that contains the string to\n        search for.\n\n    Match - Optionally supplies a pointer to a variable that contains the\n        address of a STRING_MATCH structure.  This will be populated with\n        additional details about the match if a non-NULL pointer is supplied.\n\nReturn Value:\n\n    Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n\n--*/\n{\n    ULONG Bitmap;\n    ULONG Mask;\n    ULONG Count;\n    ULONG Length;\n    ULONG Index;\n    ULONG Shift = 0;\n    ULONG CharactersMatched;\n    ULONG NumberOfTrailingZeros;\n    ULONG SearchLength;\n    PSTRING TargetString;\n    STRING_SLOT Slot;\n    STRING_SLOT Search;\n    STRING_SLOT Compare;\n    SLOT_LENGTHS Lengths;\n    XMMWORD LengthXmm;\n    XMMWORD UniqueChar;\n    XMMWORD TableUniqueChars;\n    XMMWORD IncludeSlotsByUniqueChar;\n    XMMWORD IgnoreSlotsByLength;\n    XMMWORD IncludeSlotsByLength;\n    XMMWORD IncludeSlots;\n    const XMMWORD AllOnesXmm = _mm_set1_epi8(0xff);\n\n    //\n    // Unconditionally do the following five operations before checking any of\n    // the results and determining how the search should proceed:\n    //\n    //  1. Load the search string into an Xmm register, and broadcast the\n    //     character indicated by the unique character index (relative to\n    //     other strings in the table) across a second Xmm register.\n    //\n    //  2. Load the string table's unique character array into an Xmm register.\n    //\n    //  3. Broadcast the search string's length into an XMM register.\n    //\n    //  3. Load the string table's slot lengths array into an XMM register.\n    //\n    //  4. Compare the unique character from step 1 to the string table's unique\n    //     character array set up in step 2.  The result of this comparison\n    //     will produce an XMM register with each byte set to either 0xff if\n    //     the unique character was found, or 0x0 if it wasn't.\n    //\n    //  5. Compare the search string's length from step 3 to the string table's\n    //     slot length array set up in step 3.  This allows us to identify the\n    //     slots that have strings that are of lesser or equal length to our\n    //     search string.  As we're doing a prefix search, we can ignore any\n    //     slots longer than our incoming search string.\n    //\n    // We do all five of these operations up front regardless of whether or not\n    // they're strictly necessary.  That is, if the unique character isn't in\n    // the unique character array, we don't need to load array lengths -- and\n    // vice versa.  However, we assume the benefits afforded by giving the CPU\n    // a bunch of independent things to do unconditionally up-front outweigh\n    // the cost of putting in branches and conditionally loading things if\n    // necessary.\n    //\n\n    //\n    // Load the first 16-bytes of the search string into an XMM register.\n    //\n\n    Search.CharsXmm = _mm_loadu_si128((PXMMWORD)String-&gt;Buffer);\n\n    //\n    // Broadcast the search string's unique characters according to the string\n    // table's unique character index.\n    //\n\n    UniqueChar = _mm_shuffle_epi8(Search.CharsXmm,\n                                  StringTable-&gt;UniqueIndex.IndexXmm);\n\n    //\n    // Load the slot length array into an XMM register.\n    //\n\n    Lengths.SlotsXmm = _mm_load_si128(&StringTable-&gt;Lengths.SlotsXmm);\n\n    //\n    // Load the string table's unique character array into an XMM register.\n    //\n\n    TableUniqueChars = _mm_load_si128(&StringTable-&gt;UniqueChars.CharsXmm);\n\n    //\n    // Broadcast the search string's length into an XMM register.\n    //\n\n    LengthXmm.m128i_u8[0] = (BYTE)String-&gt;Length;\n    LengthXmm = _mm_broadcastb_epi8(LengthXmm);\n\n    //\n    // Compare the search string's unique character with all of the unique\n    // characters of strings in the table, saving the results into an XMM\n    // register.  This comparison will indicate which slots we can ignore\n    // because the characters at a given index don't match.  Matched slots\n    // will be 0xff, unmatched slots will be 0x0.\n    //\n\n    IncludeSlotsByUniqueChar = _mm_cmpeq_epi8(UniqueChar, TableUniqueChars);\n\n    //\n    // Find all slots that are longer than the incoming string length, as these\n    // are the ones we're going to exclude from any prefix match.\n    //\n    // N.B. Because we default the length of empty slots to 0x7f, they will\n    //      handily be included in the ignored set (i.e. their words will also\n    //      be set to 0xff), which means they'll also get filtered out when\n    //      we invert the mask shortly after.\n    //\n\n    IgnoreSlotsByLength = _mm_cmpgt_epi8(Lengths.SlotsXmm, LengthXmm);\n\n    //\n    // Invert the result of the comparison; we want 0xff for slots to include\n    // and 0x0 for slots to ignore (it's currently the other way around).  We\n    // can achieve this by XOR'ing the result against our all-ones XMM register.\n    //\n\n    IncludeSlotsByLength = _mm_xor_si128(IgnoreSlotsByLength, AllOnesXmm);\n\n    //\n    // We're now ready to intersect the two XMM registers to determine which\n    // slots should still be included in the comparison (i.e. which slots have\n    // the exact same unique character as the string and a length less than or\n    // equal to the length of the search string).\n    //\n\n    IncludeSlots = _mm_and_si128(IncludeSlotsByUniqueChar,\n                                 IncludeSlotsByLength);\n\n    //\n    // Generate a mask.\n    //\n\n    Bitmap = _mm_movemask_epi8(IncludeSlots);\n\n    if (!Bitmap) {\n\n        //\n        // No bits were set, so there are no strings in this table starting\n        // with the same character and of a lesser or equal length as the\n        // search string.\n        //\n\n        return NO_MATCH_FOUND;\n    }\n\n    //\n    // Calculate the \"search length\" of the incoming string, which ensures we\n    // only compare up to the first 16 characters.\n    //\n\n    SearchLength = min(String-&gt;Length, 16);\n\n    //\n    // A popcount against the mask will tell us how many slots we matched, and\n    // thus, need to compare.\n    //\n\n    Count = __popcnt(Bitmap);\n\n    do {\n\n        //\n        // Extract the next index by counting the number of trailing zeros left\n        // in the bitmap and adding the amount we've already shifted by.\n        //\n\n        NumberOfTrailingZeros = _tzcnt_u32(Bitmap);\n        Index = NumberOfTrailingZeros + Shift;\n\n        //\n        // Shift the bitmap right, past the zeros and the 1 that was just found,\n        // such that it's positioned correctly for the next loop's tzcnt. Update\n        // the shift count accordingly.\n        //\n\n        Bitmap &gt;&gt;= (NumberOfTrailingZeros + 1);\n        Shift = Index + 1;\n\n        //\n        // Load the slot and its length.\n        //\n\n        Slot.CharsXmm = _mm_load_si128(&StringTable-&gt;Slots[Index].CharsXmm);\n        Length = Lengths.Slots[Index];\n\n        //\n        // Compare the slot to the search string.\n        //\n\n        Compare.CharsXmm = _mm_cmpeq_epi8(Slot.CharsXmm, Search.CharsXmm);\n\n        //\n        // Create a mask of the comparison, then filter out high bits from the\n        // search string's length (which is capped at 16).  (This shouldn't be\n        // technically necessary as the string array buffers should have been\n        // calloc'd and zeroed, but optimizing compilers can often ignore the\n        // zeroing request -- which can produce some bizarre results where the\n        // debug build is correct (because the buffers were zeroed) but the\n        // release build fails because the zeroing got ignored and there are\n        // junk bytes past the NULL terminator, which get picked up in our\n        // 128-bit loads.)\n        //\n\n        Mask = _bzhi_u32(_mm_movemask_epi8(Compare.CharsXmm), SearchLength);\n\n        //\n        // Count how many characters matched.\n        //\n\n        CharactersMatched = __popcnt(Mask);\n\n        if ((USHORT)CharactersMatched == 16 && Length &gt; 16) {\n\n            //\n            // The first 16 characters in the string matched against this\n            // slot, and the slot is oversized (longer than 16 characters),\n            // so do a direct comparison between the remaining buffers.\n            //\n\n            TargetString = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n            CharactersMatched = IsPrefixMatch(String, TargetString, 16);\n\n            if (CharactersMatched == NO_MATCH_FOUND) {\n\n                //\n                // The prefix match failed, continue our search.\n                //\n\n                continue;\n\n            } else {\n\n                //\n                // We successfully prefix matched the search string against\n                // this slot.  The code immediately following us deals with\n                // handling a successful prefix match at the initial slot\n                // level; let's avoid an unnecessary branch and just jump\n                // directly into it.\n                //\n\n                goto FoundMatch;\n            }\n        }\n\n        if ((USHORT)CharactersMatched == Length) {\n\nFoundMatch:\n\n            //\n            // This slot is a prefix match.  Fill out the Match structure if the\n            // caller provided a non-NULL pointer, then return the index of the\n            // match.\n            //\n\n\n            if (ARGUMENT_PRESENT(Match)) {\n\n                Match-&gt;Index = (BYTE)Index;\n                Match-&gt;NumberOfMatchedCharacters = (BYTE)CharactersMatched;\n                Match-&gt;String = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n            }\n\n            return (STRING_TABLE_INDEX)Index;\n        }\n\n        //\n        // Not enough characters matched, so continue the loop.\n        //\n\n    } while (--Count);\n\n    //\n    // If we get here, we didn't find a match.\n    //\n\n    //IACA_VC_END();\n\n    return NO_MATCH_FOUND;\n}\n\n\n\n\n\nBenchmark 9\n\n\n\nBenchmark 09\n\n\nThis is an interesting one. The return versus goto appears to have cost us a tiny bit with the first few test inputs—only about 0.2 more cycles, which is negligible in the grand scheme of things. (Though let’s not pull on that thread too much, or the entire premise of the article might start to unravel!)\nVersion 9 improves the negative match performance by a few cycles, so let’s keep it.\n\n\nIsPrefixOfStringInTable_10\n← IsPrefixOfStringInTable_9 | IsPrefixOfStringInTable_11 →\nAt this point, we’ve exhausted all the small, easy tweaks. Let’s rewrite the inner loop that performs the character comparison and see how that affects performance.\nThis should be an interesting one because the way it’s written now is… a bit odd. (I’ve clearly made some assumptions about optimal branch organization, to say the least.)\n\nDiffFull\n\n\n% diff -u IsPrefixOfStringInTable_9.c IsPrefixOfStringInTable_10.c\n--- IsPrefixOfStringInTable_9.c 2018-04-26 10:32:04.986734400 -0400\n+++ IsPrefixOfStringInTable_10.c        2018-04-26 10:38:09.357890400 -0400\n@@ -18,7 +18,7 @@\n\n _Use_decl_annotations_\n STRING_TABLE_INDEX\n-IsPrefixOfStringInTable_9(\n+IsPrefixOfStringInTable_10(\n     PSTRING_TABLE StringTable,\n     PSTRING String,\n     PSTRING_MATCH Match\n@@ -31,8 +31,8 @@\n     search string.  That is, whether any string in the table \"starts with\n     or is equal to\" the search string.\n\n-    This is a tweaked version of version 8 that does 'return NO_MATCH_FOUND'\n-    after the initial bitmap check versus 'goto NoMatch'.\n+    This version is based off version 9, but rewrites the inner loop that\n+    checks for comparisons.\n\n Arguments:\n\n@@ -264,7 +264,17 @@\n\n         CharactersMatched = __popcnt(Mask);\n\n-        if ((USHORT)CharactersMatched == 16 && Length &gt; 16) {\n+        if ((USHORT)CharactersMatched &lt; Length && Length &lt;= 16) {\n+\n+            //\n+            // The slot length is longer than the number of characters matched\n+            // from the search string; this isn't a prefix match.  Continue.\n+            //\n+\n+            continue;\n+        }\n+\n+        if (Length &gt; 16) {\n\n             //\n             // The first 16 characters in the string matched against this\n@@ -283,46 +293,24 @@\n                 //\n\n                 continue;\n-\n-            } else {\n-\n-                //\n-                // We successfully prefix matched the search string against\n-                // this slot.  The code immediately following us deals with\n-                // handling a successful prefix match at the initial slot\n-                // level; let's avoid an unnecessary branch and just jump\n-                // directly into it.\n-                //\n-\n-                goto FoundMatch;\n             }\n         }\n\n-        if ((USHORT)CharactersMatched == Length) {\n-\n-FoundMatch:\n-\n-            //\n-            // This slot is a prefix match.  Fill out the Match structure if the\n-            // caller provided a non-NULL pointer, then return the index of the\n-            // match.\n-            //\n-\n-\n-            if (ARGUMENT_PRESENT(Match)) {\n+        //\n+        // This slot is a prefix match.  Fill out the Match structure if the\n+        // caller provided a non-NULL pointer, then return the index of the\n+        // match.\n+        //\n\n-                Match-&gt;Index = (BYTE)Index;\n-                Match-&gt;NumberOfMatchedCharacters = (BYTE)CharactersMatched;\n-                Match-&gt;String = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n+        if (ARGUMENT_PRESENT(Match)) {\n\n-            }\n+            Match-&gt;Index = (BYTE)Index;\n+            Match-&gt;NumberOfMatchedCharacters = (BYTE)CharactersMatched;\n+            Match-&gt;String = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n-            return (STRING_TABLE_INDEX)Index;\n         }\n\n-        //\n-        // Not enough characters matched, so continue the loop.\n-        //\n+        return (STRING_TABLE_INDEX)Index;\n\n     } while (--Count);\n\n\n_Use_decl_annotations_\nSTRING_TABLE_INDEX\nIsPrefixOfStringInTable_10(\n    PSTRING_TABLE StringTable,\n    PSTRING String,\n    PSTRING_MATCH Match\n    )\n/*++\n\nRoutine Description:\n\n    Searches a string table to see if any strings \"prefix match\" the given\n    search string.  That is, whether any string in the table \"starts with\n    or is equal to\" the search string.\n\n    This version is based off version 8, but rewrites the inner loop that\n    checks for comparisons.\n\nArguments:\n\n    StringTable - Supplies a pointer to a STRING_TABLE struct.\n\n    String - Supplies a pointer to a STRING struct that contains the string to\n        search for.\n\n    Match - Optionally supplies a pointer to a variable that contains the\n        address of a STRING_MATCH structure.  This will be populated with\n        additional details about the match if a non-NULL pointer is supplied.\n\nReturn Value:\n\n    Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n\n--*/\n{\n    ULONG Bitmap;\n    ULONG Mask;\n    ULONG Count;\n    ULONG Length;\n    ULONG Index;\n    ULONG Shift = 0;\n    ULONG CharactersMatched;\n    ULONG NumberOfTrailingZeros;\n    ULONG SearchLength;\n    PSTRING TargetString;\n    STRING_SLOT Slot;\n    STRING_SLOT Search;\n    STRING_SLOT Compare;\n    SLOT_LENGTHS Lengths;\n    XMMWORD LengthXmm;\n    XMMWORD UniqueChar;\n    XMMWORD TableUniqueChars;\n    XMMWORD IncludeSlotsByUniqueChar;\n    XMMWORD IgnoreSlotsByLength;\n    XMMWORD IncludeSlotsByLength;\n    XMMWORD IncludeSlots;\n    const XMMWORD AllOnesXmm = _mm_set1_epi8(0xff);\n\n    //\n    // Unconditionally do the following five operations before checking any of\n    // the results and determining how the search should proceed:\n    //\n    //  1. Load the search string into an Xmm register, and broadcast the\n    //     character indicated by the unique character index (relative to\n    //     other strings in the table) across a second Xmm register.\n    //\n    //  2. Load the string table's unique character array into an Xmm register.\n    //\n    //  3. Broadcast the search string's length into an XMM register.\n    //\n    //  3. Load the string table's slot lengths array into an XMM register.\n    //\n    //  4. Compare the unique character from step 1 to the string table's unique\n    //     character array set up in step 2.  The result of this comparison\n    //     will produce an XMM register with each byte set to either 0xff if\n    //     the unique character was found, or 0x0 if it wasn't.\n    //\n    //  5. Compare the search string's length from step 3 to the string table's\n    //     slot length array set up in step 3.  This allows us to identify the\n    //     slots that have strings that are of lesser or equal length to our\n    //     search string.  As we're doing a prefix search, we can ignore any\n    //     slots longer than our incoming search string.\n    //\n    // We do all five of these operations up front regardless of whether or not\n    // they're strictly necessary.  That is, if the unique character isn't in\n    // the unique character array, we don't need to load array lengths -- and\n    // vice versa.  However, we assume the benefits afforded by giving the CPU\n    // a bunch of independent things to do unconditionally up-front outweigh\n    // the cost of putting in branches and conditionally loading things if\n    // necessary.\n    //\n\n    //\n    // Load the first 16-bytes of the search string into an XMM register.\n    //\n\n    Search.CharsXmm = _mm_loadu_si128((PXMMWORD)String-&gt;Buffer);\n\n    //\n    // Broadcast the search string's unique characters according to the string\n    // table's unique character index.\n    //\n\n    UniqueChar = _mm_shuffle_epi8(Search.CharsXmm,\n                                  StringTable-&gt;UniqueIndex.IndexXmm);\n\n    //\n    // Load the slot length array into an XMM register.\n    //\n\n    Lengths.SlotsXmm = _mm_load_si128(&StringTable-&gt;Lengths.SlotsXmm);\n\n    //\n    // Load the string table's unique character array into an XMM register.\n    //\n\n    TableUniqueChars = _mm_load_si128(&StringTable-&gt;UniqueChars.CharsXmm);\n\n    //\n    // Broadcast the search string's length into an XMM register.\n    //\n\n    LengthXmm.m128i_u8[0] = (BYTE)String-&gt;Length;\n    LengthXmm = _mm_broadcastb_epi8(LengthXmm);\n\n    //\n    // Compare the search string's unique character with all of the unique\n    // characters of strings in the table, saving the results into an XMM\n    // register.  This comparison will indicate which slots we can ignore\n    // because the characters at a given index don't match.  Matched slots\n    // will be 0xff, unmatched slots will be 0x0.\n    //\n\n    IncludeSlotsByUniqueChar = _mm_cmpeq_epi8(UniqueChar, TableUniqueChars);\n\n    //\n    // Find all slots that are longer than the incoming string length, as these\n    // are the ones we're going to exclude from any prefix match.\n    //\n    // N.B. Because we default the length of empty slots to 0x7f, they will\n    //      handily be included in the ignored set (i.e. their words will also\n    //      be set to 0xff), which means they'll also get filtered out when\n    //      we invert the mask shortly after.\n    //\n\n    IgnoreSlotsByLength = _mm_cmpgt_epi8(Lengths.SlotsXmm, LengthXmm);\n\n    //\n    // Invert the result of the comparison; we want 0xff for slots to include\n    // and 0x0 for slots to ignore (it's currently the other way around).  We\n    // can achieve this by XOR'ing the result against our all-ones XMM register.\n    //\n\n    IncludeSlotsByLength = _mm_xor_si128(IgnoreSlotsByLength, AllOnesXmm);\n\n    //\n    // We're now ready to intersect the two XMM registers to determine which\n    // slots should still be included in the comparison (i.e. which slots have\n    // the exact same unique character as the string and a length less than or\n    // equal to the length of the search string).\n    //\n\n    IncludeSlots = _mm_and_si128(IncludeSlotsByUniqueChar,\n                                 IncludeSlotsByLength);\n\n    //\n    // Generate a mask.\n    //\n\n    Bitmap = _mm_movemask_epi8(IncludeSlots);\n\n    if (!Bitmap) {\n\n        //\n        // No bits were set, so there are no strings in this table starting\n        // with the same character and of a lesser or equal length as the\n        // search string.\n        //\n\n        return NO_MATCH_FOUND;\n    }\n\n    //\n    // Calculate the \"search length\" of the incoming string, which ensures we\n    // only compare up to the first 16 characters.\n    //\n\n    SearchLength = min(String-&gt;Length, 16);\n\n    //\n    // A popcount against the mask will tell us how many slots we matched, and\n    // thus, need to compare.\n    //\n\n    Count = __popcnt(Bitmap);\n\n    do {\n\n        //\n        // Extract the next index by counting the number of trailing zeros left\n        // in the bitmap and adding the amount we've already shifted by.\n        //\n\n        NumberOfTrailingZeros = _tzcnt_u32(Bitmap);\n        Index = NumberOfTrailingZeros + Shift;\n\n        //\n        // Shift the bitmap right, past the zeros and the 1 that was just found,\n        // such that it's positioned correctly for the next loop's tzcnt. Update\n        // the shift count accordingly.\n        //\n\n        Bitmap &gt;&gt;= (NumberOfTrailingZeros + 1);\n        Shift = Index + 1;\n\n        //\n        // Load the slot and its length.\n        //\n\n        Slot.CharsXmm = _mm_load_si128(&StringTable-&gt;Slots[Index].CharsXmm);\n        Length = Lengths.Slots[Index];\n\n        //\n        // Compare the slot to the search string.\n        //\n\n        Compare.CharsXmm = _mm_cmpeq_epi8(Slot.CharsXmm, Search.CharsXmm);\n\n        //\n        // Create a mask of the comparison, then filter out high bits from the\n        // search string's length (which is capped at 16).  (This shouldn't be\n        // technically necessary as the string array buffers should have been\n        // calloc'd and zeroed, but optimizing compilers can often ignore the\n        // zeroing request -- which can produce some bizarre results where the\n        // debug build is correct (because the buffers were zeroed) but the\n        // release build fails because the zeroing got ignored and there are\n        // junk bytes past the NULL terminator, which get picked up in our\n        // 128-bit loads.)\n        //\n\n        Mask = _bzhi_u32(_mm_movemask_epi8(Compare.CharsXmm), SearchLength);\n\n        //\n        // Count how many characters matched.\n        //\n\n        CharactersMatched = __popcnt(Mask);\n\n        if ((USHORT)CharactersMatched &lt; Length && Length &lt;= 16) {\n\n            //\n            // The slot length is longer than the number of characters matched\n            // from the search string; this isn't a prefix match.  Continue.\n            //\n\n            continue;\n        }\n\n        if (Length &gt; 16) {\n\n            //\n            // The first 16 characters in the string matched against this\n            // slot, and the slot is oversized (longer than 16 characters),\n            // so do a direct comparison between the remaining buffers.\n            //\n\n            TargetString = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n            CharactersMatched = IsPrefixMatch(String, TargetString, 16);\n\n            if (CharactersMatched == NO_MATCH_FOUND) {\n\n                //\n                // The prefix match failed, continue our search.\n                //\n\n                continue;\n            }\n        }\n\n        //\n        // This slot is a prefix match.  Fill out the Match structure if the\n        // caller provided a non-NULL pointer, then return the index of the\n        // match.\n        //\n\n        if (ARGUMENT_PRESENT(Match)) {\n\n            Match-&gt;Index = (BYTE)Index;\n            Match-&gt;NumberOfMatchedCharacters = (BYTE)CharactersMatched;\n            Match-&gt;String = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n        }\n\n        return (STRING_TABLE_INDEX)Index;\n\n    } while (--Count);\n\n    //\n    // If we get here, we didn't find a match.\n    //\n\n    //IACA_VC_END();\n\n    return NO_MATCH_FOUND;\n}\n\n\n\nThat’s a nicer bit of logic—more C-like, less assembly-like, and arguably clearer. Let’s see how they compare. (This is an interesting one, as I genuinely don’t have a strong hunch about what kind of performance impact this will have; obviously, I thought the initial way of structuring the loop was optimal, and I had it in place for two years before deciding to embark on this article, which led to the rework we just saw. )\n\n\nBenchmark 10\n\n\n\nBenchmark 10\n\n\nHey, look at that! We’ve shaved off a few more cycles in most cases, especially for the negative matches!\n\n\n\nSpeeding Up Negative Matches with Assembly\n\n\n\n\n\n\nNote\n\n\n\n\nIf you build the Tracer project, you can run a helper batch file in the root directory called cdb-simple.bat, which uses cdb to launch one of the project’s executables, ModuleLoader.exe. This will start up, load all of our tracing project’s DLLs, then allow the debugger to break in, yielding a debugger prompt from which we can easily disassemble functions, inspect runtime function entries, etc. This is the approach I used for capturing the output over the next couple of sections.\n\n\n\nNow for the fun part! Let’s take a look at the disassembly of the initial part of version 10 responsible for the negative match logic and see if there are any improvements we can make.\n0:000&gt; uf StringTable2!IsPrefixOfStringInTable_10\nStringTable2!IsPrefixOfStringInTable_10:\n00007fff`f69c1df0 48896c2418      mov     qword ptr [rsp+18h],rbp\n00007fff`f69c1df5 4889742420      mov     qword ptr [rsp+20h],rsi\n00007fff`f69c1dfa 4155            push    r13\n00007fff`f69c1dfc 4156            push    r14\n00007fff`f69c1dfe 4157            push    r15\n00007fff`f69c1e00 4883ec20        sub     rsp,20h\n00007fff`f69c1e04 c5fa6f5920      vmovdqu xmm3,xmmword ptr [rcx+20h]\n00007fff`f69c1e09 4c8b6a08        mov     r13,qword ptr [rdx+8]\n00007fff`f69c1e0d 4d8bf0          mov     r14,r8\n00007fff`f69c1e10 440fb63a        movzx   r15d,byte ptr [rdx]\n00007fff`f69c1e14 33ed            xor     ebp,ebp\n00007fff`f69c1e16 44883c24        mov     byte ptr [rsp],r15b\n00007fff`f69c1e1a 488bf1          mov     rsi,rcx\n00007fff`f69c1e1d c4e279780c24    vpbroadcastb xmm1,byte ptr [rsp]\n00007fff`f69c1e23 c4c17a6f6500    vmovdqu xmm4,xmmword ptr [r13]\n00007fff`f69c1e29 c4e259004110    vpshufb xmm0,xmm4,xmmword ptr [rcx+10h]\n00007fff`f69c1e2f c5f97411        vpcmpeqb xmm2,xmm0,xmmword ptr [rcx]\n00007fff`f69c1e33 c5e164c9        vpcmpgtb xmm1,xmm3,xmm1\n00007fff`f69c1e37 c5f1ef0d41320000 vpxor   xmm1,xmm1,xmmword ptr [StringTable2!_xmmffffffffffffffffffffffffffffffff (00007fff`f69c5080)]\n00007fff`f69c1e3f c5e9dbd1        vpand   xmm2,xmm2,xmm1\n00007fff`f69c1e43 c579d7c2        vpmovmskb r8d,xmm2\n00007fff`f69c1e47 c5fa7f5c2410    vmovdqu xmmword ptr [rsp+10h],xmm3\n00007fff`f69c1e4d 4585c0          test    r8d,r8d\n00007fff`f69c1e50 0f849a000000    je      StringTable2!IsPrefixOfStringInTable_10+0x100 (00007fff`f69c1ef0)\nThere’s a bit of cruft at the start regarding setting up the function’s prologue (pushing non-volatile registers to the stack, etc. ). That’s to be expected for C (and C++, and basically every language); as the programmer, you don’t have any direct control over how many registers a compiler uses for a routine, how much stack space it uses, which registers it uses when, etc.\nHowever, with assembly, we’re on the opposite end of the spectrum: we can control everything! We also have a little trick up our sleeves: the venerable LEAF_ENTRY.\n\nWindows x64 ABI Calling Conventions\nFirst, some background. The Windows x64 ABI and calling convention dictate two types of functions: NESTED_ENTRY and LEAF_ENTRY.\n\nNESTED_ENTRY\nNESTED_ENTRY is by far the most common; C and C++ functions are all implicitly NESTED_ENTRY functions. (The LEAF_ENTRY and NESTED_ENTRY symbols are MASM (ml64.exe) macro names, but the concept applies to all languages.)\n\n\nLEAF_ENTRY\nA LEAF_ENTRY can only be implemented in assembly. It is constrained in that it may not manipulate any of the non-volatile x64 registers (rbx, rdi, rsi, rsp, rbp, r12, r13, r14, r15, xmm6-15), nor may it call any other functions (since call implicitly modifies the stack pointer), nor may it have a structured exception handler (since handling an exception for a given stack frame also manipulates the stack pointer).\nThe reason for these constraints is that LEAF_ENTRY routines do not have any unwind information generated for them in their runtime function entries. Unwind information is used by the kernel to, well, unwind the modifications made to non-volatile registers while traversing back up through the call stack looking for an exception handler in the event of an exception.\nFor example, here’s the function entry and associated unwind information for the PGO build of the IsPrefixOfStringInTable_10 function:\n0:000&gt; .fnent StringTable2!IsPrefixOfStringInTable_10\nDebugger function entry 000001d8`2ea03cf8 for:\n(00007fff`f8411df0)   StringTable2!IsPrefixOfStringInTable_10\nExact matches:\n    StringTable2!IsPrefixOfStringInTable_10 (struct _STRING_TABLE *,\n                                             struct _STRING *,\n                                             struct _STRING_MATCH *)\n\nBeginAddress      = 00000000`00001df0\nEndAddress        = 00000000`00001e59\nUnwindInfoAddress = 00000000`000054f8\n\nUnwind info at 00007fff`f84154f8, 14 bytes\n  version 1, flags 0, prolog 14, codes 8\n  00: offs 14, unwind op 4, op info 6   UWOP_SAVE_NONVOL FrameOffset: 58 reg: rsi.\n  02: offs 14, unwind op 4, op info 5   UWOP_SAVE_NONVOL FrameOffset: 50 reg: rbp.\n  04: offs 14, unwind op 2, op info 3   UWOP_ALLOC_SMALL.\n  05: offs 10, unwind op 0, op info f   UWOP_PUSH_NONVOL reg: r15.\n  06: offs e, unwind op 0, op info e    UWOP_PUSH_NONVOL reg: r14.\n  07: offs c, unwind op 0, op info d    UWOP_PUSH_NONVOL reg: r13.\nWe can see that this routine manipulates six non-volatile registers in total, including the stack pointer. The first instructions of the routine constitute the function’s prologue; in the disassembly, you can see that three of the rxx registers are pushed to the stack, followed by the allocation of 0x20 (32) bytes of stack space:\n0:000&gt; uf StringTable2!IsPrefixOfStringInTable_10\nStringTable2!IsPrefixOfStringInTable_10:\n00007fff`f69c1df0 48896c2418      mov     qword ptr [rsp+18h],rbp\n00007fff`f69c1df5 4889742420      mov     qword ptr [rsp+20h],rsi\n00007fff`f69c1dfa 4155            push    r13\n00007fff`f69c1dfc 4156            push    r14\n00007fff`f69c1dfe 4157            push    r15\n00007fff`f69c1e00 4883ec20        sub     rsp,20h\nIt also cheekily uses the home parameter space for stashing rbp and rsi instead of pushing them to the stack. That’s fair game, though—this is the PGO build, so I’d expect it to use some extra tricks to shave off a few cycles here and there. I’d do the same if I were writing assembly. (Side note: if you view the source of this page, there’s a commented-out section below that shows the runtime function entry for the release build of version 10; it uses nine registers instead of six and 40 bytes of stack space instead of 32. I wrote it before switching to using the PGO build for everything.)\nThe home parameter space is a 32-byte area that immediately follows the return address (i.e., the value of rsp when the function is entered); it is mandated by the x64 calling convention on Windows and is primarily intended to provide scratch space for a routine to home its parameter registers (i.e., the registers used for the first four arguments of a function: rcx, rdx, r8, and r9). This allows the four volatile registers to be repurposed within a routine while still providing a way to refer to the parameters if needed. That’s its intended use—however, it’s not strictly enforced, so you can essentially treat this area as a free 32-byte scratch space if you’re writing assembly.\n\n\n\n\n\n\nNote\n\n\n\nOn a semi-related note, I’d highly recommend reading A History of Modern 64-bit Computing if you have some spare time. It’s a fascinating insight into contemporary x64 conventions we often take for granted, drawing on numerous interviews with industry luminaries like Dave Cutler and Linus Torvalds. I found it incredibly useful for understanding the why behind concepts like home parameter space, structured exception handling, runtime function entries, and why you can’t write inline assembly for x64 with MSVC anymore—apparently, it provides a direct vector for disrupting the mechanisms relied upon by the kernel stack unwinding functionality. (At least, I think that’s the reason—can anyone from Microsoft confirm?))\n\n\n\n\n\n\n\n\nAssembly Implementations\n\nIsPrefixOfStringInTable_x64_1\nIsPrefixOfStringInTable_x64_2 →\nSo, knowing what we now know about the venerable little LEAF_ENTRY trick, let’s see if we can construct a simple routine in assembly that just deals with the negative match case.\n;++\n;\n; STRING_TABLE_INDEX\n; IsPrefixOfStringInTable_x64_*(\n;     _In_ PSTRING_TABLE StringTable,\n;     _In_ PSTRING String,\n;     _Out_opt_ PSTRING_MATCH Match\n;     )\n;\n; Routine Description:\n;\n;   Searches a string table to see if any strings \"prefix match\" the given\n;   search string.  That is, whether any string in the table \"starts with\n;   or is equal to\" the search string.\n;\n; Arguments:\n;\n;   StringTable - Supplies a pointer to a STRING_TABLE struct.\n;\n;   String - Supplies a pointer to a STRING struct that contains the string to\n;       search for.\n;\n;   Match - Optionally supplies a pointer to a variable that contains the\n;       address of a STRING_MATCH structure.  This will be populated with\n;       additional details about the match if a non-NULL pointer is supplied.\n;\n; Return Value:\n;\n;   Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n;\n;--\n\n        LEAF_ENTRY IsPrefixOfStringInTable_x64_1, _TEXT$00\n\n        ;IACA_VC_START\n\n;\n; Load the string buffer into xmm0, and the unique indexes from the string table\n; into xmm1.  Shuffle the buffer according to the unique indexes, and store the\n; result back into xmm0.\n;\n\n        mov     rax, String.Buffer[rdx]\n        vmovdqu xmm0, xmmword ptr [rax]                 ; Load search buffer.\n        vmovdqa xmm1, xmmword ptr StringTable.UniqueIndex[rcx] ; Load indexes.\n        vpshufb xmm0, xmm0, xmm1\n\n;\n; Load the string table's unique character array into xmm2, and the lengths for\n; each string slot into xmm3.\n;\n\n        vmovdqa xmm2, xmmword ptr StringTable.UniqueChars[rcx]  ; Load chars.\n        vmovdqa xmm3, xmmword ptr StringTable.Lengths[rcx]      ; Load lengths.\n\n;\n; Set xmm5 to all ones.  This is used later.\n;\n\n        vpcmpeqq    xmm5, xmm5, xmm5                    ; Set xmm5 to all ones.\n\n;\n; Broadcast the byte-sized string length into xmm4.\n;\n\n        vpbroadcastb xmm4, byte ptr String.Length[rdx]  ; Broadcast length.\n\n;\n; Compare the search string's unique character array (xmm0) against the string\n; table's unique chars (xmm2), saving the result back into xmm0.\n;\n\n        vpcmpeqb    xmm0, xmm0, xmm2            ; Compare unique chars.\n\n;\n; Compare the search string's length, which we've broadcasted to all 8-byte\n; elements of the xmm4 register, to the lengths of the slots in the string\n; table, to find those that are greater in length.  Invert the result, such\n; that we're left with a masked register where each 0xff element indicates\n; a slot with a length less than or equal to our search string's length.\n;\n\n        vpcmpgtb    xmm1, xmm4, xmm3            ; Identify long slots.\n        vpxor       xmm1, xmm1, xmm5            ; Invert the result.\n\n;\n; Intersect-via-test xmm0 and xmm1 to identify string slots of a suitable\n; length with a matching unique character.\n;\n\n        vptest      xmm0, xmm1                  ; Check for no match.\n        ;jnz        short @F                    ; There was a match.\n                                                ; (Not yet implemented.)\n\n;\n; No match, set rax to -1 and return.\n;\n\n        xor         eax, eax                    ;\n        not         al                          ; rax = -1\n        ret\n\n        ;IACA_VC_END\n\n        LEAF_END   IsPrefixOfStringInTable_x64_1, _TEXT$00\n\n; vim:set tw=80 ts=8 sw=4 sts=4 et syntax=masm fo=croql comments=\\:;           :\nNote how we don’t need to push anything to the stack since we didn’t manipulate any non-volatile registers. If an exception occurs within the body of our implementation (say we dereference a NULL pointer), the kernel knows it doesn’t have to undo any non-volatile register modifications (using offsets specified by the unwind information) because there isn’t any unwind information. It can simply advance to the frame before us (e. g. , rsp at the time of the fault, minus 8 bytes) as it continues its search for runtime function entries and associated unwind information. As you can see, the unwind info is effectively empty:\n0:000&gt; .fnent StringTable2!IsPrefixOfStringInTable_x64_1\nDebugger function entry 000001f9`048edf98 for:\nExact matches:\n    StringTable2!IsPrefixOfStringInTable_x64_1 (void)\n\nBeginAddress      = 00000000`00003290\nEndAddress        = 00000000`000032cb\nUnwindInfoAddress = 00000000`00004468\n\nUnwind info at 00007ffd`15594468, 4 bytes\n  version 1, flags 0, prolog 0, codes 0\n\n\nBenchmark x64 1\nLet’s see how this scrappy little fellow (who always returns NO_MATCH_FOUND but still mimics the steps required to successfully negative match) does against the leading C implementation at this point, version 10:\n\n\n\nBenchmark x64 1\n\n\nFwoah, look at that, we’ve shaved about three cycles off the C version!\n (Note that when I first wrote this, I was comparing the assembly version against the release build (not the PGO build), which was clocking in at about 13-14 cycles for negative matching. So getting it down to ~7.5 from 13-14 was a bit more exciting. Damn the PGO build and its 10.9-ish cycles for negative matching!) \nThe good news is that our theory about the performance of the LEAF_ENTRY looks like it’s paid off: we can reliably get about 7.5 cycles for negative matching.\n\n\nIsPrefixOfStringInTable_x64_2\n← IsPrefixOfStringInTable_x64_1 | IsPrefixOfStringInTable_x64_3 →\nThe bad news is that we now need to implement the rest of the functionality within the constraints of a LEAF_ENTRY!\nThe problem with a LEAF_ENTRY for anything more than a trivial bit of code is that you only have a handful of volatile registers to work with, and no stack space can be used for register spilling or temporaries. (Technically I could use the home parameter space, but, eh, we’re already avoiding stack spills, why not make life harder for ourselves and try to avoid all memory spilling.)\nIf you can’t spill to memory, your only option is really spilling to XMM registers via vpinsr and vpextr combinations, which, as you can see in the implementation of version 2 below, I have to do a lot.\n (Also note: when I wrote this version, I didn’t use the disassembly from the C routines for guidance. I find that as soon as you start to grok the disassembly for a given routine, it becomes harder to think of ways to approach it from a fresh angle. Also, the LEAF_ENTRY aspect significantly limited what I could do anyway, so I figured I may as well just give it a crack from scratch and see what I could come up with. It would be an interesting point of reference compared to a future iteration that tries to improve on the disassembly of an optimized PGO version, for example.) \nThe diff view for this routine is less useful given the vast majority of the code is new, so I’ve put the full version of the code first. It’s based more or less on the approach used by version 8 of the C routine (I actually wrote it after I wrote version 8; versions 9 and 10 of the C routine (with the latter having the improved loop logic) came after).\n\nFullDiff\n\n\n;++\n;\n; STRING_TABLE_INDEX\n; IsPrefixOfStringInTable_x64_*(\n;     _In_ PSTRING_TABLE StringTable,\n;     _In_ PSTRING String,\n;     _Out_opt_ PSTRING_MATCH Match\n;     )\n;\n; Routine Description:\n;\n;   Searches a string table to see if any strings \"prefix match\" the given\n;   search string.  That is, whether any string in the table \"starts with\n;   or is equal to\" the search string.\n;\n; Arguments:\n;\n;   StringTable - Supplies a pointer to a STRING_TABLE struct.\n;\n;   String - Supplies a pointer to a STRING struct that contains the string to\n;       search for.\n;\n;   Match - Optionally supplies a pointer to a variable that contains the\n;       address of a STRING_MATCH structure.  This will be populated with\n;       additional details about the match if a non-NULL pointer is supplied.\n;\n; Return Value:\n;\n;   Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n;\n;--\n\n        LEAF_ENTRY IsPrefixOfStringInTable_x64_2, _TEXT$00\n\n;\n; Load the string buffer into xmm0, and the unique indexes from the string table\n; into xmm1.  Shuffle the buffer according to the unique indexes, and store the\n; result into xmm5.\n;\n\n        ;IACA_VC_START\n\n        mov     rax, String.Buffer[rdx]\n        vmovdqu xmm0, xmmword ptr [rax]                 ; Load search buffer.\n        vmovdqa xmm1, xmmword ptr StringTable.UniqueIndex[rcx] ; Load indexes.\n        vpshufb xmm5, xmm0, xmm1\n\n;\n; Load the string table's unique character array into xmm2.\n\n        vmovdqa xmm2, xmmword ptr StringTable.UniqueChars[rcx]  ; Load chars.\n\n;\n; Compare the search string's unique character array (xmm5) against the string\n; table's unique chars (xmm2), saving the result back into xmm5.\n;\n\n        vpcmpeqb    xmm5, xmm5, xmm2            ; Compare unique chars.\n\n;\n; Load the lengths of each string table slot into xmm3.\n;\n        vmovdqa xmm3, xmmword ptr StringTable.Lengths[rcx]      ; Load lengths.\n\n;\n; Set xmm2 to all ones.  We use this later to invert the length comparison.\n;\n\n        vpcmpeqq    xmm2, xmm2, xmm2            ; Set xmm2 to all ones.\n\n;\n; Broadcast the byte-sized string length into xmm4.\n;\n\n        vpbroadcastb xmm4, byte ptr String.Length[rdx]  ; Broadcast length.\n\n;\n; Compare the search string's length, which we've broadcasted to all 8-byte\n; elements of the xmm4 register, to the lengths of the slots in the string\n; table, to find those that are greater in length.  Invert the result, such\n; that we're left with a masked register where each 0xff element indicates\n; a slot with a length less than or equal to our search string's length.\n;\n\n        vpcmpgtb    xmm1, xmm3, xmm4            ; Identify long slots.\n        vpxor       xmm1, xmm1, xmm2            ; Invert the result.\n\n;\n; Intersect-and-test the unique character match xmm mask register (xmm5) with\n; the length match mask xmm register (xmm1).  This affects flags, allowing us\n; to do a fast-path exit for the no-match case (where ZF = 1).\n;\n\n        vptest      xmm5, xmm1                  ; Check for no match.\n        jnz         short Pfx10                 ; There was a match.\n\n;\n; No match, set rax to -1 and return.\n;\n\n        xor         eax, eax                    ; Clear rax.\n        not         al                          ; al = -1\n        ret                                     ; Return.\n\n        ;IACA_VC_END\n\n;\n; (There was at least one match, continue with processing.)\n;\n\n;\n; Calculate the \"search length\" for the incoming search string, which is\n; equivalent of 'min(String-&gt;Length, 16)'.  (The search string's length\n; currently lives in xmm4, albeit as a byte-value broadcasted across the\n; entire register, so extract that first.)\n;\n; Once the search length is calculated, deposit it back at the second byte\n; location of xmm4.\n;\n;   r10 and xmm4[15:8] - Search length (min(String-&gt;Length, 16))\n;\n;   r11 - String length (String-&gt;Length)\n;\n\nPfx10:  vpextrb     r11, xmm4, 0                ; Load length.\n        mov         rax, 16                     ; Load 16 into rax.\n        mov         r10, r11                    ; Copy into r10.\n        cmp         r10w, ax                    ; Compare against 16.\n        cmova       r10w, ax                    ; Use 16 if length is greater.\n        vpinsrb     xmm4, xmm4, r10d, 1         ; Save back to xmm4b[1].\n\n;\n; Home our parameter registers into xmm registers instead of their stack-backed\n; location, to avoid memory writes.\n;\n\n        vpxor       xmm2, xmm2, xmm2            ; Clear xmm2.\n        vpinsrq     xmm2, xmm2, rcx, 0          ; Save rcx into xmm2q[0].\n        vpinsrq     xmm2, xmm2, rdx, 1          ; Save rdx into xmm2q[1].\n\n;\n; Intersect xmm5 and xmm1 (as we did earlier with the 'vptest xmm5, xmm1'),\n; yielding a mask identifying indices we need to perform subsequent matches\n; upon.  Convert this into a bitmap and save in xmm2d[2].\n;\n\n        vpand       xmm5, xmm5, xmm1            ; Intersect unique + lengths.\n        vpmovmskb   edx, xmm5                   ; Generate a bitmap from mask.\n\n;\n; We're finished with xmm5; repurpose it in the same vein as xmm2 above.\n;\n\n        vpxor       xmm5, xmm5, xmm5            ; Clear xmm5.\n        vpinsrq     xmm5, xmm5, r8, 0           ; Save r8 into xmm5q[0].\n\n;\n; Summary of xmm register stashing for the rest of the routine:\n;\n; xmm2:\n;        0:63   (vpinsrq 0)     rcx (1st function parameter, StringTable)\n;       64:127  (vpinsrq 1)     rdx (2nd function paramter, String)\n;\n; xmm4:\n;       0:7     (vpinsrb 0)     length of search string\n;       8:15    (vpinsrb 1)     min(String-&gt;Length, 16)\n;      16:23    (vpinsrb 2)     loop counter (when doing long string compares)\n;      24:31    (vpinsrb 3)     shift count\n;\n; xmm5:\n;       0:63    (vpinsrq 0)     r8 (3rd function parameter, StringMatch)\n;      64:95    (vpinsrd 2)     bitmap of slots to compare\n;      96:127   (vpinsrd 3)     index of slot currently being processed\n;\n\n;\n; Initialize rcx as our counter register by doing a popcnt against the bitmap\n; we just generated in edx, and clear our shift count register (r9).\n;\n\n        popcnt      ecx, edx                    ; Count bits in bitmap.\n        xor         r9, r9                      ; Clear r9.\n\n        align 16\n\n;\n; Top of the main comparison loop.  The bitmap will be present in rdx.  Count\n; trailing zeros of the bitmap, and then add in the shift count, producing an\n; index (rax) we can use to load the corresponding slot.\n;\n; Register usage at top of loop:\n;\n;   rax - Index.\n;\n;   rcx - Loop counter.\n;\n;   rdx - Bitmap initially, then slot length.\n;\n;   r9 - Shift count.\n;\n;   r10 - Search length.\n;\n;   r11 - String length.\n;\n\nPfx20:  tzcnt       r8d, edx                    ; Count trailing zeros.\n        mov         eax, r8d                    ; Copy tzcnt to rax,\n        add         rax, r9                     ; Add shift to create index.\n        inc         r8                          ; tzcnt + 1\n        shrx        rdx, rdx, r8                ; Reposition bitmap.\n        vpinsrd     xmm5, xmm5, edx, 2          ; Store bitmap, free up rdx.\n        xor         edx, edx                    ; Clear edx.\n        mov         r9, rax                     ; Copy index back to shift.\n        inc         r9                          ; Shift = Index + 1\n        vpinsrd     xmm5, xmm5, eax, 3          ; Store the raw index xmm5d[3].\n\n;\n; \"Scale\" the index (such that we can use it in a subsequent vmovdqa) by\n; shifting left by 4 (i.e. multiply by '(sizeof STRING_SLOT)', which is 16).\n;\n; Then, load the string table slot at this index into xmm1, then shift rax back.\n;\n\n        shl         eax, 4\n        vpextrq     r8, xmm2, 0\n        vmovdqa     xmm1, xmmword ptr [rax + StringTable.Slots[r8]]\n        shr         eax, 4\n\n;\n; The search string's first 16 characters are already in xmm0.  Compare this\n; against the slot that has just been loaded into xmm1, storing the result back\n; into xmm1.\n;\n\n        vpcmpeqb    xmm1, xmm1, xmm0            ; Compare search string to slot.\n\n;\n; Convert the XMM mask into a 32-bit representation, then zero high bits after\n; our \"search length\", which allows us to ignore the results of the comparison\n; above for bytes that were after the search string's length, if applicable.\n; Then, count the number of bits remaining, which tells us how many characters\n; we matched.\n;\n\n        vpmovmskb   r8d, xmm1                   ; Convert into mask.\n        bzhi        r8d, r8d, r10d              ; Zero high bits.\n        popcnt      r8d, r8d                    ; Count bits.\n\n;\n; Load the slot length into rdx.  As xmm3 already has all the slot lengths in\n; it, we can load rax (the current index) into xmm1 and use it to extract the\n; slot length via shuffle.  (The length will be in the lowest byte of xmm1\n; after the shuffle, which we can then vpextrb.)\n;\n\n        movd        xmm1, rax                   ; Load index into xmm1.\n        vpshufb     xmm1, xmm3, xmm1            ; Shuffle lengths.\n        vpextrb     rdx, xmm1, 0                ; Extract target length to rdx.\n\n;\n; If 16 characters matched, and the search string's length is longer than 16,\n; we're going to need to do a comparison of the remaining strings.\n;\n\n        cmp         r8w, 16                     ; Compare chars matched to 16.\n        je          short @F                    ; 16 chars matched.\n        jmp         Pfx30                       ; Less than 16 matched.\n\n;\n; All 16 characters matched.  If the slot length is greater than 16, we need\n; to do an inline memory comparison of the remaining bytes.  If it's 16 exactly,\n; then great, that's a slot match, we're done.\n;\n\n@@:     cmp         dl, 16                      ; Compare length to 16.\n        ja          Pfx50                       ; Length is &gt; 16.\n        je          short Pfx35                 ; Lengths match!\n                                                ; Length &lt;= 16, fall through...\n\n;\n; Less than or equal to 16 characters were matched.  Compare this against the\n; length of the slot; if equal, this is a match, if not, no match, continue.\n;\n\nPfx30:  cmp         r8b, dl                     ; Compare against slot length.\n        jne         @F                          ; No match found.\n        jmp         short Pfx35                 ; Match found!\n\n;\n; No match against this slot, decrement counter and either continue the loop\n; or terminate the search and return no match.\n;\n\n@@:     vpextrd     edx, xmm5, 2                ; Restore rdx bitmap.\n        dec         cx                          ; Decrement counter.\n        jnz         Pfx20                       ; cx != 0, continue.\n\n        xor         eax, eax                    ; Clear rax.\n        not         al                          ; al = -1\n        ret                                     ; Return.\n\n;\n; Pfx35 and Pfx40 are the jump targets for when the prefix match succeeds.  The\n; former is used when we need to copy the number of characters matched from r8\n; back to rax.  The latter jump target doesn't require this.\n;\n\nPfx35:  mov         rax, r8                     ; Copy numbers of chars matched.\n\n;\n; Load the match parameter back into r8 and test to see if it's not-NULL, in\n; which case we need to fill out a STRING_MATCH structure for the match.\n;\n\nPfx40:  vpextrq     r8, xmm5, 0                 ; Extract StringMatch.\n        test        r8, r8                      ; Is NULL?\n        jnz         short @F                    ; Not zero, need to fill out.\n\n;\n; StringMatch is NULL, we're done. Extract index of match back into rax and ret.\n;\n\n        vpextrd     eax, xmm5, 3                ; Extract raw index for match.\n        ret                                     ; StringMatch == NULL, finish.\n\n;\n; StringMatch is not NULL.  Fill out characters matched (currently rax), then\n; reload the index from xmm5 into rax and save.\n;\n\n@@:     mov         byte ptr StringMatch.NumberOfMatchedCharacters[r8], al\n        vpextrd     eax, xmm5, 3                ; Extract raw index for match.\n        mov         byte ptr StringMatch.Index[r8], al\n\n;\n; Final step, loading the address of the string in the string array.  This\n; involves going through the StringTable, so we need to load that parameter\n; back into rcx, then resolving the string array address via pStringArray,\n; then the relevant STRING offset within the StringArray.Strings structure.\n;\n\n        vpextrq     rcx, xmm2, 0            ; Extract StringTable into rcx.\n        mov         rcx, StringTable.pStringArray[rcx] ; Load string array.\n\n        shl         eax, 4                  ; Scale the index; sizeof STRING=16.\n        lea         rdx, [rax + StringArray.Strings[rcx]] ; Resolve address.\n        mov         qword ptr StringMatch.String[r8], rdx ; Save STRING ptr.\n        shr         eax, 4                  ; Revert the scaling.\n\n        ret\n\n;\n; 16 characters matched and the length of the underlying slot is greater than\n; 16, so we need to do a little memory comparison to determine if the search\n; string is a prefix match.\n;\n; The slot length is stored in rax at this point, and the search string's\n; length is stored in r11.  We know that the search string's length will\n; always be longer than or equal to the slot length at this point, so, we\n; can subtract 16 (currently stored in r10) from rax, and use the resulting\n; value as a loop counter, comparing the search string with the underlying\n; string slot byte-by-byte to determine if there's a match.\n;\n\nPfx50:  sub         rdx, r10                ; Subtract 16 from search length.\n\n;\n; Free up some registers by stashing their values into various xmm offsets.\n;\n\n        vpinsrb     xmm4, xmm4, ecx, 2      ; Free up rcx register.\n        mov         rcx, rdx                ; Free up rdx, rcx is now counter.\n\n;\n; Load the search string buffer and advance it 16 bytes.\n;\n\n        vpextrq     r11, xmm2, 1            ; Extract String into r11.\n        mov         r11, String.Buffer[r11] ; Load buffer address.\n        add         r11, r10                ; Advance buffer 16 bytes.\n\n;\n; Loading the slot is more involved as we have to go to the string table, then\n; the pStringArray pointer, then the relevant STRING offset within the string\n; array (which requires re-loading the index from xmm5d[3]), then the string\n; buffer from that structure.\n;\n\n        vpextrq     r8, xmm2, 0             ; Extract StringTable into r8.\n        mov         r8, StringTable.pStringArray[r8] ; Load string array.\n\n        shl         eax, 4                  ; Scale the index; sizeof STRING=16.\n\n        lea         r8, [rax + StringArray.Strings[r8]] ; Resolve address.\n        mov         r8, String.Buffer[r8]   ; Load string table buffer address.\n        add         r8, r10                 ; Advance buffer 16 bytes.\n\n        xor         eax, eax                ; Clear eax.\n\n;\n; We've got both buffer addresses + 16 bytes loaded in r11 and r8 respectively.\n; Do a byte-by-byte comparison.\n;\n\n        align 16\n@@:     mov         dl, byte ptr [rax + r11]    ; Load byte from search string.\n        cmp         dl, byte ptr [rax + r8]     ; Compare against target.\n        jne         short Pfx60                 ; If not equal, jump.\n\n;\n; The two bytes were equal, update rax, decrement rcx and potentially continue\n; the loop.\n;\n\n        inc         ax                          ; Increment index.\n        loopnz      @B                          ; Decrement cx and loop back.\n\n;\n; All bytes matched!  Add 16 (still in r10) back to rax such that it captures\n; how many characters we matched, and then jump to Pfx40 for finalization.\n;\n\n        add         rax, r10\n        jmp         Pfx40\n\n;\n; Byte comparisons were not equal.  Restore the rcx loop counter and decrement\n; it.  If it's zero, we have no more strings to compare, so we can do a quick\n; exit.  If there are still comparisons to be made, restore the other registers\n; we trampled then jump back to the start of the loop Pfx20.\n;\n\nPfx60:  vpextrb     rcx, xmm4, 2                ; Restore rcx counter.\n        dec         cx                          ; Decrement counter.\n        jnz         short @F                    ; Jump forward if not zero.\n\n;\n; No more comparisons remaining, return.\n;\n\n        xor         eax, eax                    ; Clear rax.\n        not         al                          ; al = -1\n        ret                                     ; Return.\n\n;\n; More comparisons remain; restore the registers we clobbered and continue loop.\n;\n\n@@:     vpextrb     r10, xmm4, 1                ; Restore r10.\n        vpextrb     r11, xmm4, 0                ; Restore r11.\n        vpextrd     edx, xmm5, 2                ; Restore rdx bitmap.\n        jmp         Pfx20                       ; Continue comparisons.\n\n        ;IACA_VC_END\n\n        LEAF_END   IsPrefixOfStringInTable_x64_2, _TEXT$00\n\n; vim:set tw=80 ts=8 sw=4 sts=4 et syntax=masm fo=croql comments=\\:;           :\n\n\n% diff -u IsPrefixOfStringInTable_x64_1.asm IsPrefixOfStringInTable_x64_2.asm\n--- IsPrefixOfStringInTable_x64_1.asm   2018-04-29 11:03:46.403568800 -0400\n+++ IsPrefixOfStringInTable_x64_2.asm   2018-04-26 14:15:53.805409700 -0400\n@@ -50,12 +50,12 @@\n ;\n ;--\n\n-        LEAF_ENTRY IsPrefixOfStringInTable_x64_1, _TEXT$00\n+        LEAF_ENTRY IsPrefixOfStringInTable_x64_2, _TEXT$00\n\n ;\n ; Load the string buffer into xmm0, and the unique indexes from the string table\n ; into xmm1.  Shuffle the buffer according to the unique indexes, and store the\n-; result back into xmm0.\n+; result into xmm5.\n ;\n\n         ;IACA_VC_START\n@@ -63,34 +63,36 @@\n         mov     rax, String.Buffer[rdx]\n         vmovdqu xmm0, xmmword ptr [rax]                 ; Load search buffer.\n         vmovdqa xmm1, xmmword ptr StringTable.UniqueIndex[rcx] ; Load indexes.\n-        vpshufb xmm0, xmm0, xmm1\n+        vpshufb xmm5, xmm0, xmm1\n\n ;\n-; Load the string table's unique character array into xmm2, and the lengths for\n-; each string slot into xmm3.\n-;\n+; Load the string table's unique character array into xmm2.\n\n         vmovdqa xmm2, xmmword ptr StringTable.UniqueChars[rcx]  ; Load chars.\n-        vmovdqa xmm3, xmmword ptr StringTable.Lengths[rcx]      ; Load lengths.\n\n ;\n-; Set xmm5 to all ones.  This is used later.\n+; Compare the search string's unique character array (xmm5) against the string\n+; table's unique chars (xmm2), saving the result back into xmm5.\n ;\n\n-        vpcmpeqq    xmm5, xmm5, xmm5                    ; Set xmm5 to all ones.\n+        vpcmpeqb    xmm5, xmm5, xmm2            ; Compare unique chars.\n\n ;\n-; Broadcast the byte-sized string length into xmm4.\n+; Load the lengths of each string table slot into xmm3.\n ;\n+        vmovdqa xmm3, xmmword ptr StringTable.Lengths[rcx]      ; Load lengths.\n\n-        vpbroadcastb xmm4, byte ptr String.Length[rdx]  ; Broadcast length.\n+;\n+; Set xmm2 to all ones.  We use this later to invert the length comparison.\n+;\n+\n+        vpcmpeqq    xmm2, xmm2, xmm2            ; Set xmm2 to all ones.\n\n ;\n-; Compare the search string's unique character array (xmm0) against the string\n-; table's unique chars (xmm2), saving the result back into xmm0.\n+; Broadcast the byte-sized string length into xmm4.\n ;\n\n-        vpcmpeqb    xmm0, xmm0, xmm2            ; Compare unique chars.\n+        vpbroadcastb xmm4, byte ptr String.Length[rdx]  ; Broadcast length.\n\n ;\n ; Compare the search string's length, which we've broadcasted to all 8-byte\n@@ -100,30 +102,378 @@\n ; a slot with a length less than or equal to our search string's length.\n ;\n\n-        vpcmpgtb    xmm1, xmm4, xmm3            ; Identify long slots.\n-        vpxor       xmm1, xmm1, xmm5            ; Invert the result.\n+        vpcmpgtb    xmm1, xmm3, xmm4            ; Identify long slots.\n+        vpxor       xmm1, xmm1, xmm2            ; Invert the result.\n\n ;\n-; Intersect-and-test the unique character match xmm mask register (xmm0) with\n+; Intersect-and-test the unique character match xmm mask register (xmm5) with\n ; the length match mask xmm register (xmm1).  This affects flags, allowing us\n ; to do a fast-path exit for the no-match case (where ZF = 1).\n ;\n\n-        vptest      xmm0, xmm1                  ; Check for no match.\n-        ;jnz        short @F                    ; There was a match.\n-                                                ; (Not yet implemented.)\n+        vptest      xmm5, xmm1                  ; Check for no match.\n+        jnz         short Pfx10                 ; There was a match.\n\n ;\n ; No match, set rax to -1 and return.\n ;\n\n-        xor         eax, eax                    ;\n-        not         al                          ; rax = -1\n+        xor         eax, eax                    ; Clear rax.\n+        not         al                          ; al = -1\n+        ret                                     ; Return.\n+\n+        ;IACA_VC_END\n+\n+;\n+; (There was at least one match, continue with processing.)\n+;\n+\n+;\n+; Calculate the \"search length\" for the incoming search string, which is\n+; equivalent of 'min(String-&gt;Length, 16)'.  (The search string's length\n+; currently lives in xmm4, albeit as a byte-value broadcasted across the\n+; entire register, so extract that first.)\n+;\n+; Once the search length is calculated, deposit it back at the second byte\n+; location of xmm4.\n+;\n+;   r10 and xmm4[15:8] - Search length (min(String-&gt;Length, 16))\n+;\n+;   r11 - String length (String-&gt;Length)\n+;\n+\n+Pfx10:  vpextrb     r11, xmm4, 0                ; Load length.\n+        mov         rax, 16                     ; Load 16 into rax.\n+        mov         r10, r11                    ; Copy into r10.\n+        cmp         r10w, ax                    ; Compare against 16.\n+        cmova       r10w, ax                    ; Use 16 if length is greater.\n+        vpinsrb     xmm4, xmm4, r10d, 1         ; Save back to xmm4b[1].\n+\n+;\n+; Home our parameter registers into xmm registers instead of their stack-backed\n+; location, to avoid memory writes.\n+;\n+\n+        vpxor       xmm2, xmm2, xmm2            ; Clear xmm2.\n+        vpinsrq     xmm2, xmm2, rcx, 0          ; Save rcx into xmm2q[0].\n+        vpinsrq     xmm2, xmm2, rdx, 1          ; Save rdx into xmm2q[1].\n+\n+;\n+; Intersect xmm5 and xmm1 (as we did earlier with the 'vptest xmm5, xmm1'),\n+; yielding a mask identifying indices we need to perform subsequent matches\n+; upon.  Convert this into a bitmap and save in xmm2d[2].\n+;\n+\n+        vpand       xmm5, xmm5, xmm1            ; Intersect unique + lengths.\n+        vpmovmskb   edx, xmm5                   ; Generate a bitmap from mask.\n+\n+;\n+; We're finished with xmm5; repurpose it in the same vein as xmm2 above.\n+;\n+\n+        vpxor       xmm5, xmm5, xmm5            ; Clear xmm5.\n+        vpinsrq     xmm5, xmm5, r8, 0           ; Save r8 into xmm5q[0].\n+\n+;\n+; Summary of xmm register stashing for the rest of the routine:\n+;\n+; xmm2:\n+;        0:63   (vpinsrq 0)     rcx (1st function parameter, StringTable)\n+;       64:127  (vpinsrq 1)     rdx (2nd function paramter, String)\n+;\n+; xmm4:\n+;       0:7     (vpinsrb 0)     length of search string\n+;       8:15    (vpinsrb 1)     min(String-&gt;Length, 16)\n+;      16:23    (vpinsrb 2)     loop counter (when doing long string compares)\n+;      24:31    (vpinsrb 3)     shift count\n+;\n+; xmm5:\n+;       0:63    (vpinsrq 0)     r8 (3rd function parameter, StringMatch)\n+;      64:95    (vpinsrd 2)     bitmap of slots to compare\n+;      96:127   (vpinsrd 3)     index of slot currently being processed\n+;\n+\n+;\n+; Initialize rcx as our counter register by doing a popcnt against the bitmap\n+; we just generated in edx, and clear our shift count register (r9).\n+;\n+\n+        popcnt      ecx, edx                    ; Count bits in bitmap.\n+        xor         r9, r9                      ; Clear r9.\n+\n+        align 16\n+\n+;\n+; Top of the main comparison loop.  The bitmap will be present in rdx.  Count\n+; trailing zeros of the bitmap, and then add in the shift count, producing an\n+; index (rax) we can use to load the corresponding slot.\n+;\n+; Register usage at top of loop:\n+;\n+;   rax - Index.\n+;\n+;   rcx - Loop counter.\n+;\n+;   rdx - Bitmap initially, then slot length.\n+;\n+;   r9 - Shift count.\n+;\n+;   r10 - Search length.\n+;\n+;   r11 - String length.\n+;\n+\n+Pfx20:  tzcnt       r8d, edx                    ; Count trailing zeros.\n+        mov         eax, r8d                    ; Copy tzcnt to rax,\n+        add         rax, r9                     ; Add shift to create index.\n+        inc         r8                          ; tzcnt + 1\n+        shrx        rdx, rdx, r8                ; Reposition bitmap.\n+        vpinsrd     xmm5, xmm5, edx, 2          ; Store bitmap, free up rdx.\n+        xor         edx, edx                    ; Clear edx.\n+        mov         r9, rax                     ; Copy index back to shift.\n+        inc         r9                          ; Shift = Index + 1\n+        vpinsrd     xmm5, xmm5, eax, 3          ; Store the raw index xmm5d[3].\n+\n+;\n+; \"Scale\" the index (such that we can use it in a subsequent vmovdqa) by\n+; shifting left by 4 (i.e. multiply by '(sizeof STRING_SLOT)', which is 16).\n+;\n+; Then, load the string table slot at this index into xmm1, then shift rax back.\n+;\n+\n+        shl         eax, 4\n+        vpextrq     r8, xmm2, 0\n+        vmovdqa     xmm1, xmmword ptr [rax + StringTable.Slots[r8]]\n+        shr         eax, 4\n+\n+;\n+; The search string's first 16 characters are already in xmm0.  Compare this\n+; against the slot that has just been loaded into xmm1, storing the result back\n+; into xmm1.\n+;\n+\n+        vpcmpeqb    xmm1, xmm1, xmm0            ; Compare search string to slot.\n+\n+;\n+; Convert the XMM mask into a 32-bit representation, then zero high bits after\n+; our \"search length\", which allows us to ignore the results of the comparison\n+; above for bytes that were after the search string's length, if applicable.\n+; Then, count the number of bits remaining, which tells us how many characters\n+; we matched.\n+;\n+\n+        vpmovmskb   r8d, xmm1                   ; Convert into mask.\n+        bzhi        r8d, r8d, r10d              ; Zero high bits.\n+        popcnt      r8d, r8d                    ; Count bits.\n+\n+;\n+; Load the slot length into rdx.  As xmm3 already has all the slot lengths in\n+; it, we can load rax (the current index) into xmm1 and use it to extract the\n+; slot length via shuffle.  (The length will be in the lowest byte of xmm1\n+; after the shuffle, which we can then vpextrb.)\n+;\n+\n+        movd        xmm1, rax                   ; Load index into xmm1.\n+        vpshufb     xmm1, xmm3, xmm1            ; Shuffle lengths.\n+        vpextrb     rdx, xmm1, 0                ; Extract target length to rdx.\n+\n+;\n+; If 16 characters matched, and the search string's length is longer than 16,\n+; we're going to need to do a comparison of the remaining strings.\n+;\n+\n+        cmp         r8w, 16                     ; Compare chars matched to 16.\n+        je          short @F                    ; 16 chars matched.\n+        jmp         Pfx30                       ; Less than 16 matched.\n+\n+;\n+; All 16 characters matched.  If the slot length is greater than 16, we need\n+; to do an inline memory comparison of the remaining bytes.  If it's 16 exactly,\n+; then great, that's a slot match, we're done.\n+;\n+\n+@@:     cmp         dl, 16                      ; Compare length to 16.\n+        ja          Pfx50                       ; Length is &gt; 16.\n+        je          short Pfx35                 ; Lengths match!\n+                                                ; Length &lt;= 16, fall through...\n+\n+;\n+; Less than or equal to 16 characters were matched.  Compare this against the\n+; length of the slot; if equal, this is a match, if not, no match, continue.\n+;\n+\n+Pfx30:  cmp         r8b, dl                     ; Compare against slot length.\n+        jne         @F                          ; No match found.\n+        jmp         short Pfx35                 ; Match found!\n+\n+;\n+; No match against this slot, decrement counter and either continue the loop\n+; or terminate the search and return no match.\n+;\n+\n+@@:     vpextrd     edx, xmm5, 2                ; Restore rdx bitmap.\n+        dec         cx                          ; Decrement counter.\n+        jnz         Pfx20                       ; cx != 0, continue.\n+\n+        xor         eax, eax                    ; Clear rax.\n+        not         al                          ; al = -1\n+        ret                                     ; Return.\n+\n+;\n+; Pfx35 and Pfx40 are the jump targets for when the prefix match succeeds.  The\n+; former is used when we need to copy the number of characters matched from r8\n+; back to rax.  The latter jump target doesn't require this.\n+;\n+\n+Pfx35:  mov         rax, r8                     ; Copy numbers of chars matched.\n+\n+;\n+; Load the match parameter back into r8 and test to see if it's not-NULL, in\n+; which case we need to fill out a STRING_MATCH structure for the match.\n+;\n+\n+Pfx40:  vpextrq     r8, xmm5, 0                 ; Extract StringMatch.\n+        test        r8, r8                      ; Is NULL?\n+        jnz         short @F                    ; Not zero, need to fill out.\n+\n+;\n+; StringMatch is NULL, we're done. Extract index of match back into rax and ret.\n+;\n+\n+        vpextrd     eax, xmm5, 3                ; Extract raw index for match.\n+        ret                                     ; StringMatch == NULL, finish.\n+\n+;\n+; StringMatch is not NULL.  Fill out characters matched (currently rax), then\n+; reload the index from xmm5 into rax and save.\n+;\n+\n+@@:     mov         byte ptr StringMatch.NumberOfMatchedCharacters[r8], al\n+        vpextrd     eax, xmm5, 3                ; Extract raw index for match.\n+        mov         byte ptr StringMatch.Index[r8], al\n+\n+;\n+; Final step, loading the address of the string in the string array.  This\n+; involves going through the StringTable, so we need to load that parameter\n+; back into rcx, then resolving the string array address via pStringArray,\n+; then the relevant STRING offset within the StringArray.Strings structure.\n+;\n+\n+        vpextrq     rcx, xmm2, 0            ; Extract StringTable into rcx.\n+        mov         rcx, StringTable.pStringArray[rcx] ; Load string array.\n+\n+        shl         eax, 4                  ; Scale the index; sizeof STRING=16.\n+        lea         rdx, [rax + StringArray.Strings[rcx]] ; Resolve address.\n+        mov         qword ptr StringMatch.String[r8], rdx ; Save STRING ptr.\n+        shr         eax, 4                  ; Revert the scaling.\n+\n         ret\n\n+;\n+; 16 characters matched and the length of the underlying slot is greater than\n+; 16, so we need to do a little memory comparison to determine if the search\n+; string is a prefix match.\n+;\n+; The slot length is stored in rax at this point, and the search string's\n+; length is stored in r11.  We know that the search string's length will\n+; always be longer than or equal to the slot length at this point, so, we\n+; can subtract 16 (currently stored in r10) from rax, and use the resulting\n+; value as a loop counter, comparing the search string with the underlying\n+; string slot byte-by-byte to determine if there's a match.\n+;\n+\n+Pfx50:  sub         rdx, r10                ; Subtract 16 from search length.\n+\n+;\n+; Free up some registers by stashing their values into various xmm offsets.\n+;\n+\n+        vpinsrb     xmm4, xmm4, ecx, 2      ; Free up rcx register.\n+        mov         rcx, rdx                ; Free up rdx, rcx is now counter.\n+\n+;\n+; Load the search string buffer and advance it 16 bytes.\n+;\n+\n+        vpextrq     r11, xmm2, 1            ; Extract String into r11.\n+        mov         r11, String.Buffer[r11] ; Load buffer address.\n+        add         r11, r10                ; Advance buffer 16 bytes.\n+\n+;\n+; Loading the slot is more involved as we have to go to the string table, then\n+; the pStringArray pointer, then the relevant STRING offset within the string\n+; array (which requires re-loading the index from xmm5d[3]), then the string\n+; buffer from that structure.\n+;\n+\n+        vpextrq     r8, xmm2, 0             ; Extract StringTable into r8.\n+        mov         r8, StringTable.pStringArray[r8] ; Load string array.\n+\n+        shl         eax, 4                  ; Scale the index; sizeof STRING=16.\n+\n+        lea         r8, [rax + StringArray.Strings[r8]] ; Resolve address.\n+        mov         r8, String.Buffer[r8]   ; Load string table buffer address.\n+        add         r8, r10                 ; Advance buffer 16 bytes.\n+\n+        xor         eax, eax                ; Clear eax.\n+\n+;\n+; We've got both buffer addresses + 16 bytes loaded in r11 and r8 respectively.\n+; Do a byte-by-byte comparison.\n+;\n+\n+        align 16\n+@@:     mov         dl, byte ptr [rax + r11]    ; Load byte from search string.\n+        cmp         dl, byte ptr [rax + r8]     ; Compare against target.\n+        jne         short Pfx60                 ; If not equal, jump.\n+\n+;\n+; The two bytes were equal, update rax, decrement rcx and potentially continue\n+; the loop.\n+;\n+\n+        inc         ax                          ; Increment index.\n+        loopnz      @B                          ; Decrement cx and loop back.\n+\n+;\n+; All bytes matched!  Add 16 (still in r10) back to rax such that it captures\n+; how many characters we matched, and then jump to Pfx40 for finalization.\n+;\n+\n+        add         rax, r10\n+        jmp         Pfx40\n+\n+;\n+; Byte comparisons were not equal.  Restore the rcx loop counter and decrement\n+; it.  If it's zero, we have no more strings to compare, so we can do a quick\n+; exit.  If there are still comparisons to be made, restore the other registers\n+; we trampled then jump back to the start of the loop Pfx20.\n+;\n+\n+Pfx60:  vpextrb     rcx, xmm4, 2                ; Restore rcx counter.\n+        dec         cx                          ; Decrement counter.\n+        jnz         short @F                    ; Jump forward if not zero.\n+\n+;\n+; No more comparisons remaining, return.\n+;\n+\n+        xor         eax, eax                    ; Clear rax.\n+        not         al                          ; al = -1\n+        ret                                     ; Return.\n+\n+;\n+; More comparisons remain; restore the registers we clobbered and continue loop.\n+;\n+\n+@@:     vpextrb     r10, xmm4, 1                ; Restore r10.\n+        vpextrb     r11, xmm4, 0                ; Restore r11.\n+        vpextrd     edx, xmm5, 2                ; Restore rdx bitmap.\n+        jmp         Pfx20                       ; Continue comparisons.\n+\n         ;IACA_VC_END\n\n-        LEAF_END   IsPrefixOfStringInTable_x64_1, _TEXT$00\n+        LEAF_END   IsPrefixOfStringInTable_x64_2, _TEXT$00\n\n ; vim:set tw=80 ts=8 sw=4 sts=4 et syntax=masm fo=croql comments=\\:;           :\n\n\n\nLooking back on my time logs (shout out to my favorite iPhone app, HoursTracker!), the routine above took about 8 hours to implement over the course of about two days, give or take. Writing assembly is slow; writing correct assembly is even slower. I generally find that there’s a noticeable hump I need to get over in the first, say, 30 minutes of any assembly programming session, but once you get into the zone, things can start flowing quite nicely. I’m an aggressive debugger user; often, to get started, I’ll write a simple LEAF_ENTRY that looks like this:\n    LEAF_ENTRY Foo, _TEXT$00\n        int 3\n        xor eax, eax\n        ret\n    LEAF_END Foo, _TEXT$00\nThat’ll allow me to attach the debugger and at least inspect the parameter registers so I can write the next couple of instructions. I find it definitely helps get me into the zone quicker.\nAnyway, enough about that. Let’s look at performance. Again, this will be an interesting one—other than the optimal negative match logic that I copied from version 1, the sole focus was on getting a working assembly version; I wasn’t giving any thought to performance at this stage.\nSo, it’ll be interesting to see how it compares to a) version 1 in the negative matching case (it should be very close), and b) against the C versions in the prefix matching case (it hopefully won’t be prohibitively worse).\n\n\nBenchmark x64 2: Negative Matching\n\n\n\nBenchmark Negative Match\n\n\nHmmm, that’s not too bad! We’re very close to version 1 for negative matching, within about 0.5 cycles or so. That sounds about right, given that our initial logic had to be tweaked a bit to play nicer with the rest of the implementation. And we’re still about 3-4 cycles faster than the fastest C version.\nWhat about prefix matching performance?\n\n\nBenchmark x64 2: Prefix Matching\n\n\n\nBenchmark Prefix Match\n\n\nThe prefix matching performance isn’t too bad either! We’re definitely slower than the C version, ranging from about 4 cycles to 10 cycles in most cases, with the $INDEX_ALLOCATION input about 13 cycles slower.\n  (I’ve just noticed the pattern with regards to the first 8 entries, $AttrDef to $Mft, clocking in at about 18 and 24 cycles respectively. But the next four entries, $Secure to $Cairo, consistently clock in at about 24 and 34 cycles respectively. $Secure is the 9th slot, which puts it at memory offset 192 bytes from the start of the string table. And then the 18 and 24 cycle behavior returns for the last two items, ???? and ., which are at the end of the string table’s inner slot array. This pattern is prevalent in all of our iterations. Very peculiar! We’ll investigate later.) \n\n\nIsPrefixOfStringInTable_x64_3\n← IsPrefixOfStringInTable_x64_2 | IsPrefixOfStringInTable_x64_4 →\n(We’re nearly at the end of the first round of iterations, I promise!)\nSeeing the performance of the second version in assembly, I decided to try whipping up a third version, which would switch from a LEAF_ENTRY to NESTED_ENTRY and use rep cmps for the byte comparison for long strings (instead of the byte-by-byte approach used now).\nIn order to use rep cmps, you need to use two non-volatile registers, rsi (the source index) and rdi (the destination index). You also need to specify the direction of the comparison, which means mutating the flags, which are also classed as non-volatile, so they need to be pushed to the stack in the prologue and popped back off in the epilogue.\nI didn’t really expect this to offer a measurable speedup, but it was a tangible reason to use a NESTED_ENTRY, and otherwise allowed me to stay within the confines of the version 2 implementation.\nLet’s take a look at the implementation. At the very least, it’s useful to see how you can go about organizing your prologue in MASM. For NESTED_ENTRY routines, I always define a Locals structure that incorporates the return address and home parameter space for easy access. Mainly because it allows me to write code like this:\n    mov     Locals.HomeRcx[rsp], rcx        ; Home our first param.\n    mov     Locals.HomeRdx[rsp], rdx        ; Home our second param.\n    mov     rsi, Locals.SavedRsi[rsp]       ; Restore rsi.\n    mov     rdi, Locals.SavedRdi[rsp]       ; Restore rdi.\nInstead of working wiht offsets like this:\n    mov     qword ptr [rsp+30h], rcx        ; Home our first param.\n    mov     qword ptr [rsp+38h], rdx        ; Home our second param.\n    mov     rsi, qword ptr [rsp+10h]        ; Restore rsi.\n    mov     rdi, qword ptr [rsp+8]          ; Restore rdi.\nThis routine was written last, after version 10 of the C routine, so it incorporates the slightly re-arranged loop logic that proved to be faster for that version. Other than that, the main changes involved converting all the early exit returns in the body of the function to jump to a single exit point, Pfx90, mainly to simplify epilogue exit code.\n\nDiffFull\n\n\n % diff -u IsPrefixOfStringInTable_x64_2.asm IsPrefixOfStringInTable_x64_3.asm\n--- IsPrefixOfStringInTable_x64_2.asm   2018-04-26 14:15:53.805409700 -0400\n+++ IsPrefixOfStringInTable_x64_3.asm   2018-04-29 16:01:10.033827200 -0400\n@@ -18,6 +18,31 @@\n\n include StringTable.inc\n\n+;\n+; Define a locals struct for saving flags, rsi and rdi.\n+;\n+\n+Locals struct\n+\n+    Padding             dq      ?\n+    SavedRdi            dq      ?\n+    SavedRsi            dq      ?\n+    SavedFlags          dq      ?\n+\n+    ReturnAddress       dq      ?\n+    HomeRcx             dq      ?\n+    HomeRdx             dq      ?\n+    HomeR8              dq      ?\n+    HomeR9              dq      ?\n+\n+Locals ends\n+\n+;\n+; Exclude the return address onward from the frame calculation size.\n+;\n+\n+LOCALS_SIZE  equ ((sizeof Locals) + (Locals.ReturnAddress - (sizeof Locals)))\n+\n ;++\n ;\n ; STRING_TABLE_INDEX\n@@ -33,6 +58,14 @@\n ;   search string.  That is, whether any string in the table \"starts with\n ;   or is equal to\" the search string.\n ;\n+;   This routine is based off version 2.  It has been converted into a nested\n+;   entry (version 2 is a leaf entry), and uses 'repe cmpsb' to do the string\n+;   comparison for long strings (instead of the byte-by-byte comparison used\n+;   in version 2).  This requires use of the rsi and rdi registers, and the\n+;   direction flag.  These are all non-volatile registers and thus, must be\n+;   saved to the stack in the function prologue (hence the need to make this\n+;   a nested entry).\n+;\n ; Arguments:\n ;\n ;   StringTable - Supplies a pointer to a STRING_TABLE struct.\n@@ -50,7 +83,19 @@\n ;\n ;--\n\n-        LEAF_ENTRY IsPrefixOfStringInTable_x64_2, _TEXT$00\n+        NESTED_ENTRY IsPrefixOfStringInTable_x64_3, _TEXT$00\n+\n+;\n+; Begin prologue.  Allocate stack space and save non-volatile registers.\n+;\n+\n+        alloc_stack LOCALS_SIZE                     ; Allocate stack space.\n+\n+        push_eflags                                 ; Save flags.\n+        save_reg    rsi, Locals.SavedRsi            ; Save non-volatile rsi.\n+        save_reg    rdi, Locals.SavedRdi            ; Save non-volatile rdi.\n+\n+        END_PROLOGUE\n\n ;\n ; Load the string buffer into xmm0, and the unique indexes from the string table\n@@ -120,7 +165,7 @@\n\n         xor         eax, eax                    ; Clear rax.\n         not         al                          ; al = -1\n-        ret                                     ; Return.\n+        jmp         Pfx90                       ; Return.\n\n         ;IACA_VC_END\n\n@@ -214,7 +259,7 @@\n ;\n ;   rcx - Loop counter.\n ;\n-;   rdx - Bitmap initially, then slot length.\n+;   rdx - Bitmap.\n ;\n ;   r9 - Shift count.\n ;\n@@ -228,8 +273,6 @@\n         add         rax, r9                     ; Add shift to create index.\n         inc         r8                          ; tzcnt + 1\n         shrx        rdx, rdx, r8                ; Reposition bitmap.\n-        vpinsrd     xmm5, xmm5, edx, 2          ; Store bitmap, free up rdx.\n-        xor         edx, edx                    ; Clear edx.\n         mov         r9, rax                     ; Copy index back to shift.\n         inc         r9                          ; Shift = Index + 1\n         vpinsrd     xmm5, xmm5, eax, 3          ; Store the raw index xmm5d[3].\n@@ -252,7 +295,7 @@\n ; into xmm1.\n ;\n\n-        vpcmpeqb    xmm1, xmm1, xmm0            ; Compare search string to slot.\n+        vpcmpeqb    xmm1, xmm0, xmm1            ; Compare search string to slot.\n\n ;\n ; Convert the XMM mask into a 32-bit representation, then zero high bits after\n@@ -267,17 +310,6 @@\n         popcnt      r8d, r8d                    ; Count bits.\n\n ;\n-; Load the slot length into rdx.  As xmm3 already has all the slot lengths in\n-; it, we can load rax (the current index) into xmm1 and use it to extract the\n-; slot length via shuffle.  (The length will be in the lowest byte of xmm1\n-; after the shuffle, which we can then vpextrb.)\n-;\n-\n-        movd        xmm1, rax                   ; Load index into xmm1.\n-        vpshufb     xmm1, xmm3, xmm1            ; Shuffle lengths.\n-        vpextrb     rdx, xmm1, 0                ; Extract target length to rdx.\n-\n-;\n ; If 16 characters matched, and the search string's length is longer than 16,\n ; we're going to need to do a comparison of the remaining strings.\n ;\n@@ -287,37 +319,38 @@\n         jmp         Pfx30                       ; Less than 16 matched.\n\n ;\n-; All 16 characters matched.  If the slot length is greater than 16, we need\n-; to do an inline memory comparison of the remaining bytes.  If it's 16 exactly,\n-; then great, that's a slot match, we're done.\n+; All 16 characters matched.  Load the underlying slot's length from the\n+; relevant offset in the xmm3 register, then check to see if it's greater than,\n+; equal or less than 16.\n ;\n\n-@@:     cmp         dl, 16                      ; Compare length to 16.\n+@@:     movd        xmm1, rax                   ; Load into xmm1.\n+        vpshufb     xmm1, xmm3, xmm1            ; Shuffle length...\n+        vpextrb     rax, xmm1, 0                ; And extract back into rax.\n+        cmp         al, 16                      ; Compare length to 16.\n         ja          Pfx50                       ; Length is &gt; 16.\n         je          short Pfx35                 ; Lengths match!\n                                                 ; Length &lt;= 16, fall through...\n\n ;\n ; Less than or equal to 16 characters were matched.  Compare this against the\n-; length of the slot; if equal, this is a match, if not, no match, continue.\n+; length of the search string; if equal, this is a match.\n ;\n\n-Pfx30:  cmp         r8b, dl                     ; Compare against slot length.\n-        jne         @F                          ; No match found.\n-        jmp         short Pfx35                 ; Match found!\n+Pfx30:  cmp         r8d, r10d                   ; Compare against search string.\n+        je          short Pfx35                 ; Match found!\n\n ;\n ; No match against this slot, decrement counter and either continue the loop\n ; or terminate the search and return no match.\n ;\n\n-@@:     vpextrd     edx, xmm5, 2                ; Restore rdx bitmap.\n         dec         cx                          ; Decrement counter.\n         jnz         Pfx20                       ; cx != 0, continue.\n\n         xor         eax, eax                    ; Clear rax.\n         not         al                          ; al = -1\n-        ret                                     ; Return.\n+        jmp         Pfx90                       ; Return.\n\n ;\n ; Pfx35 and Pfx40 are the jump targets for when the prefix match succeeds.  The\n@@ -341,7 +374,7 @@\n ;\n\n         vpextrd     eax, xmm5, 3                ; Extract raw index for match.\n-        ret                                     ; StringMatch == NULL, finish.\n+        jmp         Pfx90                       ; StringMatch == NULL, finish.\n\n ;\n ; StringMatch is not NULL.  Fill out characters matched (currently rax), then\n@@ -367,7 +400,7 @@\n         mov         qword ptr StringMatch.String[r8], rdx ; Save STRING ptr.\n         shr         eax, 4                  ; Revert the scaling.\n\n-        ret\n+        jmp         Pfx90\n\n ;\n ; 16 characters matched and the length of the underlying slot is greater than\n@@ -382,14 +415,15 @@\n ; string slot byte-by-byte to determine if there's a match.\n ;\n\n-Pfx50:  sub         rdx, r10                ; Subtract 16 from search length.\n+Pfx50:  sub         rax, r10                ; Subtract 16 from search length.\n\n ;\n ; Free up some registers by stashing their values into various xmm offsets.\n ;\n\n+        vpinsrd     xmm5, xmm5, edx, 2      ; Free up rdx register.\n         vpinsrb     xmm4, xmm4, ecx, 2      ; Free up rcx register.\n-        mov         rcx, rdx                ; Free up rdx, rcx is now counter.\n+        mov         rcx, rax                ; Free up rax, rcx is now counter.\n\n ;\n ; Load the search string buffer and advance it 16 bytes.\n@@ -409,31 +443,27 @@\n         vpextrq     r8, xmm2, 0             ; Extract StringTable into r8.\n         mov         r8, StringTable.pStringArray[r8] ; Load string array.\n\n+        vpextrd     eax, xmm5, 3            ; Extract index from xmm5.\n         shl         eax, 4                  ; Scale the index; sizeof STRING=16.\n\n         lea         r8, [rax + StringArray.Strings[r8]] ; Resolve address.\n         mov         r8, String.Buffer[r8]   ; Load string table buffer address.\n         add         r8, r10                 ; Advance buffer 16 bytes.\n\n-        xor         eax, eax                ; Clear eax.\n+        mov         rax, rcx                ; Copy counter.\n\n ;\n ; We've got both buffer addresses + 16 bytes loaded in r11 and r8 respectively.\n-; Do a byte-by-byte comparison.\n+; Set up rsi/rdi so we can do a 'rep cmps'.\n ;\n\n-        align 16\n-@@:     mov         dl, byte ptr [rax + r11]    ; Load byte from search string.\n-        cmp         dl, byte ptr [rax + r8]     ; Compare against target.\n-        jne         short Pfx60                 ; If not equal, jump.\n-\n-;\n-; The two bytes were equal, update rax, decrement rcx and potentially continue\n-; the loop.\n-;\n+        cld\n+        mov         rsi, r11\n+        mov         rdi, r8\n+        repe        cmpsb\n\n-        inc         ax                          ; Increment index.\n-        loopnz      @B                          ; Decrement cx and loop back.\n+        test        cl, 0\n+        jnz         short Pfx60                 ; Not all bytes compared, jump.\n\n ;\n ; All bytes matched!  Add 16 (still in r10) back to rax such that it captures\n@@ -460,7 +490,7 @@\n\n         xor         eax, eax                    ; Clear rax.\n         not         al                          ; al = -1\n-        ret                                     ; Return.\n+        jmp Pfx90                               ; Return.\n\n ;\n ; More comparisons remain; restore the registers we clobbered and continue loop.\n@@ -473,7 +503,17 @@\n\n         ;IACA_VC_END\n\n-        LEAF_END   IsPrefixOfStringInTable_x64_2, _TEXT$00\n+        align   16\n+\n+Pfx90:  mov     rsi, Locals.SavedRsi[rsp]       ; Restore rsi.\n+        mov     rdi, Locals.SavedRdi[rsp]       ; Restore rdi.\n+        popfq                                   ; Restore flags.\n+        add     rsp, LOCALS_SIZE                ; Deallocate stack space.\n+\n+        ret\n+\n+        NESTED_END   IsPrefixOfStringInTable_x64_3, _TEXT$00\n+\n\n ; vim:set tw=80 ts=8 sw=4 sts=4 et syntax=masm fo=croql comments=\\:;           :\n\n\n;\n; Define a locals struct for saving flags, rsi and rdi.\n;\n\nLocals struct\n\n    Padding             dq      ?\n    SavedRdi            dq      ?\n    SavedRsi            dq      ?\n    SavedFlags          dq      ?\n\n    ReturnAddress       dq      ?\n    HomeRcx             dq      ?\n    HomeRdx             dq      ?\n    HomeR8              dq      ?\n    HomeR9              dq      ?\n\nLocals ends\n\n;\n; Exclude the return address onward from the frame calculation size.\n;\n\nLOCALS_SIZE  equ ((sizeof Locals) + (Locals.ReturnAddress - (sizeof Locals)))\n\n;++\n;\n; STRING_TABLE_INDEX\n; IsPrefixOfStringInTable_x64_*(\n;     _In_ PSTRING_TABLE StringTable,\n;     _In_ PSTRING String,\n;     _Out_opt_ PSTRING_MATCH Match\n;     )\n;\n; Routine Description:\n;\n;   Searches a string table to see if any strings \"prefix match\" the given\n;   search string.  That is, whether any string in the table \"starts with\n;   or is equal to\" the search string.\n;\n;   This routine is based off version 2.  It has been converted into a nested\n;   entry (version 2 is a leaf entry), and uses 'rep cmpsb' to do the string\n;   comparison for long strings (instead of the byte-by-byte comparison used\n;   in version 2).  This requires use of the rsi and rdi registers, and the\n;   direction flag.  These are all non-volatile registers and thus, must be\n;   saved to the stack in the function prologue (hence the need to make this\n;   a nested entry).\n;\n; Arguments:\n;\n;   StringTable - Supplies a pointer to a STRING_TABLE struct.\n;\n;   String - Supplies a pointer to a STRING struct that contains the string to\n;       search for.\n;\n;   Match - Optionally supplies a pointer to a variable that contains the\n;       address of a STRING_MATCH structure.  This will be populated with\n;       additional details about the match if a non-NULL pointer is supplied.\n;\n; Return Value:\n;\n;   Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n;\n;--\n\n        NESTED_ENTRY IsPrefixOfStringInTable_x64_3, _TEXT$00\n\n;\n; Begin prologue.  Allocate stack space and save non-volatile registers.\n;\n\n        alloc_stack LOCALS_SIZE                     ; Allocate stack space.\n\n        push_eflags                                 ; Save flags.\n        save_reg    rsi, Locals.SavedRsi            ; Save non-volatile rsi.\n        save_reg    rdi, Locals.SavedRdi            ; Save non-volatile rdi.\n\n        END_PROLOGUE\n\n;\n; Load the string buffer into xmm0, and the unique indexes from the string table\n; into xmm1.  Shuffle the buffer according to the unique indexes, and store the\n; result into xmm5.\n;\n\n        ;IACA_VC_START\n\n        mov     rax, String.Buffer[rdx]\n        vmovdqu xmm0, xmmword ptr [rax]                 ; Load search buffer.\n        vmovdqa xmm1, xmmword ptr StringTable.UniqueIndex[rcx] ; Load indexes.\n        vpshufb xmm5, xmm0, xmm1\n\n;\n; Load the string table's unique character array into xmm2.\n\n        vmovdqa xmm2, xmmword ptr StringTable.UniqueChars[rcx]  ; Load chars.\n\n;\n; Compare the search string's unique character array (xmm5) against the string\n; table's unique chars (xmm2), saving the result back into xmm5.\n;\n\n        vpcmpeqb    xmm5, xmm5, xmm2            ; Compare unique chars.\n\n;\n; Load the lengths of each string table slot into xmm3.\n;\n        vmovdqa xmm3, xmmword ptr StringTable.Lengths[rcx]      ; Load lengths.\n\n;\n; Set xmm2 to all ones.  We use this later to invert the length comparison.\n;\n\n        vpcmpeqq    xmm2, xmm2, xmm2            ; Set xmm2 to all ones.\n\n;\n; Broadcast the byte-sized string length into xmm4.\n;\n\n        vpbroadcastb xmm4, byte ptr String.Length[rdx]  ; Broadcast length.\n\n;\n; Compare the search string's length, which we've broadcasted to all 8-byte\n; elements of the xmm4 register, to the lengths of the slots in the string\n; table, to find those that are greater in length.  Invert the result, such\n; that we're left with a masked register where each 0xff element indicates\n; a slot with a length less than or equal to our search string's length.\n;\n\n        vpcmpgtb    xmm1, xmm3, xmm4            ; Identify long slots.\n        vpxor       xmm1, xmm1, xmm2            ; Invert the result.\n\n;\n; Intersect-and-test the unique character match xmm mask register (xmm5) with\n; the length match mask xmm register (xmm1).  This affects flags, allowing us\n; to do a fast-path exit for the no-match case (where ZF = 1).\n;\n\n        vptest      xmm5, xmm1                  ; Check for no match.\n        jnz         short Pfx10                 ; There was a match.\n\n;\n; No match, set rax to -1 and return.\n;\n\n        xor         eax, eax                    ; Clear rax.\n        not         al                          ; al = -1\n        jmp         Pfx90                       ; Return.\n\n        ;IACA_VC_END\n\n;\n; (There was at least one match, continue with processing.)\n;\n\n;\n; Calculate the \"search length\" for the incoming search string, which is\n; equivalent of 'min(String-&gt;Length, 16)'.  (The search string's length\n; currently lives in xmm4, albeit as a byte-value broadcasted across the\n; entire register, so extract that first.)\n;\n; Once the search length is calculated, deposit it back at the second byte\n; location of xmm4.\n;\n;   r10 and xmm4[15:8] - Search length (min(String-&gt;Length, 16))\n;\n;   r11 - String length (String-&gt;Length)\n;\n\nPfx10:  vpextrb     r11, xmm4, 0                ; Load length.\n        mov         rax, 16                     ; Load 16 into rax.\n        mov         r10, r11                    ; Copy into r10.\n        cmp         r10w, ax                    ; Compare against 16.\n        cmova       r10w, ax                    ; Use 16 if length is greater.\n        vpinsrb     xmm4, xmm4, r10d, 1         ; Save back to xmm4b[1].\n\n;\n; Home our parameter registers into xmm registers instead of their stack-backed\n; location, to avoid memory writes.\n;\n\n        vpxor       xmm2, xmm2, xmm2            ; Clear xmm2.\n        vpinsrq     xmm2, xmm2, rcx, 0          ; Save rcx into xmm2q[0].\n        vpinsrq     xmm2, xmm2, rdx, 1          ; Save rdx into xmm2q[1].\n\n;\n; Intersect xmm5 and xmm1 (as we did earlier with the 'vptest xmm5, xmm1'),\n; yielding a mask identifying indices we need to perform subsequent matches\n; upon.  Convert this into a bitmap and save in xmm2d[2].\n;\n\n        vpand       xmm5, xmm5, xmm1            ; Intersect unique + lengths.\n        vpmovmskb   edx, xmm5                   ; Generate a bitmap from mask.\n\n;\n; We're finished with xmm5; repurpose it in the same vein as xmm2 above.\n;\n\n        vpxor       xmm5, xmm5, xmm5            ; Clear xmm5.\n        vpinsrq     xmm5, xmm5, r8, 0           ; Save r8 into xmm5q[0].\n\n;\n; Summary of xmm register stashing for the rest of the routine:\n;\n; xmm2:\n;        0:63   (vpinsrq 0)     rcx (1st function parameter, StringTable)\n;       64:127  (vpinsrq 1)     rdx (2nd function paramter, String)\n;\n; xmm4:\n;       0:7     (vpinsrb 0)     length of search string\n;       8:15    (vpinsrb 1)     min(String-&gt;Length, 16)\n;      16:23    (vpinsrb 2)     loop counter (when doing long string compares)\n;      24:31    (vpinsrb 3)     shift count\n;\n; xmm5:\n;       0:63    (vpinsrq 0)     r8 (3rd function parameter, StringMatch)\n;      64:95    (vpinsrd 2)     bitmap of slots to compare\n;      96:127   (vpinsrd 3)     index of slot currently being processed\n;\n\n;\n; Initialize rcx as our counter register by doing a popcnt against the bitmap\n; we just generated in edx, and clear our shift count register (r9).\n;\n\n        popcnt      ecx, edx                    ; Count bits in bitmap.\n        xor         r9, r9                      ; Clear r9.\n\n        align 16\n\n;\n; Top of the main comparison loop.  The bitmap will be present in rdx.  Count\n; trailing zeros of the bitmap, and then add in the shift count, producing an\n; index (rax) we can use to load the corresponding slot.\n;\n; Register usage at top of loop:\n;\n;   rax - Index.\n;\n;   rcx - Loop counter.\n;\n;   rdx - Bitmap.\n;\n;   r9 - Shift count.\n;\n;   r10 - Search length.\n;\n;   r11 - String length.\n;\n\nPfx20:  tzcnt       r8d, edx                    ; Count trailing zeros.\n        mov         eax, r8d                    ; Copy tzcnt to rax,\n        add         rax, r9                     ; Add shift to create index.\n        inc         r8                          ; tzcnt + 1\n        shrx        rdx, rdx, r8                ; Reposition bitmap.\n        mov         r9, rax                     ; Copy index back to shift.\n        inc         r9                          ; Shift = Index + 1\n        vpinsrd     xmm5, xmm5, eax, 3          ; Store the raw index xmm5d[3].\n\n;\n; \"Scale\" the index (such that we can use it in a subsequent vmovdqa) by\n; shifting left by 4 (i.e. multiply by '(sizeof STRING_SLOT)', which is 16).\n;\n; Then, load the string table slot at this index into xmm1, then shift rax back.\n;\n\n        shl         eax, 4\n        vpextrq     r8, xmm2, 0\n        vmovdqa     xmm1, xmmword ptr [rax + StringTable.Slots[r8]]\n        shr         eax, 4\n\n;\n; The search string's first 16 characters are already in xmm0.  Compare this\n; against the slot that has just been loaded into xmm1, storing the result back\n; into xmm1.\n;\n\n        vpcmpeqb    xmm1, xmm0, xmm1            ; Compare search string to slot.\n\n;\n; Convert the XMM mask into a 32-bit representation, then zero high bits after\n; our \"search length\", which allows us to ignore the results of the comparison\n; above for bytes that were after the search string's length, if applicable.\n; Then, count the number of bits remaining, which tells us how many characters\n; we matched.\n;\n\n        vpmovmskb   r8d, xmm1                   ; Convert into mask.\n        bzhi        r8d, r8d, r10d              ; Zero high bits.\n        popcnt      r8d, r8d                    ; Count bits.\n\n;\n; If 16 characters matched, and the search string's length is longer than 16,\n; we're going to need to do a comparison of the remaining strings.\n;\n\n        cmp         r8w, 16                     ; Compare chars matched to 16.\n        je          short @F                    ; 16 chars matched.\n        jmp         Pfx30                       ; Less than 16 matched.\n\n;\n; All 16 characters matched.  Load the underlying slot's length from the\n; relevant offset in the xmm3 register, then check to see if it's greater than,\n; equal or less than 16.\n;\n\n@@:     movd        xmm1, rax                   ; Load into xmm1.\n        vpshufb     xmm1, xmm3, xmm1            ; Shuffle length...\n        vpextrb     rax, xmm1, 0                ; And extract back into rax.\n        cmp         al, 16                      ; Compare length to 16.\n        ja          Pfx50                       ; Length is &gt; 16.\n        je          short Pfx35                 ; Lengths match!\n                                                ; Length &lt;= 16, fall through...\n\n;\n; Less than or equal to 16 characters were matched.  Compare this against the\n; length of the search string; if equal, this is a match.\n;\n\nPfx30:  cmp         r8d, r10d                   ; Compare against search string.\n        je          short Pfx35                 ; Match found!\n\n;\n; No match against this slot, decrement counter and either continue the loop\n; or terminate the search and return no match.\n;\n\n        dec         cx                          ; Decrement counter.\n        jnz         Pfx20                       ; cx != 0, continue.\n\n        xor         eax, eax                    ; Clear rax.\n        not         al                          ; al = -1\n        jmp         Pfx90                       ; Return.\n\n;\n; Pfx35 and Pfx40 are the jump targets for when the prefix match succeeds.  The\n; former is used when we need to copy the number of characters matched from r8\n; back to rax.  The latter jump target doesn't require this.\n;\n\nPfx35:  mov         rax, r8                     ; Copy numbers of chars matched.\n\n;\n; Load the match parameter back into r8 and test to see if it's not-NULL, in\n; which case we need to fill out a STRING_MATCH structure for the match.\n;\n\nPfx40:  vpextrq     r8, xmm5, 0                 ; Extract StringMatch.\n        test        r8, r8                      ; Is NULL?\n        jnz         short @F                    ; Not zero, need to fill out.\n\n;\n; StringMatch is NULL, we're done. Extract index of match back into rax and ret.\n;\n\n        vpextrd     eax, xmm5, 3                ; Extract raw index for match.\n        jmp         Pfx90                       ; StringMatch == NULL, finish.\n\n;\n; StringMatch is not NULL.  Fill out characters matched (currently rax), then\n; reload the index from xmm5 into rax and save.\n;\n\n@@:     mov         byte ptr StringMatch.NumberOfMatchedCharacters[r8], al\n        vpextrd     eax, xmm5, 3                ; Extract raw index for match.\n        mov         byte ptr StringMatch.Index[r8], al\n\n;\n; Final step, loading the address of the string in the string array.  This\n; involves going through the StringTable, so we need to load that parameter\n; back into rcx, then resolving the string array address via pStringArray,\n; then the relevant STRING offset within the StringArray.Strings structure.\n;\n\n        vpextrq     rcx, xmm2, 0            ; Extract StringTable into rcx.\n        mov         rcx, StringTable.pStringArray[rcx] ; Load string array.\n\n        shl         eax, 4                  ; Scale the index; sizeof STRING=16.\n        lea         rdx, [rax + StringArray.Strings[rcx]] ; Resolve address.\n        mov         qword ptr StringMatch.String[r8], rdx ; Save STRING ptr.\n        shr         eax, 4                  ; Revert the scaling.\n\n        jmp         Pfx90\n\n;\n; 16 characters matched and the length of the underlying slot is greater than\n; 16, so we need to do a little memory comparison to determine if the search\n; string is a prefix match.\n;\n; The slot length is stored in rax at this point, and the search string's\n; length is stored in r11.  We know that the search string's length will\n; always be longer than or equal to the slot length at this point, so, we\n; can subtract 16 (currently stored in r10) from rax, and use the resulting\n; value as a loop counter, comparing the search string with the underlying\n; string slot byte-by-byte to determine if there's a match.\n;\n\nPfx50:  sub         rax, r10                ; Subtract 16 from search length.\n\n;\n; Free up some registers by stashing their values into various xmm offsets.\n;\n\n        vpinsrd     xmm5, xmm5, edx, 2      ; Free up rdx register.\n        vpinsrb     xmm4, xmm4, ecx, 2      ; Free up rcx register.\n        mov         rcx, rax                ; Free up rax, rcx is now counter.\n\n;\n; Load the search string buffer and advance it 16 bytes.\n;\n\n        vpextrq     r11, xmm2, 1            ; Extract String into r11.\n        mov         r11, String.Buffer[r11] ; Load buffer address.\n        add         r11, r10                ; Advance buffer 16 bytes.\n\n;\n; Loading the slot is more involved as we have to go to the string table, then\n; the pStringArray pointer, then the relevant STRING offset within the string\n; array (which requires re-loading the index from xmm5d[3]), then the string\n; buffer from that structure.\n;\n\n        vpextrq     r8, xmm2, 0             ; Extract StringTable into r8.\n        mov         r8, StringTable.pStringArray[r8] ; Load string array.\n\n        vpextrd     eax, xmm5, 3            ; Extract index from xmm5.\n        shl         eax, 4                  ; Scale the index; sizeof STRING=16.\n\n        lea         r8, [rax + StringArray.Strings[r8]] ; Resolve address.\n        mov         r8, String.Buffer[r8]   ; Load string table buffer address.\n        add         r8, r10                 ; Advance buffer 16 bytes.\n\n        mov         rax, rcx                ; Copy counter.\n\n;\n; We've got both buffer addresses + 16 bytes loaded in r11 and r8 respectively.\n; Set up rsi/rdi so we can do a 'rep cmps'.\n;\n\n        cld\n        mov         rsi, r11\n        mov         rdi, r8\n        repe        cmpsb\n\n        test        cl, 0\n        jnz         short Pfx60                 ; Not all bytes compared, jump.\n\n;\n; All bytes matched!  Add 16 (still in r10) back to rax such that it captures\n; how many characters we matched, and then jump to Pfx40 for finalization.\n;\n\n        add         rax, r10\n        jmp         Pfx40\n\n;\n; Byte comparisons were not equal.  Restore the rcx loop counter and decrement\n; it.  If it's zero, we have no more strings to compare, so we can do a quick\n; exit.  If there are still comparisons to be made, restore the other registers\n; we trampled then jump back to the start of the loop Pfx20.\n;\n\nPfx60:  vpextrb     rcx, xmm4, 2                ; Restore rcx counter.\n        dec         cx                          ; Decrement counter.\n        jnz         short @F                    ; Jump forward if not zero.\n\n;\n; No more comparisons remaining, return.\n;\n\n        xor         eax, eax                    ; Clear rax.\n        not         al                          ; al = -1\n        jmp Pfx90                               ; Return.\n\n;\n; More comparisons remain; restore the registers we clobbered and continue loop.\n;\n\n@@:     vpextrb     r10, xmm4, 1                ; Restore r10.\n        vpextrb     r11, xmm4, 0                ; Restore r11.\n        vpextrd     edx, xmm5, 2                ; Restore rdx bitmap.\n        jmp         Pfx20                       ; Continue comparisons.\n\n        ;IACA_VC_END\n\n        align   16\n\nPfx90:  mov     rsi, Locals.SavedRsi[rsp]       ; Restore rsi.\n        mov     rdi, Locals.SavedRdi[rsp]       ; Restore rdi.\n        popfq                                   ; Restore flags.\n        add     rsp, LOCALS_SIZE                ; Deallocate stack space.\n\n        ret\n\n        NESTED_END   IsPrefixOfStringInTable_x64_3, _TEXT$00\n\n\n; vim:set tw=80 ts=8 sw=4 sts=4 et syntax=masm fo=croql comments=\\:;           :\n\n\n\nI don’t have a strong hunch as to how this will perform; like I said earlier, it was mainly done to set up the scaffolding for using a NESTED_ENTRY in the future, such that we’ll have the glue in place if we want to iterate on the disassembly of the PGO versions. If I had to guess, I suspect it will be slightly slower than version 2, but surely not by much, right? It’s a pretty minor change in the grand scheme of things. Let’s take a look.\n\n\nBenchmark x64 3\n\n\n\nBenchmark x64 3\n\n\nHah! Version 3 is much, much worse! Even its negative matching performance is terrible, which is the one thing the assembly versions have been good at so far. How peculiar.\nNow, in the interest of keeping events chronological, as much as I’d like to dive in now and figure out why, I’ll have to defer to my behavior when I encountered this performance gap: I laughed, shelved the version 3 experiment, and moved on.\nThat’s a decidedly unsatisfying end to the matter, though, I’ll admit. We’ll come back to it later in the article and try and get some closure as to why it was so slow, comparatively.\n\n\n\nInternet Feedback\nSo, at this point, with version 10 of the C routine and version 2 of the assembly version in hand, and a very early draft of this article, I solicited feedback on Twitter and got some great responses. Thanks again to Fabian Giesen, Wojciech Muła, Geoff Langdale, Daniel Lemire, and Kendall Willets for their discussion and input over the course of a few days!"
  },
  {
    "objectID": "articles/is-prefix-of-string-in-table/index.html#round2",
    "href": "articles/is-prefix-of-string-in-table/index.html#round2",
    "title": "Is Prefix Of String In Table?",
    "section": "Round 2—Post-Internet Feedback",
    "text": "Round 2—Post-Internet Feedback\nLet’s take a look at the iterations that came about after receiving feedback.\n\nIsPrefixOfStringInTable_11\n← IsPrefixOfStringInTable_10 | IsPrefixOfStringInTable_12 →\nBoth Fabian Giesen and Wojciech Muła pointed out that we could use _mm_andnot_si128() to avoid the need to invert the results of the IncludeSlotsByLength XMM register (via _mm_xor_si128()). Let’s try that.\n\nDiffFull\n\n\n% diff -u IsPrefixOfStringInTable_10.c IsPrefixOfStringInTable_11.c\n--- IsPrefixOfStringInTable_10.c        2018-04-26 10:38:09.357890400 -0400\n+++ IsPrefixOfStringInTable_11.c        2018-04-26 12:43:44.184528000 -0400\n@@ -18,7 +18,7 @@\n\n _Use_decl_annotations_\n STRING_TABLE_INDEX\n-IsPrefixOfStringInTable_10(\n+IsPrefixOfStringInTable_11(\n     PSTRING_TABLE StringTable,\n     PSTRING String,\n     PSTRING_MATCH Match\n@@ -31,8 +31,8 @@\n     search string.  That is, whether any string in the table \"starts with\n     or is equal to\" the search string.\n\n-    This version is based off version 8, but rewrites the inner loop that\n-    checks for comparisons.\n+    This version is based off version 10, but with the vpandn used at the\n+    end of the initial test, as suggested by Wojciech Mula (@pshufb).\n\n Arguments:\n\n@@ -70,9 +70,7 @@\n     XMMWORD TableUniqueChars;\n     XMMWORD IncludeSlotsByUniqueChar;\n     XMMWORD IgnoreSlotsByLength;\n-    XMMWORD IncludeSlotsByLength;\n     XMMWORD IncludeSlots;\n-    const XMMWORD AllOnesXmm = _mm_set1_epi8(0xff);\n\n     //\n     // Unconditionally do the following five operations before checking any of\n@@ -158,28 +156,25 @@\n     // N.B. Because we default the length of empty slots to 0x7f, they will\n     //      handily be included in the ignored set (i.e. their words will also\n     //      be set to 0xff), which means they'll also get filtered out when\n-    //      we invert the mask shortly after.\n+    //      we do the \"and not\" intersection with the include slots next.\n     //\n\n     IgnoreSlotsByLength = _mm_cmpgt_epi8(Lengths.SlotsXmm, LengthXmm);\n\n     //\n-    // Invert the result of the comparison; we want 0xff for slots to include\n-    // and 0x0 for slots to ignore (it's currently the other way around).  We\n-    // can achieve this by XOR'ing the result against our all-ones XMM register.\n-    //\n-\n-    IncludeSlotsByLength = _mm_xor_si128(IgnoreSlotsByLength, AllOnesXmm);\n-\n-    //\n     // We're now ready to intersect the two XMM registers to determine which\n     // slots should still be included in the comparison (i.e. which slots have\n     // the exact same unique character as the string and a length less than or\n     // equal to the length of the search string).\n     //\n+    // As the IgnoreSlotsByLength XMM register is the inverse of what we want\n+    // at the moment (we want 0xff for slots to include, and 0x00 for slots\n+    // to ignore; it's currently the other way around), we use _mm_andnot_si128\n+    // instead of just _mm_and_si128.\n+    //\n\n-    IncludeSlots = _mm_and_si128(IncludeSlotsByUniqueChar,\n-                                 IncludeSlotsByLength);\n+    IncludeSlots = _mm_andnot_si128(IgnoreSlotsByLength,\n+                                    IncludeSlotsByUniqueChar);\n\n     //\n     // Generate a mask.\n\n\n_Use_decl_annotations_\nSTRING_TABLE_INDEX\nIsPrefixOfStringInTable_11(\n    PSTRING_TABLE StringTable,\n    PSTRING String,\n    PSTRING_MATCH Match\n    )\n/*++\n\nRoutine Description:\n\n    Searches a string table to see if any strings \"prefix match\" the given\n    search string.  That is, whether any string in the table \"starts with\n    or is equal to\" the search string.\n\n    This version is based off version 10, but with the vpandn used at the\n    end of the initial test, as suggested by Wojciech Mula (@pshufb).\n\nArguments:\n\n    StringTable - Supplies a pointer to a STRING_TABLE struct.\n\n    String - Supplies a pointer to a STRING struct that contains the string to\n        search for.\n\n    Match - Optionally supplies a pointer to a variable that contains the\n        address of a STRING_MATCH structure.  This will be populated with\n        additional details about the match if a non-NULL pointer is supplied.\n\nReturn Value:\n\n    Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n\n--*/\n{\n    ULONG Bitmap;\n    ULONG Mask;\n    ULONG Count;\n    ULONG Length;\n    ULONG Index;\n    ULONG Shift = 0;\n    ULONG CharactersMatched;\n    ULONG NumberOfTrailingZeros;\n    ULONG SearchLength;\n    PSTRING TargetString;\n    STRING_SLOT Slot;\n    STRING_SLOT Search;\n    STRING_SLOT Compare;\n    SLOT_LENGTHS Lengths;\n    XMMWORD LengthXmm;\n    XMMWORD UniqueChar;\n    XMMWORD TableUniqueChars;\n    XMMWORD IncludeSlotsByUniqueChar;\n    XMMWORD IgnoreSlotsByLength;\n    XMMWORD IncludeSlots;\n\n    //\n    // Unconditionally do the following five operations before checking any of\n    // the results and determining how the search should proceed:\n    //\n    //  1. Load the search string into an Xmm register, and broadcast the\n    //     character indicated by the unique character index (relative to\n    //     other strings in the table) across a second Xmm register.\n    //\n    //  2. Load the string table's unique character array into an Xmm register.\n    //\n    //  3. Broadcast the search string's length into an XMM register.\n    //\n    //  3. Load the string table's slot lengths array into an XMM register.\n    //\n    //  4. Compare the unique character from step 1 to the string table's unique\n    //     character array set up in step 2.  The result of this comparison\n    //     will produce an XMM register with each byte set to either 0xff if\n    //     the unique character was found, or 0x0 if it wasn't.\n    //\n    //  5. Compare the search string's length from step 3 to the string table's\n    //     slot length array set up in step 3.  This allows us to identify the\n    //     slots that have strings that are of lesser or equal length to our\n    //     search string.  As we're doing a prefix search, we can ignore any\n    //     slots longer than our incoming search string.\n    //\n    // We do all five of these operations up front regardless of whether or not\n    // they're strictly necessary.  That is, if the unique character isn't in\n    // the unique character array, we don't need to load array lengths -- and\n    // vice versa.  However, we assume the benefits afforded by giving the CPU\n    // a bunch of independent things to do unconditionally up-front outweigh\n    // the cost of putting in branches and conditionally loading things if\n    // necessary.\n    //\n\n    //\n    // Load the first 16-bytes of the search string into an XMM register.\n    //\n\n    Search.CharsXmm = _mm_loadu_si128((PXMMWORD)String-&gt;Buffer);\n\n    //\n    // Broadcast the search string's unique characters according to the string\n    // table's unique character index.\n    //\n\n    UniqueChar = _mm_shuffle_epi8(Search.CharsXmm,\n                                  StringTable-&gt;UniqueIndex.IndexXmm);\n\n    //\n    // Load the slot length array into an XMM register.\n    //\n\n    Lengths.SlotsXmm = _mm_load_si128(&StringTable-&gt;Lengths.SlotsXmm);\n\n    //\n    // Load the string table's unique character array into an XMM register.\n    //\n\n    TableUniqueChars = _mm_load_si128(&StringTable-&gt;UniqueChars.CharsXmm);\n\n    //\n    // Broadcast the search string's length into an XMM register.\n    //\n\n    LengthXmm.m128i_u8[0] = (BYTE)String-&gt;Length;\n    LengthXmm = _mm_broadcastb_epi8(LengthXmm);\n\n    //\n    // Compare the search string's unique character with all of the unique\n    // characters of strings in the table, saving the results into an XMM\n    // register.  This comparison will indicate which slots we can ignore\n    // because the characters at a given index don't match.  Matched slots\n    // will be 0xff, unmatched slots will be 0x0.\n    //\n\n    IncludeSlotsByUniqueChar = _mm_cmpeq_epi8(UniqueChar, TableUniqueChars);\n\n    //\n    // Find all slots that are longer than the incoming string length, as these\n    // are the ones we're going to exclude from any prefix match.\n    //\n    // N.B. Because we default the length of empty slots to 0x7f, they will\n    //      handily be included in the ignored set (i.e. their words will also\n    //      be set to 0xff), which means they'll also get filtered out when\n    //      we do the \"and not\" intersection with the include slots next.\n    //\n\n    IgnoreSlotsByLength = _mm_cmpgt_epi8(Lengths.SlotsXmm, LengthXmm);\n\n    //\n    // We're now ready to intersect the two XMM registers to determine which\n    // slots should still be included in the comparison (i.e. which slots have\n    // the exact same unique character as the string and a length less than or\n    // equal to the length of the search string).\n    //\n    // As the IgnoreSlotsByLength XMM register is the inverse of what we want\n    // at the moment (we want 0xff for slots to include, and 0x00 for slots\n    // to ignore; it's currently the other way around), we use _mm_andnot_si128\n    // instead of just _mm_and_si128.\n    //\n\n    IncludeSlots = _mm_andnot_si128(IgnoreSlotsByLength,\n                                    IncludeSlotsByUniqueChar);\n\n    //\n    // Generate a mask.\n    //\n\n    Bitmap = _mm_movemask_epi8(IncludeSlots);\n\n    if (!Bitmap) {\n\n        //\n        // No bits were set, so there are no strings in this table starting\n        // with the same character and of a lesser or equal length as the\n        // search string.\n        //\n\n        return NO_MATCH_FOUND;\n    }\n\n    //\n    // Calculate the \"search length\" of the incoming string, which ensures we\n    // only compare up to the first 16 characters.\n    //\n\n    SearchLength = min(String-&gt;Length, 16);\n\n    //\n    // A popcount against the mask will tell us how many slots we matched, and\n    // thus, need to compare.\n    //\n\n    Count = __popcnt(Bitmap);\n\n    do {\n\n        //\n        // Extract the next index by counting the number of trailing zeros left\n        // in the bitmap and adding the amount we've already shifted by.\n        //\n\n        NumberOfTrailingZeros = _tzcnt_u32(Bitmap);\n        Index = NumberOfTrailingZeros + Shift;\n\n        //\n        // Shift the bitmap right, past the zeros and the 1 that was just found,\n        // such that it's positioned correctly for the next loop's tzcnt. Update\n        // the shift count accordingly.\n        //\n\n        Bitmap &gt;&gt;= (NumberOfTrailingZeros + 1);\n        Shift = Index + 1;\n\n        //\n        // Load the slot and its length.\n        //\n\n        Slot.CharsXmm = _mm_load_si128(&StringTable-&gt;Slots[Index].CharsXmm);\n        Length = Lengths.Slots[Index];\n\n        //\n        // Compare the slot to the search string.\n        //\n\n        Compare.CharsXmm = _mm_cmpeq_epi8(Slot.CharsXmm, Search.CharsXmm);\n\n        //\n        // Create a mask of the comparison, then filter out high bits from the\n        // search string's length (which is capped at 16).  (This shouldn't be\n        // technically necessary as the string array buffers should have been\n        // calloc'd and zeroed, but optimizing compilers can often ignore the\n        // zeroing request -- which can produce some bizarre results where the\n        // debug build is correct (because the buffers were zeroed) but the\n        // release build fails because the zeroing got ignored and there are\n        // junk bytes past the NULL terminator, which get picked up in our\n        // 128-bit loads.)\n        //\n\n        Mask = _bzhi_u32(_mm_movemask_epi8(Compare.CharsXmm), SearchLength);\n\n        //\n        // Count how many characters matched.\n        //\n\n        CharactersMatched = __popcnt(Mask);\n\n        if ((USHORT)CharactersMatched &lt; Length && Length &lt;= 16) {\n\n            //\n            // The slot length is longer than the number of characters matched\n            // from the search string; this isn't a prefix match.  Continue.\n            //\n\n            continue;\n        }\n\n        if (Length &gt; 16) {\n\n            //\n            // The first 16 characters in the string matched against this\n            // slot, and the slot is oversized (longer than 16 characters),\n            // so do a direct comparison between the remaining buffers.\n            //\n\n            TargetString = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n            CharactersMatched = IsPrefixMatch(String, TargetString, 16);\n\n            if (CharactersMatched == NO_MATCH_FOUND) {\n\n                //\n                // The prefix match failed, continue our search.\n                //\n\n                continue;\n            }\n        }\n\n        //\n        // This slot is a prefix match.  Fill out the Match structure if the\n        // caller provided a non-NULL pointer, then return the index of the\n        // match.\n        //\n\n        if (ARGUMENT_PRESENT(Match)) {\n\n            Match-&gt;Index = (BYTE)Index;\n            Match-&gt;NumberOfMatchedCharacters = (BYTE)CharactersMatched;\n            Match-&gt;String = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n        }\n\n        return (STRING_TABLE_INDEX)Index;\n\n    } while (--Count);\n\n    //\n    // If we get here, we didn't find a match.\n    //\n\n    //IACA_VC_END();\n\n    return NO_MATCH_FOUND;\n}\n\n\n\nWe’re only shaving one instruction off here, so the performance gain, if any, should be very modest.\n\n\nBenchmark 11\n\n\n\nBenchmark 11\n\n\nDefinitely a slight improvement over version 10 in most cases!\n\n\n\nIsPrefixOfStringInTable_x64_4\n← IsPrefixOfStringInTable_x64_3 | IsPrefixOfStringInTable_x64_5 →\nSomething I didn’t know about vptest that Fabian pointed out is that it actually does two operations. The first essentially does an AND of the two input registers and sets the zero flag (ZF=1) if the result is all 0s. We’ve been using that aspect in the assembly version up to now.\nHowever, it also does the equivalent of (xmm0 and (not xmm1)), and sets the carry flag (CY=1) if that expression evaluates to all zeros. That’s handy, because it’s exactly the expression we want to do!\nSo, let’s take version 2 of our assembly routine, remove the vpxor bit, and re-arrange the vptest inputs such that we can do a jnc instead of jnz:\n\nDiffFull\n\n\n% diff -u IsPrefixOfStringInTable_x64_2.asm IsPrefixOfStringInTable_x64_4.asm\n--- IsPrefixOfStringInTable_x64_2.asm   2018-04-26 14:15:53.805409700 -0400\n+++ IsPrefixOfStringInTable_x64_4.asm   2018-04-26 14:16:37.909717200 -0400\n@@ -33,6 +33,10 @@\n ;   search string.  That is, whether any string in the table \"starts with\n ;   or is equal to\" the search string.\n ;\n+;   This routine is based off version 2, but leverages the fact that\n+;   vptest sets the carry flag if '(xmm0 and (not xmm1))' evaluates\n+;   to all 0s, avoiding the the need to do the pxor or pandn steps.\n+;\n ; Arguments:\n ;\n ;   StringTable - Supplies a pointer to a STRING_TABLE struct.\n@@ -50,7 +54,7 @@\n ;\n ;--\n\n-        LEAF_ENTRY IsPrefixOfStringInTable_x64_2, _TEXT$00\n+        LEAF_ENTRY IsPrefixOfStringInTable_x64_4, _TEXT$00\n\n ;\n ; Load the string buffer into xmm0, and the unique indexes from the string table\n@@ -83,12 +87,6 @@\n         vmovdqa xmm3, xmmword ptr StringTable.Lengths[rcx]      ; Load lengths.\n\n ;\n-; Set xmm2 to all ones.  We use this later to invert the length comparison.\n-;\n-\n-        vpcmpeqq    xmm2, xmm2, xmm2            ; Set xmm2 to all ones.\n-\n-;\n ; Broadcast the byte-sized string length into xmm4.\n ;\n\n@@ -103,16 +101,16 @@\n ;\n\n         vpcmpgtb    xmm1, xmm3, xmm4            ; Identify long slots.\n-        vpxor       xmm1, xmm1, xmm2            ; Invert the result.\n\n ;\n ; Intersect-and-test the unique character match xmm mask register (xmm5) with\n-; the length match mask xmm register (xmm1).  This affects flags, allowing us\n-; to do a fast-path exit for the no-match case (where ZF = 1).\n+; the inverted length match mask xmm register (xmm1).  This will set the carry\n+; flag (CY = 1) if the result of 'xmm5 and (not xmm1)' is all 0s, which allows\n+; us to do a fast-path exit for the no-match case.\n ;\n\n-        vptest      xmm5, xmm1                  ; Check for no match.\n-        jnz         short Pfx10                 ; There was a match.\n+        vptest      xmm1, xmm5                  ; Check for no match.\n+        jnc         short Pfx10                 ; There was a match.\n\n ;\n ; No match, set rax to -1 and return.\n@@ -159,12 +157,12 @@\n         vpinsrq     xmm2, xmm2, rdx, 1          ; Save rdx into xmm2q[1].\n\n ;\n-; Intersect xmm5 and xmm1 (as we did earlier with the 'vptest xmm5, xmm1'),\n+; Intersect xmm5 and xmm1 (as we did earlier with the 'vptest xmm1, xmm5'),\n ; yielding a mask identifying indices we need to perform subsequent matches\n ; upon.  Convert this into a bitmap and save in xmm2d[2].\n ;\n\n-        vpand       xmm5, xmm5, xmm1            ; Intersect unique + lengths.\n+        vpandn      xmm5, xmm1, xmm5            ; Intersect unique + lengths.\n         vpmovmskb   edx, xmm5                   ; Generate a bitmap from mask.\n\n ;\n@@ -473,7 +471,7 @@\n\n         ;IACA_VC_END\n\n-        LEAF_END   IsPrefixOfStringInTable_x64_2, _TEXT$00\n+        LEAF_END   IsPrefixOfStringInTable_x64_4, _TEXT$00\n\n ; vim:set tw=80 ts=8 sw=4 sts=4 et syntax=masm fo=croql comments=\\:;           :\n\n\n;++\n;\n; STRING_TABLE_INDEX\n; IsPrefixOfStringInTable_x64_*(\n;     _In_ PSTRING_TABLE StringTable,\n;     _In_ PSTRING String,\n;     _Out_opt_ PSTRING_MATCH Match\n;     )\n;\n; Routine Description:\n;\n;   Searches a string table to see if any strings \"prefix match\" the given\n;   search string.  That is, whether any string in the table \"starts with\n;   or is equal to\" the search string.\n;\n;   This routine is based off version 2, but leverages the fact that\n;   vptest sets the carry flag if '(xmm0 and (not xmm1))' evaluates\n;   to all 0s, avoiding the the need to do the pxor or pandn steps.\n;\n; Arguments:\n;\n;   StringTable - Supplies a pointer to a STRING_TABLE struct.\n;\n;   String - Supplies a pointer to a STRING struct that contains the string to\n;       search for.\n;\n;   Match - Optionally supplies a pointer to a variable that contains the\n;       address of a STRING_MATCH structure.  This will be populated with\n;       additional details about the match if a non-NULL pointer is supplied.\n;\n; Return Value:\n;\n;   Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n;\n;--\n\n        LEAF_ENTRY IsPrefixOfStringInTable_x64_4, _TEXT$00\n\n;\n; Load the string buffer into xmm0, and the unique indexes from the string table\n; into xmm1.  Shuffle the buffer according to the unique indexes, and store the\n; result into xmm5.\n;\n\n        ;IACA_VC_START\n\n        mov     rax, String.Buffer[rdx]\n        vmovdqu xmm0, xmmword ptr [rax]                 ; Load search buffer.\n        vmovdqa xmm1, xmmword ptr StringTable.UniqueIndex[rcx] ; Load indexes.\n        vpshufb xmm5, xmm0, xmm1\n\n;\n; Load the string table's unique character array into xmm2.\n\n        vmovdqa xmm2, xmmword ptr StringTable.UniqueChars[rcx]  ; Load chars.\n\n;\n; Compare the search string's unique character array (xmm5) against the string\n; table's unique chars (xmm2), saving the result back into xmm5.\n;\n\n        vpcmpeqb    xmm5, xmm5, xmm2            ; Compare unique chars.\n\n;\n; Load the lengths of each string table slot into xmm3.\n;\n        vmovdqa xmm3, xmmword ptr StringTable.Lengths[rcx]      ; Load lengths.\n\n;\n; Broadcast the byte-sized string length into xmm4.\n;\n\n        vpbroadcastb xmm4, byte ptr String.Length[rdx]  ; Broadcast length.\n\n;\n; Compare the search string's length, which we've broadcasted to all 8-byte\n; elements of the xmm4 register, to the lengths of the slots in the string\n; table, to find those that are greater in length.  Invert the result, such\n; that we're left with a masked register where each 0xff element indicates\n; a slot with a length less than or equal to our search string's length.\n;\n\n        vpcmpgtb    xmm1, xmm3, xmm4            ; Identify long slots.\n\n;\n; Intersect-and-test the unique character match xmm mask register (xmm5) with\n; the inverted length match mask xmm register (xmm1).  This will set the carry\n; flag (CY = 1) if the result of 'xmm5 and (not xmm1)' is all 0s, which allows\n; us to do a fast-path exit for the no-match case.\n;\n\n        vptest      xmm1, xmm5                  ; Check for no match.\n        jnc         short Pfx10                 ; There was a match.\n\n;\n; No match, set rax to -1 and return.\n;\n\n        xor         eax, eax                    ; Clear rax.\n        not         al                          ; al = -1\n        ret                                     ; Return.\n\n        ;IACA_VC_END\n\n;\n; (There was at least one match, continue with processing.)\n;\n\n;\n; Calculate the \"search length\" for the incoming search string, which is\n; equivalent of 'min(String-&gt;Length, 16)'.  (The search string's length\n; currently lives in xmm4, albeit as a byte-value broadcasted across the\n; entire register, so extract that first.)\n;\n; Once the search length is calculated, deposit it back at the second byte\n; location of xmm4.\n;\n;   r10 and xmm4[15:8] - Search length (min(String-&gt;Length, 16))\n;\n;   r11 - String length (String-&gt;Length)\n;\n\nPfx10:  vpextrb     r11, xmm4, 0                ; Load length.\n        mov         rax, 16                     ; Load 16 into rax.\n        mov         r10, r11                    ; Copy into r10.\n        cmp         r10w, ax                    ; Compare against 16.\n        cmova       r10w, ax                    ; Use 16 if length is greater.\n        vpinsrb     xmm4, xmm4, r10d, 1         ; Save back to xmm4b[1].\n\n;\n; Home our parameter registers into xmm registers instead of their stack-backed\n; location, to avoid memory writes.\n;\n\n        vpxor       xmm2, xmm2, xmm2            ; Clear xmm2.\n        vpinsrq     xmm2, xmm2, rcx, 0          ; Save rcx into xmm2q[0].\n        vpinsrq     xmm2, xmm2, rdx, 1          ; Save rdx into xmm2q[1].\n\n;\n; Intersect xmm5 and xmm1 (as we did earlier with the 'vptest xmm1, xmm5'),\n; yielding a mask identifying indices we need to perform subsequent matches\n; upon.  Convert this into a bitmap and save in xmm2d[2].\n;\n\n        vpandn      xmm5, xmm1, xmm5            ; Intersect unique + lengths.\n        vpmovmskb   edx, xmm5                   ; Generate a bitmap from mask.\n\n;\n; We're finished with xmm5; repurpose it in the same vein as xmm2 above.\n;\n\n        vpxor       xmm5, xmm5, xmm5            ; Clear xmm5.\n        vpinsrq     xmm5, xmm5, r8, 0           ; Save r8 into xmm5q[0].\n\n;\n; Summary of xmm register stashing for the rest of the routine:\n;\n; xmm2:\n;        0:63   (vpinsrq 0)     rcx (1st function parameter, StringTable)\n;       64:127  (vpinsrq 1)     rdx (2nd function paramter, String)\n;\n; xmm4:\n;       0:7     (vpinsrb 0)     length of search string\n;       8:15    (vpinsrb 1)     min(String-&gt;Length, 16)\n;      16:23    (vpinsrb 2)     loop counter (when doing long string compares)\n;      24:31    (vpinsrb 3)     shift count\n;\n; xmm5:\n;       0:63    (vpinsrq 0)     r8 (3rd function parameter, StringMatch)\n;      64:95    (vpinsrd 2)     bitmap of slots to compare\n;      96:127   (vpinsrd 3)     index of slot currently being processed\n;\n\n;\n; Initialize rcx as our counter register by doing a popcnt against the bitmap\n; we just generated in edx, and clear our shift count register (r9).\n;\n\n        popcnt      ecx, edx                    ; Count bits in bitmap.\n        xor         r9, r9                      ; Clear r9.\n\n        align 16\n\n;\n; Top of the main comparison loop.  The bitmap will be present in rdx.  Count\n; trailing zeros of the bitmap, and then add in the shift count, producing an\n; index (rax) we can use to load the corresponding slot.\n;\n; Register usage at top of loop:\n;\n;   rax - Index.\n;\n;   rcx - Loop counter.\n;\n;   rdx - Bitmap initially, then slot length.\n;\n;   r9 - Shift count.\n;\n;   r10 - Search length.\n;\n;   r11 - String length.\n;\n\nPfx20:  tzcnt       r8d, edx                    ; Count trailing zeros.\n        mov         eax, r8d                    ; Copy tzcnt to rax,\n        add         rax, r9                     ; Add shift to create index.\n        inc         r8                          ; tzcnt + 1\n        shrx        rdx, rdx, r8                ; Reposition bitmap.\n        vpinsrd     xmm5, xmm5, edx, 2          ; Store bitmap, free up rdx.\n        xor         edx, edx                    ; Clear edx.\n        mov         r9, rax                     ; Copy index back to shift.\n        inc         r9                          ; Shift = Index + 1\n        vpinsrd     xmm5, xmm5, eax, 3          ; Store the raw index xmm5d[3].\n\n;\n; \"Scale\" the index (such that we can use it in a subsequent vmovdqa) by\n; shifting left by 4 (i.e. multiply by '(sizeof STRING_SLOT)', which is 16).\n;\n; Then, load the string table slot at this index into xmm1, then shift rax back.\n;\n\n        shl         eax, 4\n        vpextrq     r8, xmm2, 0\n        vmovdqa     xmm1, xmmword ptr [rax + StringTable.Slots[r8]]\n        shr         eax, 4\n\n;\n; The search string's first 16 characters are already in xmm0.  Compare this\n; against the slot that has just been loaded into xmm1, storing the result back\n; into xmm1.\n;\n\n        vpcmpeqb    xmm1, xmm1, xmm0            ; Compare search string to slot.\n\n;\n; Convert the XMM mask into a 32-bit representation, then zero high bits after\n; our \"search length\", which allows us to ignore the results of the comparison\n; above for bytes that were after the search string's length, if applicable.\n; Then, count the number of bits remaining, which tells us how many characters\n; we matched.\n;\n\n        vpmovmskb   r8d, xmm1                   ; Convert into mask.\n        bzhi        r8d, r8d, r10d              ; Zero high bits.\n        popcnt      r8d, r8d                    ; Count bits.\n\n;\n; Load the slot length into rdx.  As xmm3 already has all the slot lengths in\n; it, we can load rax (the current index) into xmm1 and use it to extract the\n; slot length via shuffle.  (The length will be in the lowest byte of xmm1\n; after the shuffle, which we can then vpextrb.)\n;\n\n        movd        xmm1, rax                   ; Load index into xmm1.\n        vpshufb     xmm1, xmm3, xmm1            ; Shuffle lengths.\n        vpextrb     rdx, xmm1, 0                ; Extract target length to rdx.\n\n;\n; If 16 characters matched, and the search string's length is longer than 16,\n; we're going to need to do a comparison of the remaining strings.\n;\n\n        cmp         r8w, 16                     ; Compare chars matched to 16.\n        je          short @F                    ; 16 chars matched.\n        jmp         Pfx30                       ; Less than 16 matched.\n\n;\n; All 16 characters matched.  If the slot length is greater than 16, we need\n; to do an inline memory comparison of the remaining bytes.  If it's 16 exactly,\n; then great, that's a slot match, we're done.\n;\n\n@@:     cmp         dl, 16                      ; Compare length to 16.\n        ja          Pfx50                       ; Length is &gt; 16.\n        je          short Pfx35                 ; Lengths match!\n                                                ; Length &lt;= 16, fall through...\n\n;\n; Less than or equal to 16 characters were matched.  Compare this against the\n; length of the slot; if equal, this is a match, if not, no match, continue.\n;\n\nPfx30:  cmp         r8b, dl                     ; Compare against slot length.\n        jne         @F                          ; No match found.\n        jmp         short Pfx35                 ; Match found!\n\n;\n; No match against this slot, decrement counter and either continue the loop\n; or terminate the search and return no match.\n;\n\n@@:     vpextrd     edx, xmm5, 2                ; Restore rdx bitmap.\n        dec         cx                          ; Decrement counter.\n        jnz         Pfx20                       ; cx != 0, continue.\n\n        xor         eax, eax                    ; Clear rax.\n        not         al                          ; al = -1\n        ret                                     ; Return.\n\n;\n; Pfx35 and Pfx40 are the jump targets for when the prefix match succeeds.  The\n; former is used when we need to copy the number of characters matched from r8\n; back to rax.  The latter jump target doesn't require this.\n;\n\nPfx35:  mov         rax, r8                     ; Copy numbers of chars matched.\n\n;\n; Load the match parameter back into r8 and test to see if it's not-NULL, in\n; which case we need to fill out a STRING_MATCH structure for the match.\n;\n\nPfx40:  vpextrq     r8, xmm5, 0                 ; Extract StringMatch.\n        test        r8, r8                      ; Is NULL?\n        jnz         short @F                    ; Not zero, need to fill out.\n\n;\n; StringMatch is NULL, we're done. Extract index of match back into rax and ret.\n;\n\n        vpextrd     eax, xmm5, 3                ; Extract raw index for match.\n        ret                                     ; StringMatch == NULL, finish.\n\n;\n; StringMatch is not NULL.  Fill out characters matched (currently rax), then\n; reload the index from xmm5 into rax and save.\n;\n\n@@:     mov         byte ptr StringMatch.NumberOfMatchedCharacters[r8], al\n        vpextrd     eax, xmm5, 3                ; Extract raw index for match.\n        mov         byte ptr StringMatch.Index[r8], al\n\n;\n; Final step, loading the address of the string in the string array.  This\n; involves going through the StringTable, so we need to load that parameter\n; back into rcx, then resolving the string array address via pStringArray,\n; then the relevant STRING offset within the StringArray.Strings structure.\n;\n\n        vpextrq     rcx, xmm2, 0            ; Extract StringTable into rcx.\n        mov         rcx, StringTable.pStringArray[rcx] ; Load string array.\n\n        shl         eax, 4                  ; Scale the index; sizeof STRING=16.\n        lea         rdx, [rax + StringArray.Strings[rcx]] ; Resolve address.\n        mov         qword ptr StringMatch.String[r8], rdx ; Save STRING ptr.\n        shr         eax, 4                  ; Revert the scaling.\n\n        ret\n\n;\n; 16 characters matched and the length of the underlying slot is greater than\n; 16, so we need to do a little memory comparison to determine if the search\n; string is a prefix match.\n;\n; The slot length is stored in rax at this point, and the search string's\n; length is stored in r11.  We know that the search string's length will\n; always be longer than or equal to the slot length at this point, so, we\n; can subtract 16 (currently stored in r10) from rax, and use the resulting\n; value as a loop counter, comparing the search string with the underlying\n; string slot byte-by-byte to determine if there's a match.\n;\n\nPfx50:  sub         rdx, r10                ; Subtract 16 from search length.\n\n;\n; Free up some registers by stashing their values into various xmm offsets.\n;\n\n        vpinsrb     xmm4, xmm4, ecx, 2      ; Free up rcx register.\n        mov         rcx, rdx                ; Free up rdx, rcx is now counter.\n\n;\n; Load the search string buffer and advance it 16 bytes.\n;\n\n        vpextrq     r11, xmm2, 1            ; Extract String into r11.\n        mov         r11, String.Buffer[r11] ; Load buffer address.\n        add         r11, r10                ; Advance buffer 16 bytes.\n\n;\n; Loading the slot is more involved as we have to go to the string table, then\n; the pStringArray pointer, then the relevant STRING offset within the string\n; array (which requires re-loading the index from xmm5d[3]), then the string\n; buffer from that structure.\n;\n\n        vpextrq     r8, xmm2, 0             ; Extract StringTable into r8.\n        mov         r8, StringTable.pStringArray[r8] ; Load string array.\n\n        shl         eax, 4                  ; Scale the index; sizeof STRING=16.\n\n        lea         r8, [rax + StringArray.Strings[r8]] ; Resolve address.\n        mov         r8, String.Buffer[r8]   ; Load string table buffer address.\n        add         r8, r10                 ; Advance buffer 16 bytes.\n\n        xor         eax, eax                ; Clear eax.\n\n;\n; We've got both buffer addresses + 16 bytes loaded in r11 and r8 respectively.\n; Do a byte-by-byte comparison.\n;\n\n        align 16\n@@:     mov         dl, byte ptr [rax + r11]    ; Load byte from search string.\n        cmp         dl, byte ptr [rax + r8]     ; Compare against target.\n        jne         short Pfx60                 ; If not equal, jump.\n\n;\n; The two bytes were equal, update rax, decrement rcx and potentially continue\n; the loop.\n;\n\n        inc         ax                          ; Increment index.\n        loopnz      @B                          ; Decrement cx and loop back.\n\n;\n; All bytes matched!  Add 16 (still in r10) back to rax such that it captures\n; how many characters we matched, and then jump to Pfx40 for finalization.\n;\n\n        add         rax, r10\n        jmp         Pfx40\n\n;\n; Byte comparisons were not equal.  Restore the rcx loop counter and decrement\n; it.  If it's zero, we have no more strings to compare, so we can do a quick\n; exit.  If there are still comparisons to be made, restore the other registers\n; we trampled then jump back to the start of the loop Pfx20.\n;\n\nPfx60:  vpextrb     rcx, xmm4, 2                ; Restore rcx counter.\n        dec         cx                          ; Decrement counter.\n        jnz         short @F                    ; Jump forward if not zero.\n\n;\n; No more comparisons remaining, return.\n;\n\n        xor         eax, eax                    ; Clear rax.\n        not         al                          ; al = -1\n        ret                                     ; Return.\n\n;\n; More comparisons remain; restore the registers we clobbered and continue loop.\n;\n\n@@:     vpextrb     r10, xmm4, 1                ; Restore r10.\n        vpextrb     r11, xmm4, 0                ; Restore r11.\n        vpextrd     edx, xmm5, 2                ; Restore rdx bitmap.\n        jmp         Pfx20                       ; Continue comparisons.\n\n        ;IACA_VC_END\n\n        LEAF_END   IsPrefixOfStringInTable_x64_4, _TEXT$00\n\n\n\nLet’s see how that stacks up against the existing version 2 of the assembly routine.\n\n\nBenchmark x64 4\n\n\n\nBenchmark x64 4\n\n\nNice, we’ve shaved an entire cycle off the negative match path! I say that both seriously and sarcastically. A single cycle, wow, stop the press! On the other hand, going from 8 cycles to 7 cycles is usually a lot harder than, say, going from 100,000 cycles to 80,000 cycles. We’re so close to the lower bound, additional cycle improvements are a lot like trying to get blood out of a stone.\n\n\n\nIsPrefixOfStringInTable_12\n← IsPrefixOfStringInTable_11 | IsPrefixOfStringInTable_13 →\nThe vptest fast-path exit definitely yielded a repeatable and measurable gain for the assembly version. Let’s replicate it in a C version.\n\nDiffFull\n\n\n% diff -u IsPrefixOfStringInTable_10.c IsPrefixOfStringInTable_12.c\n--- IsPrefixOfStringInTable_10.c        2018-04-26 13:28:06.006627100 -0400\n+++ IsPrefixOfStringInTable_12.c        2018-04-26 17:47:54.970331600 -0400\n@@ -19,7 +19,7 @@\n\n _Use_decl_annotations_\n STRING_TABLE_INDEX\n-IsPrefixOfStringInTable_10(\n+IsPrefixOfStringInTable_12(\n     PSTRING_TABLE StringTable,\n     PSTRING String,\n     PSTRING_MATCH Match\n@@ -32,8 +32,15 @@\n     search string.  That is, whether any string in the table \"starts with\n     or is equal to\" the search string.\n\n-    This version is based off version 8, but rewrites the inner loop that\n-    checks for comparisons.\n+    This version is based off version 10, but with factors in the improvements\n+    made to version 4 of the x64 assembly version, thanks to suggestions from\n+    both Wojciech Mula (@pshufb) and Fabian Giesen (@rygorous).\n+\n+    Like version 11, we omit the vpxor to invert the lengths, but instead of\n+    an initial vpandn, we leverage the fact that vptest sets the carry flag\n+    if all 0s result from the expression: \"param1 and (not param2)\".  This\n+    allows us to do a fast-path early exit (like x64 version 2 does) if no\n+    match is found.\n\n Arguments:\n\n@@ -71,9 +78,7 @@\n     XMMWORD TableUniqueChars;\n     XMMWORD IncludeSlotsByUniqueChar;\n     XMMWORD IgnoreSlotsByLength;\n-    XMMWORD IncludeSlotsByLength;\n     XMMWORD IncludeSlots;\n-    const XMMWORD AllOnesXmm = _mm_set1_epi8(0xff);\n\n     //\n     // Unconditionally do the following five operations before checking any of\n@@ -159,47 +164,58 @@\n     // N.B. Because we default the length of empty slots to 0x7f, they will\n     //      handily be included in the ignored set (i.e. their words will also\n     //      be set to 0xff), which means they'll also get filtered out when\n-    //      we invert the mask shortly after.\n+    //      we do the \"and not\" intersection with the include slots next.\n     //\n\n     IgnoreSlotsByLength = _mm_cmpgt_epi8(Lengths.SlotsXmm, LengthXmm);\n\n     //\n-    // Invert the result of the comparison; we want 0xff for slots to include\n-    // and 0x0 for slots to ignore (it's currently the other way around).  We\n-    // can achieve this by XOR'ing the result against our all-ones XMM register.\n+    // We can do a fast-path test for no match here via _mm_testc_si128(),\n+    // which is essentially equivalent to the following logic, just with\n+    // fewer instructions:\n     //\n-\n-    IncludeSlotsByLength = _mm_xor_si128(IgnoreSlotsByLength, AllOnesXmm);\n-\n-    //\n-    // We're now ready to intersect the two XMM registers to determine which\n-    // slots should still be included in the comparison (i.e. which slots have\n-    // the exact same unique character as the string and a length less than or\n-    // equal to the length of the search string).\n+    //      IncludeSlots = _mm_andnot_si128(IgnoreSlotsByLength,\n+    //                                      IncludeSlotsByUniqueChar);\n     //\n-\n-    IncludeSlots = _mm_and_si128(IncludeSlotsByUniqueChar,\n-                                 IncludeSlotsByLength);\n-\n+    //      if (!IncludeSlots) {\n+    //          return NO_MATCH_FOUND;\n+    //      }\n     //\n-    // Generate a mask.\n     //\n\n-    Bitmap = _mm_movemask_epi8(IncludeSlots);\n-\n-    if (!Bitmap) {\n+    if (_mm_testc_si128(IgnoreSlotsByLength, IncludeSlotsByUniqueChar)) {\n\n         //\n-        // No bits were set, so there are no strings in this table starting\n-        // with the same character and of a lesser or equal length as the\n-        // search string.\n+        // No remaining slots were left after we intersected the slots with\n+        // matching unique characters with the inverted slots to ignore due\n+        // to length.  Thus, no prefix match was found.\n         //\n\n         return NO_MATCH_FOUND;\n     }\n\n     //\n+    // Continue with the remaining logic, including actually generating the\n+    // IncludeSlots, which we need for bitmap generation as part of our\n+    // comparison loop.\n+    //\n+    // As the IgnoreSlotsByLength XMM register is the inverse of what we want\n+    // at the moment (we want 0xff for slots to include, and 0x00 for slots\n+    // to ignore; it's currently the other way around), we use _mm_andnot_si128\n+    // instead of just _mm_and_si128.\n+    //\n+\n+    IncludeSlots = _mm_andnot_si128(IgnoreSlotsByLength,\n+                                    IncludeSlotsByUniqueChar);\n+\n+    //\n+    // Generate a mask, count the number of bits, and initialize the search\n+    // length.\n+    //\n+\n+    Bitmap = _mm_movemask_epi8(IncludeSlots);\n+\n+    //\n     // Calculate the \"search length\" of the incoming string, which ensures we\n     // only compare up to the first 16 characters.\n     //\n\n\n_Use_decl_annotations_\nSTRING_TABLE_INDEX\nIsPrefixOfStringInTable_12(\n    PSTRING_TABLE StringTable,\n    PSTRING String,\n    PSTRING_MATCH Match\n    )\n/*++\n\nRoutine Description:\n\n    Searches a string table to see if any strings \"prefix match\" the given\n    search string.  That is, whether any string in the table \"starts with\n    or is equal to\" the search string.\n\n    This version is based off version 10, but with factors in the improvements\n    made to version 4 of the x64 assembly version, thanks to suggestions from\n    both Wojciech Mula (@pshufb) and Fabian Giesen (@rygorous).\n\n    Like version 11, we omit the vpxor to invert the lengths, but instead of\n    an initial vpandn, we leverage the fact that vptest sets the carry flag\n    if all 0s result from the expression: \"param1 and (not param2)\".  This\n    allows us to do a fast-path early exit (like x64 version 2 does) if no\n    match is found.\n\nArguments:\n\n    StringTable - Supplies a pointer to a STRING_TABLE struct.\n\n    String - Supplies a pointer to a STRING struct that contains the string to\n        search for.\n\n    Match - Optionally supplies a pointer to a variable that contains the\n        address of a STRING_MATCH structure.  This will be populated with\n        additional details about the match if a non-NULL pointer is supplied.\n\nReturn Value:\n\n    Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n\n--*/\n{\n    ULONG Bitmap;\n    ULONG Mask;\n    ULONG Count;\n    ULONG Length;\n    ULONG Index;\n    ULONG Shift = 0;\n    ULONG CharactersMatched;\n    ULONG NumberOfTrailingZeros;\n    ULONG SearchLength;\n    PSTRING TargetString;\n    STRING_SLOT Slot;\n    STRING_SLOT Search;\n    STRING_SLOT Compare;\n    SLOT_LENGTHS Lengths;\n    XMMWORD LengthXmm;\n    XMMWORD UniqueChar;\n    XMMWORD TableUniqueChars;\n    XMMWORD IncludeSlotsByUniqueChar;\n    XMMWORD IgnoreSlotsByLength;\n    XMMWORD IncludeSlots;\n\n    //\n    // Unconditionally do the following five operations before checking any of\n    // the results and determining how the search should proceed:\n    //\n    //  1. Load the search string into an Xmm register, and broadcast the\n    //     character indicated by the unique character index (relative to\n    //     other strings in the table) across a second Xmm register.\n    //\n    //  2. Load the string table's unique character array into an Xmm register.\n    //\n    //  3. Broadcast the search string's length into an XMM register.\n    //\n    //  3. Load the string table's slot lengths array into an XMM register.\n    //\n    //  4. Compare the unique character from step 1 to the string table's unique\n    //     character array set up in step 2.  The result of this comparison\n    //     will produce an XMM register with each byte set to either 0xff if\n    //     the unique character was found, or 0x0 if it wasn't.\n    //\n    //  5. Compare the search string's length from step 3 to the string table's\n    //     slot length array set up in step 3.  This allows us to identify the\n    //     slots that have strings that are of lesser or equal length to our\n    //     search string.  As we're doing a prefix search, we can ignore any\n    //     slots longer than our incoming search string.\n    //\n    // We do all five of these operations up front regardless of whether or not\n    // they're strictly necessary.  That is, if the unique character isn't in\n    // the unique character array, we don't need to load array lengths -- and\n    // vice versa.  However, we assume the benefits afforded by giving the CPU\n    // a bunch of independent things to do unconditionally up-front outweigh\n    // the cost of putting in branches and conditionally loading things if\n    // necessary.\n    //\n\n    //\n    // Load the first 16-bytes of the search string into an XMM register.\n    //\n\n    Search.CharsXmm = _mm_loadu_si128((PXMMWORD)String-&gt;Buffer);\n\n    //\n    // Broadcast the search string's unique characters according to the string\n    // table's unique character index.\n    //\n\n    UniqueChar = _mm_shuffle_epi8(Search.CharsXmm,\n                                  StringTable-&gt;UniqueIndex.IndexXmm);\n\n    //\n    // Load the slot length array into an XMM register.\n    //\n\n    Lengths.SlotsXmm = _mm_load_si128(&StringTable-&gt;Lengths.SlotsXmm);\n\n    //\n    // Load the string table's unique character array into an XMM register.\n    //\n\n    TableUniqueChars = _mm_load_si128(&StringTable-&gt;UniqueChars.CharsXmm);\n\n    //\n    // Broadcast the search string's length into an XMM register.\n    //\n\n    LengthXmm.m128i_u8[0] = (BYTE)String-&gt;Length;\n    LengthXmm = _mm_broadcastb_epi8(LengthXmm);\n\n    //\n    // Compare the search string's unique character with all of the unique\n    // characters of strings in the table, saving the results into an XMM\n    // register.  This comparison will indicate which slots we can ignore\n    // because the characters at a given index don't match.  Matched slots\n    // will be 0xff, unmatched slots will be 0x0.\n    //\n\n    IncludeSlotsByUniqueChar = _mm_cmpeq_epi8(UniqueChar, TableUniqueChars);\n\n    //\n    // Find all slots that are longer than the incoming string length, as these\n    // are the ones we're going to exclude from any prefix match.\n    //\n    // N.B. Because we default the length of empty slots to 0x7f, they will\n    //      handily be included in the ignored set (i.e. their words will also\n    //      be set to 0xff), which means they'll also get filtered out when\n    //      we do the \"and not\" intersection with the include slots next.\n    //\n\n    IgnoreSlotsByLength = _mm_cmpgt_epi8(Lengths.SlotsXmm, LengthXmm);\n\n    //\n    // We can do a fast-path test for no match here via _mm_testc_si128(),\n    // which is essentially equivalent to the following logic, just with\n    // fewer instructions:\n    //\n    //      IncludeSlots = _mm_andnot_si128(IgnoreSlotsByLength,\n    //                                      IncludeSlotsByUniqueChar);\n    //\n    //      if (!IncludeSlots) {\n    //          return NO_MATCH_FOUND;\n    //      }\n    //\n    //\n\n    if (_mm_testc_si128(IgnoreSlotsByLength, IncludeSlotsByUniqueChar)) {\n\n        //\n        // No remaining slots were left after we intersected the slots with\n        // matching unique characters with the inverted slots to ignore due\n        // to length.  Thus, no prefix match was found.\n        //\n\n        return NO_MATCH_FOUND;\n    }\n\n    //\n    // Continue with the remaining logic, including actually generating the\n    // IncludeSlots, which we need for bitmap generation as part of our\n    // comparison loop.\n    //\n    // As the IgnoreSlotsByLength XMM register is the inverse of what we want\n    // at the moment (we want 0xff for slots to include, and 0x00 for slots\n    // to ignore; it's currently the other way around), we use _mm_andnot_si128\n    // instead of just _mm_and_si128.\n    //\n\n    IncludeSlots = _mm_andnot_si128(IgnoreSlotsByLength,\n                                    IncludeSlotsByUniqueChar);\n\n    //\n    // Generate a mask, count the number of bits, and initialize the search\n    // length.\n    //\n\n    Bitmap = _mm_movemask_epi8(IncludeSlots);\n\n    //\n    // Calculate the \"search length\" of the incoming string, which ensures we\n    // only compare up to the first 16 characters.\n    //\n\n    SearchLength = min(String-&gt;Length, 16);\n\n    //\n    // A popcount against the mask will tell us how many slots we matched, and\n    // thus, need to compare.\n    //\n\n    Count = __popcnt(Bitmap);\n\n    do {\n\n        //\n        // Extract the next index by counting the number of trailing zeros left\n        // in the bitmap and adding the amount we've already shifted by.\n        //\n\n        NumberOfTrailingZeros = _tzcnt_u32(Bitmap);\n        Index = NumberOfTrailingZeros + Shift;\n\n        //\n        // Shift the bitmap right, past the zeros and the 1 that was just found,\n        // such that it's positioned correctly for the next loop's tzcnt. Update\n        // the shift count accordingly.\n        //\n\n        Bitmap &gt;&gt;= (NumberOfTrailingZeros + 1);\n        Shift = Index + 1;\n\n        //\n        // Load the slot and its length.\n        //\n\n        Slot.CharsXmm = _mm_load_si128(&StringTable-&gt;Slots[Index].CharsXmm);\n        Length = Lengths.Slots[Index];\n\n        //\n        // Compare the slot to the search string.\n        //\n\n        Compare.CharsXmm = _mm_cmpeq_epi8(Slot.CharsXmm, Search.CharsXmm);\n\n        //\n        // Create a mask of the comparison, then filter out high bits from the\n        // search string's length (which is capped at 16).  (This shouldn't be\n        // technically necessary as the string array buffers should have been\n        // calloc'd and zeroed, but optimizing compilers can often ignore the\n        // zeroing request -- which can produce some bizarre results where the\n        // debug build is correct (because the buffers were zeroed) but the\n        // release build fails because the zeroing got ignored and there are\n        // junk bytes past the NULL terminator, which get picked up in our\n        // 128-bit loads.)\n        //\n\n        Mask = _bzhi_u32(_mm_movemask_epi8(Compare.CharsXmm), SearchLength);\n\n        //\n        // Count how many characters matched.\n        //\n\n        CharactersMatched = __popcnt(Mask);\n\n        if ((USHORT)CharactersMatched &lt; Length && Length &lt;= 16) {\n\n            //\n            // The slot length is longer than the number of characters matched\n            // from the search string; this isn't a prefix match.  Continue.\n            //\n\n            continue;\n        }\n\n        if (Length &gt; 16) {\n\n            //\n            // The first 16 characters in the string matched against this\n            // slot, and the slot is oversized (longer than 16 characters),\n            // so do a direct comparison between the remaining buffers.\n            //\n\n            TargetString = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n            CharactersMatched = IsPrefixMatch(String, TargetString, 16);\n\n            if (CharactersMatched == NO_MATCH_FOUND) {\n\n                //\n                // The prefix match failed, continue our search.\n                //\n\n                continue;\n            }\n        }\n\n        //\n        // This slot is a prefix match.  Fill out the Match structure if the\n        // caller provided a non-NULL pointer, then return the index of the\n        // match.\n        //\n\n        if (ARGUMENT_PRESENT(Match)) {\n\n            Match-&gt;Index = (BYTE)Index;\n            Match-&gt;NumberOfMatchedCharacters = (BYTE)CharactersMatched;\n            Match-&gt;String = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n        }\n\n        return (STRING_TABLE_INDEX)Index;\n\n    } while (--Count);\n\n    //\n    // If we get here, we didn't find a match.\n    //\n\n    //IACA_VC_END();\n\n    return NO_MATCH_FOUND;\n}\n\n\n\n\n\nBenchmark 12\n\n\n\nBenchmark 12\n\n\nEh, there’s not much in this one. The negative match fast path is basically identical, and the normal prefix matches are a tiny bit slower.\n\n\n\nIsPrefixOfStringInTable_13\n← IsPrefixOfStringInTable_12 | IsPrefixOfStringInTable_14 →\nAnother tip from Fabian: we can tweak the loop logic further. Instead of shifting the bitmap right each iteration (and keeping a separate shift count), we can just leverage the blsr intrinsic, which stands for reset lowest set bit, and is equivalent to doing x & (x -1). This allows us to tweak the loop organization as well, such that we can simply do while (Bitmap) { } instead of the do { } while (--Count) approach we’ve been using.\n\nDiffFull\n\n\n% diff -u IsPrefixOfStringInTable_10.c IsPrefixOfStringInTable_13.c\n--- IsPrefixOfStringInTable_10.c        2018-04-26 18:22:23.926168500 -0400\n+++ IsPrefixOfStringInTable_13.c        2018-04-26 19:16:34.926170200 -0400\n@@ -19,7 +19,7 @@\n\n _Use_decl_annotations_\n STRING_TABLE_INDEX\n-IsPrefixOfStringInTable_10(\n+IsPrefixOfStringInTable_13(\n     PSTRING_TABLE StringTable,\n     PSTRING String,\n     PSTRING_MATCH Match\n@@ -32,8 +32,10 @@\n     search string.  That is, whether any string in the table \"starts with\n     or is equal to\" the search string.\n\n-    This version is based off version 8, but rewrites the inner loop that\n-    checks for comparisons.\n+    This version is based off version 10, but does away with the bitmap\n+    shifting logic and `do { } while (--Count)` loop, instead simply using\n+    blsr in conjunction with `while (Bitmap) { }`.  Credit goes to Fabian\n+    Giesen (@rygorous) for pointing this approach out.\n\n Arguments:\n\n@@ -54,12 +56,9 @@\n {\n     ULONG Bitmap;\n     ULONG Mask;\n-    ULONG Count;\n     ULONG Length;\n     ULONG Index;\n-    ULONG Shift = 0;\n     ULONG CharactersMatched;\n-    ULONG NumberOfTrailingZeros;\n     ULONG SearchLength;\n     PSTRING TargetString;\n     STRING_SLOT Slot;\n@@ -206,31 +205,26 @@\n\n     SearchLength = min(String-&gt;Length, 16);\n\n-    //\n-    // A popcount against the mask will tell us how many slots we matched, and\n-    // thus, need to compare.\n-    //\n-\n-    Count = __popcnt(Bitmap);\n-\n-    do {\n+    while (Bitmap) {\n\n         //\n         // Extract the next index by counting the number of trailing zeros left\n-        // in the bitmap and adding the amount we've already shifted by.\n+        // in the bitmap.\n         //\n\n-        NumberOfTrailingZeros = _tzcnt_u32(Bitmap);\n-        Index = NumberOfTrailingZeros + Shift;\n+        Index = _tzcnt_u32(Bitmap);\n\n         //\n-        // Shift the bitmap right, past the zeros and the 1 that was just found,\n-        // such that it's positioned correctly for the next loop's tzcnt. Update\n-        // the shift count accordingly.\n+        // Clear the bitmap's lowest set bit, such that it's ready for the next\n+        // loop's tzcnt if no match is found in this iteration.  Equivalent to\n+        //\n+        //      Bitmap &= Bitmap - 1;\n+        //\n+        // (Which the optimizer will convert into a blsr instruction anyway in\n+        //  non-debug builds.  But it's nice to be explicit.)\n         //\n\n-        Bitmap &gt;&gt;= (NumberOfTrailingZeros + 1);\n-        Shift = Index + 1;\n+        Bitmap = _blsr_u32(Bitmap);\n\n         //\n         // Load the slot and its length.\n@@ -313,7 +307,7 @@\n\n         return (STRING_TABLE_INDEX)Index;\n\n-    } while (--Count);\n+    }\n\n     //\n     // If we get here, we didn't find a match.\n\n\n_Use_decl_annotations_\nSTRING_TABLE_INDEX\nIsPrefixOfStringInTable_13(\n    PSTRING_TABLE StringTable,\n    PSTRING String,\n    PSTRING_MATCH Match\n    )\n/*++\n\nRoutine Description:\n\n    Searches a string table to see if any strings \"prefix match\" the given\n    search string.  That is, whether any string in the table \"starts with\n    or is equal to\" the search string.\n\n    This version is based off version 10, but does away with the bitmap\n    shifting logic and `do { } while (--Count)` loop, instead simply using\n    blsr in conjunction with `while (Bitmap) { }`.  Credit goes to Fabian\n    Giesen (@rygorous) for pointing this approach out.\n\nArguments:\n\n    StringTable - Supplies a pointer to a STRING_TABLE struct.\n\n    String - Supplies a pointer to a STRING struct that contains the string to\n        search for.\n\n    Match - Optionally supplies a pointer to a variable that contains the\n        address of a STRING_MATCH structure.  This will be populated with\n        additional details about the match if a non-NULL pointer is supplied.\n\nReturn Value:\n\n    Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n\n--*/\n{\n    ULONG Bitmap;\n    ULONG Mask;\n    ULONG Length;\n    ULONG Index;\n    ULONG CharactersMatched;\n    ULONG SearchLength;\n    PSTRING TargetString;\n    STRING_SLOT Slot;\n    STRING_SLOT Search;\n    STRING_SLOT Compare;\n    SLOT_LENGTHS Lengths;\n    XMMWORD LengthXmm;\n    XMMWORD UniqueChar;\n    XMMWORD TableUniqueChars;\n    XMMWORD IncludeSlotsByUniqueChar;\n    XMMWORD IgnoreSlotsByLength;\n    XMMWORD IncludeSlotsByLength;\n    XMMWORD IncludeSlots;\n    const XMMWORD AllOnesXmm = _mm_set1_epi8(0xff);\n\n    //\n    // Unconditionally do the following five operations before checking any of\n    // the results and determining how the search should proceed:\n    //\n    //  1. Load the search string into an Xmm register, and broadcast the\n    //     character indicated by the unique character index (relative to\n    //     other strings in the table) across a second Xmm register.\n    //\n    //  2. Load the string table's unique character array into an Xmm register.\n    //\n    //  3. Broadcast the search string's length into an XMM register.\n    //\n    //  3. Load the string table's slot lengths array into an XMM register.\n    //\n    //  4. Compare the unique character from step 1 to the string table's unique\n    //     character array set up in step 2.  The result of this comparison\n    //     will produce an XMM register with each byte set to either 0xff if\n    //     the unique character was found, or 0x0 if it wasn't.\n    //\n    //  5. Compare the search string's length from step 3 to the string table's\n    //     slot length array set up in step 3.  This allows us to identify the\n    //     slots that have strings that are of lesser or equal length to our\n    //     search string.  As we're doing a prefix search, we can ignore any\n    //     slots longer than our incoming search string.\n    //\n    // We do all five of these operations up front regardless of whether or not\n    // they're strictly necessary.  That is, if the unique character isn't in\n    // the unique character array, we don't need to load array lengths -- and\n    // vice versa.  However, we assume the benefits afforded by giving the CPU\n    // a bunch of independent things to do unconditionally up-front outweigh\n    // the cost of putting in branches and conditionally loading things if\n    // necessary.\n    //\n\n    //\n    // Load the first 16-bytes of the search string into an XMM register.\n    //\n\n    Search.CharsXmm = _mm_loadu_si128((PXMMWORD)String-&gt;Buffer);\n\n    //\n    // Broadcast the search string's unique characters according to the string\n    // table's unique character index.\n    //\n\n    UniqueChar = _mm_shuffle_epi8(Search.CharsXmm,\n                                  StringTable-&gt;UniqueIndex.IndexXmm);\n\n    //\n    // Load the slot length array into an XMM register.\n    //\n\n    Lengths.SlotsXmm = _mm_load_si128(&StringTable-&gt;Lengths.SlotsXmm);\n\n    //\n    // Load the string table's unique character array into an XMM register.\n    //\n\n    TableUniqueChars = _mm_load_si128(&StringTable-&gt;UniqueChars.CharsXmm);\n\n    //\n    // Broadcast the search string's length into an XMM register.\n    //\n\n    LengthXmm.m128i_u8[0] = (BYTE)String-&gt;Length;\n    LengthXmm = _mm_broadcastb_epi8(LengthXmm);\n\n    //\n    // Compare the search string's unique character with all of the unique\n    // characters of strings in the table, saving the results into an XMM\n    // register.  This comparison will indicate which slots we can ignore\n    // because the characters at a given index don't match.  Matched slots\n    // will be 0xff, unmatched slots will be 0x0.\n    //\n\n    IncludeSlotsByUniqueChar = _mm_cmpeq_epi8(UniqueChar, TableUniqueChars);\n\n    //\n    // Find all slots that are longer than the incoming string length, as these\n    // are the ones we're going to exclude from any prefix match.\n    //\n    // N.B. Because we default the length of empty slots to 0x7f, they will\n    //      handily be included in the ignored set (i.e. their words will also\n    //      be set to 0xff), which means they'll also get filtered out when\n    //      we invert the mask shortly after.\n    //\n\n    IgnoreSlotsByLength = _mm_cmpgt_epi8(Lengths.SlotsXmm, LengthXmm);\n\n    //\n    // Invert the result of the comparison; we want 0xff for slots to include\n    // and 0x0 for slots to ignore (it's currently the other way around).  We\n    // can achieve this by XOR'ing the result against our all-ones XMM register.\n    //\n\n    IncludeSlotsByLength = _mm_xor_si128(IgnoreSlotsByLength, AllOnesXmm);\n\n    //\n    // We're now ready to intersect the two XMM registers to determine which\n    // slots should still be included in the comparison (i.e. which slots have\n    // the exact same unique character as the string and a length less than or\n    // equal to the length of the search string).\n    //\n\n    IncludeSlots = _mm_and_si128(IncludeSlotsByUniqueChar,\n                                 IncludeSlotsByLength);\n\n    //\n    // Generate a mask.\n    //\n\n    Bitmap = _mm_movemask_epi8(IncludeSlots);\n\n    if (!Bitmap) {\n\n        //\n        // No bits were set, so there are no strings in this table starting\n        // with the same character and of a lesser or equal length as the\n        // search string.\n        //\n\n        return NO_MATCH_FOUND;\n    }\n\n    //\n    // Calculate the \"search length\" of the incoming string, which ensures we\n    // only compare up to the first 16 characters.\n    //\n\n    SearchLength = min(String-&gt;Length, 16);\n\n    while (Bitmap) {\n\n        //\n        // Extract the next index by counting the number of trailing zeros left\n        // in the bitmap.\n        //\n\n        Index = _tzcnt_u32(Bitmap);\n\n        //\n        // Clear the bitmap's lowest set bit, such that it's ready for the next\n        // loop's tzcnt if no match is found in this iteration.  Equivalent to\n        //\n        //      Bitmap &= Bitmap - 1;\n        //\n        // (Which the optimizer will convert into a blsr instruction anyway in\n        //  non-debug builds.  But it's nice to be explicit.)\n        //\n\n        Bitmap = _blsr_u32(Bitmap);\n\n        //\n        // Load the slot and its length.\n        //\n\n        Slot.CharsXmm = _mm_load_si128(&StringTable-&gt;Slots[Index].CharsXmm);\n        Length = Lengths.Slots[Index];\n\n        //\n        // Compare the slot to the search string.\n        //\n\n        Compare.CharsXmm = _mm_cmpeq_epi8(Slot.CharsXmm, Search.CharsXmm);\n\n        //\n        // Create a mask of the comparison, then filter out high bits from the\n        // search string's length (which is capped at 16).  (This shouldn't be\n        // technically necessary as the string array buffers should have been\n        // calloc'd and zeroed, but optimizing compilers can often ignore the\n        // zeroing request -- which can produce some bizarre results where the\n        // debug build is correct (because the buffers were zeroed) but the\n        // release build fails because the zeroing got ignored and there are\n        // junk bytes past the NULL terminator, which get picked up in our\n        // 128-bit loads.)\n        //\n\n        Mask = _bzhi_u32(_mm_movemask_epi8(Compare.CharsXmm), SearchLength);\n\n        //\n        // Count how many characters matched.\n        //\n\n        CharactersMatched = __popcnt(Mask);\n\n        if ((USHORT)CharactersMatched &lt; Length && Length &lt;= 16) {\n\n            //\n            // The slot length is longer than the number of characters matched\n            // from the search string; this isn't a prefix match.  Continue.\n            //\n\n            continue;\n        }\n\n        if (Length &gt; 16) {\n\n            //\n            // The first 16 characters in the string matched against this\n            // slot, and the slot is oversized (longer than 16 characters),\n            // so do a direct comparison between the remaining buffers.\n            //\n\n            TargetString = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n            CharactersMatched = IsPrefixMatch(String, TargetString, 16);\n\n            if (CharactersMatched == NO_MATCH_FOUND) {\n\n                //\n                // The prefix match failed, continue our search.\n                //\n\n                continue;\n            }\n        }\n\n        //\n        // This slot is a prefix match.  Fill out the Match structure if the\n        // caller provided a non-NULL pointer, then return the index of the\n        // match.\n        //\n\n        if (ARGUMENT_PRESENT(Match)) {\n\n            Match-&gt;Index = (BYTE)Index;\n            Match-&gt;NumberOfMatchedCharacters = (BYTE)CharactersMatched;\n            Match-&gt;String = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n        }\n\n        return (STRING_TABLE_INDEX)Index;\n\n    }\n\n    //\n    // If we get here, we didn't find a match.\n    //\n\n    //IACA_VC_END();\n\n    return NO_MATCH_FOUND;\n}\n\n\n\nI like this change. It was a great suggestion from Fabian. Let’s see how it performs. Hopefully it’ll do slightly better at prefix matching, given that we’re effectively reducing the number of instructions required as part of the string comparison logic.\n\n\nBenchmark 13\n\n\n\nBenchmark 13\n\n\nAh! A measurable, repeatable speed-up! Excellent!\n\n\n\nIsPrefixOfStringInTable_14\n← IsPrefixOfStringInTable_13 | IsPrefixOfStringInTable_15 →\nLet’s give the C version the same chance as the assembly version with regards to negative matching; we’ll take version 13 above and factor in the vptest logic from version 12.\n\nDiff (14 vs 13)Diff (14 vs 12)Full (14)\n\n\n% diff -u IsPrefixOfStringInTable_13.c IsPrefixOfStringInTable_14.c\n--- IsPrefixOfStringInTable_13.c        2018-04-26 19:16:34.926170200 -0400\n+++ IsPrefixOfStringInTable_14.c        2018-04-26 19:32:30.674199200 -0400\n@@ -19,7 +19,7 @@\n\n _Use_decl_annotations_\n STRING_TABLE_INDEX\n-IsPrefixOfStringInTable_13(\n+IsPrefixOfStringInTable_14(\n     PSTRING_TABLE StringTable,\n     PSTRING String,\n     PSTRING_MATCH Match\n@@ -32,10 +32,8 @@\n     search string.  That is, whether any string in the table \"starts with\n     or is equal to\" the search string.\n\n-    This version is based off version 10, but does away with the bitmap\n-    shifting logic and `do { } while (--Count)` loop, instead simply using\n-    blsr in conjunction with `while (Bitmap) { }`.  Credit goes to Fabian\n-    Giesen (@rygorous) for pointing this approach out.\n+    This version combines the altered bitmap logic from version 13 with the\n+    fast-path _mm_testc_si128() exit from version 12.\n\n Arguments:\n\n@@ -70,9 +68,7 @@\n     XMMWORD TableUniqueChars;\n     XMMWORD IncludeSlotsByUniqueChar;\n     XMMWORD IgnoreSlotsByLength;\n-    XMMWORD IncludeSlotsByLength;\n     XMMWORD IncludeSlots;\n-    const XMMWORD AllOnesXmm = _mm_set1_epi8(0xff);\n\n     //\n     // Unconditionally do the following five operations before checking any of\n@@ -164,22 +160,43 @@\n     IgnoreSlotsByLength = _mm_cmpgt_epi8(Lengths.SlotsXmm, LengthXmm);\n\n     //\n-    // Invert the result of the comparison; we want 0xff for slots to include\n-    // and 0x0 for slots to ignore (it's currently the other way around).  We\n-    // can achieve this by XOR'ing the result against our all-ones XMM register.\n+    // We can do a fast-path test for no match here via _mm_testc_si128(),\n+    // which is essentially equivalent to the following logic, just with\n+    // fewer instructions:\n     //\n+    //      IncludeSlots = _mm_andnot_si128(IgnoreSlotsByLength,\n+    //                                      IncludeSlotsByUniqueChar);\n+    //\n+    //      if (!IncludeSlots) {\n+    //          return NO_MATCH_FOUND;\n+    //      }\n+    //\n+    //\n+\n+    if (_mm_testc_si128(IgnoreSlotsByLength, IncludeSlotsByUniqueChar)) {\n\n-    IncludeSlotsByLength = _mm_xor_si128(IgnoreSlotsByLength, AllOnesXmm);\n+        //\n+        // No remaining slots were left after we intersected the slots with\n+        // matching unique characters with the inverted slots to ignore due\n+        // to length.  Thus, no prefix match was found.\n+        //\n+\n+        return NO_MATCH_FOUND;\n+    }\n\n     //\n-    // We're now ready to intersect the two XMM registers to determine which\n-    // slots should still be included in the comparison (i.e. which slots have\n-    // the exact same unique character as the string and a length less than or\n-    // equal to the length of the search string).\n+    // Continue with the remaining logic, including actually generating the\n+    // IncludeSlots, which we need for bitmap generation as part of our\n+    // comparison loop.\n+    //\n+    // As the IgnoreSlotsByLength XMM register is the inverse of what we want\n+    // at the moment (we want 0xff for slots to include, and 0x00 for slots\n+    // to ignore; it's currently the other way around), we use _mm_andnot_si128\n+    // instead of just _mm_and_si128.\n     //\n\n-    IncludeSlots = _mm_and_si128(IncludeSlotsByUniqueChar,\n-                                 IncludeSlotsByLength);\n+    IncludeSlots = _mm_andnot_si128(IgnoreSlotsByLength,\n+                                    IncludeSlotsByUniqueChar);\n\n     //\n     // Generate a mask.\n@@ -187,17 +204,6 @@\n\n     Bitmap = _mm_movemask_epi8(IncludeSlots);\n\n-    if (!Bitmap) {\n-\n-        //\n-        // No bits were set, so there are no strings in this table starting\n-        // with the same character and of a lesser or equal length as the\n-        // search string.\n-        //\n-\n-        return NO_MATCH_FOUND;\n-    }\n-\n     //\n     // Calculate the \"search length\" of the incoming string, which ensures we\n     // only compare up to the first 16 characters.\n\n\n% diff -u IsPrefixOfStringInTable_12.c IsPrefixOfStringInTable_14.c\n--- IsPrefixOfStringInTable_12.c        2018-04-26 17:47:54.970331600 -0400\n+++ IsPrefixOfStringInTable_14.c        2018-04-26 19:32:30.674199200 -0400\n@@ -19,7 +19,7 @@\n\n _Use_decl_annotations_\n STRING_TABLE_INDEX\n-IsPrefixOfStringInTable_12(\n+IsPrefixOfStringInTable_14(\n     PSTRING_TABLE StringTable,\n     PSTRING String,\n     PSTRING_MATCH Match\n@@ -32,15 +32,8 @@\n     search string.  That is, whether any string in the table \"starts with\n     or is equal to\" the search string.\n\n-    This version is based off version 10, but with factors in the improvements\n-    made to version 4 of the x64 assembly version, thanks to suggestions from\n-    both Wojciech Mula (@pshufb) and Fabian Giesen (@rygorous).\n-\n-    Like version 11, we omit the vpxor to invert the lengths, but instead of\n-    an initial vpandn, we leverage the fact that vptest sets the carry flag\n-    if all 0s result from the expression: \"param1 and (not param2)\".  This\n-    allows us to do a fast-path early exit (like x64 version 2 does) if no\n-    match is found.\n+    This version combines the altered bitmap logic from version 13 with the\n+    fast-path _mm_testc_si128() exit from version 12.\n\n Arguments:\n\n@@ -61,12 +54,9 @@\n {\n     ULONG Bitmap;\n     ULONG Mask;\n-    ULONG Count;\n     ULONG Length;\n     ULONG Index;\n-    ULONG Shift = 0;\n     ULONG CharactersMatched;\n-    ULONG NumberOfTrailingZeros;\n     ULONG SearchLength;\n     PSTRING TargetString;\n     STRING_SLOT Slot;\n@@ -118,7 +108,7 @@\n     // Load the first 16-bytes of the search string into an XMM register.\n     //\n\n-    Search.CharsXmm = _mm_load_si128((PXMMWORD)String-&gt;Buffer);\n+    Search.CharsXmm = _mm_loadu_si128((PXMMWORD)String-&gt;Buffer);\n\n     //\n     // Broadcast the search string's unique characters according to the string\n@@ -164,7 +154,7 @@\n     // N.B. Because we default the length of empty slots to 0x7f, they will\n     //      handily be included in the ignored set (i.e. their words will also\n     //      be set to 0xff), which means they'll also get filtered out when\n-    //      we do the \"and not\" intersection with the include slots next.\n+    //      we invert the mask shortly after.\n     //\n\n     IgnoreSlotsByLength = _mm_cmpgt_epi8(Lengths.SlotsXmm, LengthXmm);\n@@ -209,8 +199,7 @@\n                                     IncludeSlotsByUniqueChar);\n\n     //\n-    // Generate a mask, count the number of bits, and initialize the search\n-    // length.\n+    // Generate a mask.\n     //\n\n     Bitmap = _mm_movemask_epi8(IncludeSlots);\n@@ -222,31 +211,26 @@\n\n     SearchLength = min(String-&gt;Length, 16);\n\n-    //\n-    // A popcount against the mask will tell us how many slots we matched, and\n-    // thus, need to compare.\n-    //\n-\n-    Count = __popcnt(Bitmap);\n-\n-    do {\n+    while (Bitmap) {\n\n         //\n         // Extract the next index by counting the number of trailing zeros left\n-        // in the bitmap and adding the amount we've already shifted by.\n+        // in the bitmap.\n         //\n\n-        NumberOfTrailingZeros = _tzcnt_u32(Bitmap);\n-        Index = NumberOfTrailingZeros + Shift;\n+        Index = _tzcnt_u32(Bitmap);\n\n         //\n-        // Shift the bitmap right, past the zeros and the 1 that was just found,\n-        // such that it's positioned correctly for the next loop's tzcnt. Update\n-        // the shift count accordingly.\n+        // Clear the bitmap's lowest set bit, such that it's ready for the next\n+        // loop's tzcnt if no match is found in this iteration.  Equivalent to\n+        //\n+        //      Bitmap &= Bitmap - 1;\n+        //\n+        // (Which the optimizer will convert into a blsr instruction anyway in\n+        //  non-debug builds.  But it's nice to be explicit.)\n         //\n\n-        Bitmap &gt;&gt;= (NumberOfTrailingZeros + 1);\n-        Shift = Index + 1;\n+        Bitmap = _blsr_u32(Bitmap);\n\n         //\n         // Load the slot and its length.\n@@ -329,7 +313,7 @@\n\n         return (STRING_TABLE_INDEX)Index;\n\n-    } while (--Count);\n+    }\n\n     //\n     // If we get here, we didn't find a match.\n\n\n_Use_decl_annotations_\nSTRING_TABLE_INDEX\nIsPrefixOfStringInTable_14(\n    PSTRING_TABLE StringTable,\n    PSTRING String,\n    PSTRING_MATCH Match\n    )\n/*++\n\nRoutine Description:\n\n    Searches a string table to see if any strings \"prefix match\" the given\n    search string.  That is, whether any string in the table \"starts with\n    or is equal to\" the search string.\n\n    This version combines the altered bitmap logic from version 13 with the\n    fast-path _mm_testc_si128() exit from version 12.\n\nArguments:\n\n    StringTable - Supplies a pointer to a STRING_TABLE struct.\n\n    String - Supplies a pointer to a STRING struct that contains the string to\n        search for.\n\n    Match - Optionally supplies a pointer to a variable that contains the\n        address of a STRING_MATCH structure.  This will be populated with\n        additional details about the match if a non-NULL pointer is supplied.\n\nReturn Value:\n\n    Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n\n--*/\n{\n    ULONG Bitmap;\n    ULONG Mask;\n    ULONG Length;\n    ULONG Index;\n    ULONG CharactersMatched;\n    ULONG SearchLength;\n    PSTRING TargetString;\n    STRING_SLOT Slot;\n    STRING_SLOT Search;\n    STRING_SLOT Compare;\n    SLOT_LENGTHS Lengths;\n    XMMWORD LengthXmm;\n    XMMWORD UniqueChar;\n    XMMWORD TableUniqueChars;\n    XMMWORD IncludeSlotsByUniqueChar;\n    XMMWORD IgnoreSlotsByLength;\n    XMMWORD IncludeSlots;\n\n    //\n    // Unconditionally do the following five operations before checking any of\n    // the results and determining how the search should proceed:\n    //\n    //  1. Load the search string into an Xmm register, and broadcast the\n    //     character indicated by the unique character index (relative to\n    //     other strings in the table) across a second Xmm register.\n    //\n    //  2. Load the string table's unique character array into an Xmm register.\n    //\n    //  3. Broadcast the search string's length into an XMM register.\n    //\n    //  3. Load the string table's slot lengths array into an XMM register.\n    //\n    //  4. Compare the unique character from step 1 to the string table's unique\n    //     character array set up in step 2.  The result of this comparison\n    //     will produce an XMM register with each byte set to either 0xff if\n    //     the unique character was found, or 0x0 if it wasn't.\n    //\n    //  5. Compare the search string's length from step 3 to the string table's\n    //     slot length array set up in step 3.  This allows us to identify the\n    //     slots that have strings that are of lesser or equal length to our\n    //     search string.  As we're doing a prefix search, we can ignore any\n    //     slots longer than our incoming search string.\n    //\n    // We do all five of these operations up front regardless of whether or not\n    // they're strictly necessary.  That is, if the unique character isn't in\n    // the unique character array, we don't need to load array lengths -- and\n    // vice versa.  However, we assume the benefits afforded by giving the CPU\n    // a bunch of independent things to do unconditionally up-front outweigh\n    // the cost of putting in branches and conditionally loading things if\n    // necessary.\n    //\n\n    //\n    // Load the first 16-bytes of the search string into an XMM register.\n    //\n\n    Search.CharsXmm = _mm_loadu_si128((PXMMWORD)String-&gt;Buffer);\n\n    //\n    // Broadcast the search string's unique characters according to the string\n    // table's unique character index.\n    //\n\n    UniqueChar = _mm_shuffle_epi8(Search.CharsXmm,\n                                  StringTable-&gt;UniqueIndex.IndexXmm);\n\n    //\n    // Load the slot length array into an XMM register.\n    //\n\n    Lengths.SlotsXmm = _mm_load_si128(&StringTable-&gt;Lengths.SlotsXmm);\n\n    //\n    // Load the string table's unique character array into an XMM register.\n    //\n\n    TableUniqueChars = _mm_load_si128(&StringTable-&gt;UniqueChars.CharsXmm);\n\n    //\n    // Broadcast the search string's length into an XMM register.\n    //\n\n    LengthXmm.m128i_u8[0] = (BYTE)String-&gt;Length;\n    LengthXmm = _mm_broadcastb_epi8(LengthXmm);\n\n    //\n    // Compare the search string's unique character with all of the unique\n    // characters of strings in the table, saving the results into an XMM\n    // register.  This comparison will indicate which slots we can ignore\n    // because the characters at a given index don't match.  Matched slots\n    // will be 0xff, unmatched slots will be 0x0.\n    //\n\n    IncludeSlotsByUniqueChar = _mm_cmpeq_epi8(UniqueChar, TableUniqueChars);\n\n    //\n    // Find all slots that are longer than the incoming string length, as these\n    // are the ones we're going to exclude from any prefix match.\n    //\n    // N.B. Because we default the length of empty slots to 0x7f, they will\n    //      handily be included in the ignored set (i.e. their words will also\n    //      be set to 0xff), which means they'll also get filtered out when\n    //      we invert the mask shortly after.\n    //\n\n    IgnoreSlotsByLength = _mm_cmpgt_epi8(Lengths.SlotsXmm, LengthXmm);\n\n    //\n    // We can do a fast-path test for no match here via _mm_testc_si128(),\n    // which is essentially equivalent to the following logic, just with\n    // fewer instructions:\n    //\n    //      IncludeSlots = _mm_andnot_si128(IgnoreSlotsByLength,\n    //                                      IncludeSlotsByUniqueChar);\n    //\n    //      if (!IncludeSlots) {\n    //          return NO_MATCH_FOUND;\n    //      }\n    //\n    //\n\n    if (_mm_testc_si128(IgnoreSlotsByLength, IncludeSlotsByUniqueChar)) {\n\n        //\n        // No remaining slots were left after we intersected the slots with\n        // matching unique characters with the inverted slots to ignore due\n        // to length.  Thus, no prefix match was found.\n        //\n\n        return NO_MATCH_FOUND;\n    }\n\n    //\n    // Continue with the remaining logic, including actually generating the\n    // IncludeSlots, which we need for bitmap generation as part of our\n    // comparison loop.\n    //\n    // As the IgnoreSlotsByLength XMM register is the inverse of what we want\n    // at the moment (we want 0xff for slots to include, and 0x00 for slots\n    // to ignore; it's currently the other way around), we use _mm_andnot_si128\n    // instead of just _mm_and_si128.\n    //\n\n    IncludeSlots = _mm_andnot_si128(IgnoreSlotsByLength,\n                                    IncludeSlotsByUniqueChar);\n\n    //\n    // Generate a mask.\n    //\n\n    Bitmap = _mm_movemask_epi8(IncludeSlots);\n\n    //\n    // Calculate the \"search length\" of the incoming string, which ensures we\n    // only compare up to the first 16 characters.\n    //\n\n    SearchLength = min(String-&gt;Length, 16);\n\n    while (Bitmap) {\n\n        //\n        // Extract the next index by counting the number of trailing zeros left\n        // in the bitmap.\n        //\n\n        Index = _tzcnt_u32(Bitmap);\n\n        //\n        // Clear the bitmap's lowest set bit, such that it's ready for the next\n        // loop's tzcnt if no match is found in this iteration.  Equivalent to\n        //\n        //      Bitmap &= Bitmap - 1;\n        //\n        // (Which the optimizer will convert into a blsr instruction anyway in\n        //  non-debug builds.  But it's nice to be explicit.)\n        //\n\n        Bitmap = _blsr_u32(Bitmap);\n\n        //\n        // Load the slot and its length.\n        //\n\n        Slot.CharsXmm = _mm_load_si128(&StringTable-&gt;Slots[Index].CharsXmm);\n        Length = Lengths.Slots[Index];\n\n        //\n        // Compare the slot to the search string.\n        //\n\n        Compare.CharsXmm = _mm_cmpeq_epi8(Slot.CharsXmm, Search.CharsXmm);\n\n        //\n        // Create a mask of the comparison, then filter out high bits from the\n        // search string's length (which is capped at 16).  (This shouldn't be\n        // technically necessary as the string array buffers should have been\n        // calloc'd and zeroed, but optimizing compilers can often ignore the\n        // zeroing request -- which can produce some bizarre results where the\n        // debug build is correct (because the buffers were zeroed) but the\n        // release build fails because the zeroing got ignored and there are\n        // junk bytes past the NULL terminator, which get picked up in our\n        // 128-bit loads.)\n        //\n\n        Mask = _bzhi_u32(_mm_movemask_epi8(Compare.CharsXmm), SearchLength);\n\n        //\n        // Count how many characters matched.\n        //\n\n        CharactersMatched = __popcnt(Mask);\n\n        if ((USHORT)CharactersMatched &lt; Length && Length &lt;= 16) {\n\n            //\n            // The slot length is longer than the number of characters matched\n            // from the search string; this isn't a prefix match.  Continue.\n            //\n\n            continue;\n        }\n\n        if (Length &gt; 16) {\n\n            //\n            // The first 16 characters in the string matched against this\n            // slot, and the slot is oversized (longer than 16 characters),\n            // so do a direct comparison between the remaining buffers.\n            //\n\n            TargetString = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n            CharactersMatched = IsPrefixMatch(String, TargetString, 16);\n\n            if (CharactersMatched == NO_MATCH_FOUND) {\n\n                //\n                // The prefix match failed, continue our search.\n                //\n\n                continue;\n            }\n        }\n\n        //\n        // This slot is a prefix match.  Fill out the Match structure if the\n        // caller provided a non-NULL pointer, then return the index of the\n        // match.\n        //\n\n        if (ARGUMENT_PRESENT(Match)) {\n\n            Match-&gt;Index = (BYTE)Index;\n            Match-&gt;NumberOfMatchedCharacters = (BYTE)CharactersMatched;\n            Match-&gt;String = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n        }\n\n        return (STRING_TABLE_INDEX)Index;\n\n    }\n\n    //\n    // If we get here, we didn't find a match.\n    //\n\n    //IACA_VC_END();\n\n    return NO_MATCH_FOUND;\n}\n\n\n\nWe’re really clutching at straws here obviously with regards to trying to eke out more performance. The _mm_testc_si128() alteration was a tiny bit slower for version 12 across the board. However, the vptest (which is the underlying assembly instruction that maps to the _mm_testc_si128() intrinsic) version 4 of our assembly was definitely a little bit faster than the other versions. Let’s see how our final C version performs.\n\n\nBenchmark 14\n\n\n\nBenchmark 14\n\n\nWelp, at least it’s consistent! Like version 12, the _mm_testc_si128() change doesn’t really offer a compelling improvement for version 14. That makes version 13 officially our fastest C implementation for round 2.\n\n\nIsPrefixOfStringInTable_x64_5\n← IsPrefixOfStringInTable_x64_4 | IsPrefixOfStringInTable_x64_6 →\nBefore we conclude round 2, let’s see if we can eke any more performance out of the negative match fast path of our fastest assembly version so far: version 4. For this step, I’m going to leverage Intel Architecture Code Analyzer, or IACA, for short.\nThis is a handy little static analysis tool that can provide useful information for fine-tuning performance-sensitive code. Let’s take a look at the output from IACA for our assembly version 4. To do this, I uncomment the two macros, IACA_VC_START and IACA_VC_END, which reside at the start and end of the negative match logic. These macros are defined in StringTable.inc, and look like this:\nIACA_VC_START macro Name\n\n        mov     byte ptr gs:[06fh], 06fh\n\n        endm\n\nIACA_VC_END macro Name\n\n        mov     byte ptr gs:[0deh], 0deh\n\n        endm\nThe equivalent versions for C are defined in Rtl.h, and look like this:\n//\n// Define start/end markers for IACA.\n//\n\n#define IACA_VC_START() __writegsbyte(111, 111)\n#define IACA_VC_END()   __writegsbyte(222, 222)\nYou may have noticed commented-out versions of these macros in both the C and assembly code. What they do is emit a specific byte pattern in the instruction byte code that the IACA tool can detect. You place the start and end markers around the code you’re interested in, recompile it, then run IACA against the final executable (or library).\nLet’s see what happens when we do this for our version 4 assembly routine. I’ll include the relevant assembly snippet, reformatted into a more concise fashion, followed by the IACA output (also reformatted into a more concise fashion):\n\nAssemblyIACA\n\n\nmov      rax,  String.Buffer[rdx]                       ; Load address of string buffer.\nvmovdqu  xmm0, xmmword ptr [rax]                        ; Load search buffer.\nvmovdqa  xmm1, xmmword ptr StringTable.UniqueIndex[rcx] ; Load indexes.\nvpshufb  xmm5, xmm0, xmm1                               ; Rearrange string by uniq. ix.\nvmovdqa  xmm2, xmmword ptr StringTable.UniqueChars[rcx] ; Load unique chars.\nvpcmpeqb xmm5, xmm5, xmm2                               ; Compare unique chars.\nvmovdqa  xmm3, xmmword ptr StringTable.Lengths[rcx]     ; Load table lengths.\nvpbroadcastb xmm4, byte ptr String.Length[rdx]          ; Broadcast string length.\nvpcmpgtb xmm1, xmm3, xmm4                               ; Identify long slots.\nvptest   xmm1, xmm5                                     ; Unique slots AND (!long slots).\njnc      short Pfx10                                    ; CY=0, continue with routine.\nxor      eax, eax                                       ; CY=1, no match.  Clear rax.\nnot      al                                             ; al = -1 (NO_MATCH_FOUND)\nret                                                     ; Return NO_MATCH_FOUND\n\n\nS:\\Source\\tracer&gt;iaca x64\\Release\\StringTable2.dll\nIntel(R) Architecture Code Analyzer\nVersion -  v3.0-28-g1ba2cbb build date: 2017-10-23;17:30:24\nAnalyzed File -  x64\\Release\\StringTable2.dll\nBinary Format - 64Bit\nArchitecture  -  SKL\nAnalysis Type - Throughput\n\nThroughput Analysis Report\n--------------------------\nBlock Throughput: 3.74 Cycles       Throughput Bottleneck: Dependency Chains\nLoop Count:  22\nPort Binding In Cycles Per Iteration:\n----------------------------------------------------------------------------\n| Port   |  0  - DV  |  1  |  2  - D   |  3  - D   |  4  |  5  |  6  |  7  |\n----------------------------------------------------------------------------\n| Cycles | 2.0   0.0 | 1.0 | 3.5   3.5 | 3.5   3.5 | 0.0 | 3.0 | 2.0 | 0.0 |\n----------------------------------------------------------------------------\n\nDV - Divider pipe (on port 0)\nD - Data fetch pipe (on ports 2 and 3)\n* - instruction micro-ops not bound to a port\n^ - Micro Fusion occurred\n\n|    | Ports pressure in cycles        | |\n|µops|0DV| 1 | 2 - D | 3 - D |4| 5 | 6 |7|\n-------------------------------------------\n| 1  |   |   |0.5 0.5|0.5 0.5| |   |   | | mov rax, qword ptr [rdx+0x8]\n| 1  |   |   |0.5 0.5|0.5 0.5| |   |   | | vmovdqu xmm0, xmmword ptr [rax]\n| 1  |   |   |0.5 0.5|0.5 0.5| |   |   | | vmovdqa xmm1, xmmword ptr [rcx+0x10]\n| 1  |   |   |       |       | |1.0|   | | vpshufb xmm5, xmm0, xmm1\n| 1  |   |   |0.5 0.5|0.5 0.5| |   |   | | vmovdqa xmm2, xmmword ptr [rcx]\n| 1  |1.0|   |0.5 0.5|0.5 0.5| |   |   | | vpcmpeqb xmm5, xmm5, xmm2\n| 1  |   |   |0.5 0.5|0.5 0.5| |   |   | | vmovdqa xmm3, xmmword ptr [rcx+0x20]\n| 2  |   |   |0.5 0.5|0.5 0.5| |1.0|   | | vpbroadcastb xmm4, byte ptr [rdx]\n| 1  |   |1.0|       |       | |   |   | | vpcmpgtb xmm1, xmm3, xmm4\n| 2  |1.0|   |       |       | |1.0|   | | vptest xmm1, xmm5\n| 1  |   |   |       |       | |   |1.0| | jnb 0x10\n| 1* |   |   |       |       | |   |   | | xor eax, eax\n| 1  |   |   |       |       | |   |1.0| | not al\n| 3^ |   |   |0.5 0.5|0.5 0.5| |   |   | | ret\nTotal Num Of µops: 18\n\n\n\nThe Intel Architecture Code Analyzer User Manual (v3.0) provides decent documentation about how to interpret the output, so I won’t go over the gory details. What I’m really looking at in this pass is what my block throughput is, and potentially what the bottleneck is.\nIn this case, our block throughput is being reported as 3.74 cycles, which basically indicates how many CPU cycles it takes to execute the block. Our bottleneck is dependency chains, which refers to the situation where, say, instruction C can’t start because the results from instruction A aren’t ready yet.\nAlright, well, what can we do? A good answer would be that with an intimate understanding of contemporary Intel CPU architecture, you can pinpoint exactly what needs changing in order to reduce dependencies, maximize port utilization, and generally make the CPU happier.\nOr you can just move shit around until the number gets smaller. That’s what I did.\nWell, that’s not entirely true. Fabian did make a good suggestion when he was reviewing some of my assembly that I was often needlessly doing a load into an XMM register only to use it once in a subsequent operation. Instead of doing that, I could just use the load-op version of the instruction, which allows for an instruction input parameter to be sourced from memory.\nFor example, instead of this:\nvmovdqa  xmm2, xmmword ptr StringTable.UniqueChars[rcx] ; Load unique chars.\nvpcmpeqb xmm5, xmm5, xmm2                               ; Compare unique chars.\nYou can just do this:\nvpcmpeqb xmm5, xmm5, xmmword ptr StringTable.UniqueChars[rcx] ; Compare...\nBut yeah, other than a few load-op tweaks, I basically just shuffled shit around until the block throughput reported lower. Very rigorous methodology, I know. Here’s the final version, which also happens to be the version quoted in the introduction of this article:\n\nAssemblyIACA\n\n\nmov      rax,  String.Buffer[rdx]                   ; Load address of string buffer.\nvpbroadcastb xmm4, byte ptr String.Length[rdx]      ; Broadcast string length.\nvmovdqa  xmm3, xmmword ptr StringTable.Lengths[rcx] ; Load table lengths.\nvmovdqu  xmm0, xmmword ptr [rax]                    ; Load string buffer.\nvpcmpgtb xmm1, xmm3, xmm4                           ; Identify slots &gt; string len.\nvpshufb  xmm5, xmm0, StringTable.UniqueIndex[rcx]   ; Rearrange string by unique index.\nvpcmpeqb xmm5, xmm5, StringTable.UniqueChars[rcx]   ; Compare rearranged to unique.\nvptest   xmm1, xmm5                                 ; Unique slots AND (!long slots).\njnc      short Pfx10                                ; CY=0, continue with routine.\nxor      eax, eax                                   ; CY=1, no match.\nnot      al                                         ; al = -1 (NO_MATCH_FOUND).\nret                                                 ; Return NO_MATCH_FOUND.\n\n\nS:\\Source\\tracer&gt;iaca x64\\Release\\StringTable2.dll\nIntel(R) Architecture Code Analyzer\nVersion -  v3.0-28-g1ba2cbb build date: 2017-10-23;17:30:24\nAnalyzed File -  x64\\Release\\StringTable2.dll\nBinary Format - 64Bit\nArchitecture  -  SKL\nAnalysis Type - Throughput\n\nThroughput Analysis Report\n--------------------------\nBlock Throughput: 3.48 Cycles       Throughput Bottleneck: FrontEnd\nLoop Count:  24\nPort Binding In Cycles Per Iteration:\n----------------------------------------------------------------------------\n| Port   |  0  - DV  |  1  |  2  - D   |  3  - D   |  4  |  5  |  6  |  7  |\n----------------------------------------------------------------------------\n| Cycles | 2.0   0.0 | 1.0 | 3.5   3.5 | 3.5   3.5 | 0.0 | 3.0 | 2.0 | 0.0 |\n----------------------------------------------------------------------------\n\nDV - Divider pipe (on port 0)\nD - Data fetch pipe (on ports 2 and 3)\n* - instruction micro-ops not bound to a port\n^ - Micro Fusion occurred\n\n|    | Ports pressure in cycles        | |\n|µops|0DV| 1 | 2 - D | 3 - D |4| 5 | 6 |7|\n-------------------------------------------\n| 1  |   |   |0.5 0.5|0.5 0.5| |   |   | | mov rax, qword ptr [rdx+0x8]\n| 2  |   |   |0.5 0.5|0.5 0.5| |1.0|   | | vpbroadcastb xmm4, byte ptr [rdx]\n| 1  |   |   |0.5 0.5|0.5 0.5| |   |   | | vmovdqa xmm3, xmmword ptr [rcx+0x20]\n| 1  |   |   |0.5 0.5|0.5 0.5| |   |   | | vmovdqu xmm0, xmmword ptr [rax]\n| 1  |1.0|   |       |       | |   |   | | vpcmpgtb xmm1, xmm3, xmm4\n| 2^ |   |   |0.5 0.5|0.5 0.5| |1.0|   | | vpshufb xmm5, xmm0, xmmword ptr [rcx+0x10]\n| 2^ |   |1.0|0.5 0.5|0.5 0.5| |   |   | | vpcmpeqb xmm5, xmm5, xmmword ptr [rcx]\n| 2  |1.0|   |       |       | |1.0|   | | vptest xmm1, xmm5\n| 1  |   |   |       |       | |   |1.0| | jnb 0x10\n| 1* |   |   |       |       | |   |   | | xor eax, eax\n| 1  |   |   |       |       | |   |1.0| | not al\n| 3^ |   |   |0.5 0.5|0.5 0.5| |   |   | | ret\nTotal Num Of µops: 18\n\n\n\nAs you can see, that is reporting a block throughput of 3.48 instead of 3.74. A whopping 0.26 reduction! Also note the bottleneck is now being reported as FrontEnd, which basically means that the thing holding up this code now is literally the CPU’s ability to decode the actual instruction stream into actionable internal work. (Again, super simplistic explanation of a very complex process.)\nFor the sake of completeness, here’s the proper diff and full version of assembly version 5:\n\nDiff (5 vs 4)Full\n\n\n% diff -u IsPrefixOfStringInTable_x64_4.asm IsPrefixOfStringInTable_x64_5.asm\n--- IsPrefixOfStringInTable_x64_4.asm   2018-04-26 17:56:37.934374900 -0400\n+++ IsPrefixOfStringInTable_x64_5.asm   2018-04-26 18:17:26.087861100 -0400\n@@ -33,9 +33,14 @@\n ;   search string.  That is, whether any string in the table \"starts with\n ;   or is equal to\" the search string.\n ;\n-;   This routine is based off version 2, but leverages the fact that\n-;   vptest sets the carry flag if '(xmm0 and (not xmm1))' evaluates\n-;   to all 0s, avoiding the the need to do the pxor or pandn steps.\n+;   This routine is identical to version 4, but has the initial negative match\n+;   instructions re-ordered and tweaked in order to reduce the block throughput\n+;   reported by IACA (from 3.74 to 3.48).\n+;\n+;   N.B. Although this does result in a measurable speedup, the clarity suffers\n+;        somewhat due to the fact that instructions that were previously paired\n+;        together are now spread out (e.g. moving the string buffer address into\n+;        rax and then loading that into xmm0 three instructions later).\n ;\n ; Arguments:\n ;\n@@ -54,32 +59,21 @@\n ;\n ;--\n\n-        LEAF_ENTRY IsPrefixOfStringInTable_x64_4, _TEXT$00\n+        LEAF_ENTRY IsPrefixOfStringInTable_x64_5, _TEXT$00\n\n ;\n-; Load the string buffer into xmm0, and the unique indexes from the string table\n-; into xmm1.  Shuffle the buffer according to the unique indexes, and store the\n-; result into xmm5.\n+; Load the address of the string buffer into rax.\n ;\n\n         ;IACA_VC_START\n\n-        mov     rax, String.Buffer[rdx]\n-        vmovdqu xmm0, xmmword ptr [rax]                 ; Load search buffer.\n-        vmovdqa xmm1, xmmword ptr StringTable.UniqueIndex[rcx] ; Load indexes.\n-        vpshufb xmm5, xmm0, xmm1\n-\n-;\n-; Load the string table's unique character array into xmm2.\n-\n-        vmovdqa xmm2, xmmword ptr StringTable.UniqueChars[rcx]  ; Load chars.\n+        mov     rax, String.Buffer[rdx]         ; Load buffer addr.\n\n ;\n-; Compare the search string's unique character array (xmm5) against the string\n-; table's unique chars (xmm2), saving the result back into xmm5.\n+; Broadcast the byte-sized string length into xmm4.\n ;\n\n-        vpcmpeqb    xmm5, xmm5, xmm2            ; Compare unique chars.\n+        vpbroadcastb xmm4, byte ptr String.Length[rdx]  ; Broadcast length.\n\n ;\n ; Load the lengths of each string table slot into xmm3.\n@@ -88,26 +82,38 @@\n         vmovdqa xmm3, xmmword ptr StringTable.Lengths[rcx]  ; Load lengths.\n\n ;\n-; Broadcast the byte-sized string length into xmm4.\n+; Load the search string buffer into xmm0.\n ;\n\n-        vpbroadcastb xmm4, byte ptr String.Length[rdx]  ; Broadcast length.\n+        vmovdqu xmm0, xmmword ptr [rax]         ; Load search buffer.\n\n ;\n ; Compare the search string's length, which we've broadcasted to all 8-byte\n ; elements of the xmm4 register, to the lengths of the slots in the string\n-; table, to find those that are greater in length.  Invert the result, such\n-; that we're left with a masked register where each 0xff element indicates\n-; a slot with a length less than or equal to our search string's length.\n+; table, to find those that are greater in length.\n ;\n\n         vpcmpgtb    xmm1, xmm3, xmm4            ; Identify long slots.\n\n ;\n+; Shuffle the buffer in xmm0 according to the unique indexes, and store the\n+; result into xmm5.\n+;\n+\n+        vpshufb     xmm5, xmm0, StringTable.UniqueIndex[rcx] ; Rearrange string.\n+\n+;\n+; Compare the search string's unique character array (xmm5) against the string\n+; table's unique chars (xmm2), saving the result back into xmm5.\n+;\n+\n+        vpcmpeqb    xmm5, xmm5, StringTable.UniqueChars[rcx] ; Compare to uniq.\n+\n+;\n ; Intersect-and-test the unique character match xmm mask register (xmm5) with\n-; the inverted length match mask xmm register (xmm1).  This will set the carry\n-; flag (CY = 1) if the result of 'xmm5 and (not xmm1)' is all 0s, which allows\n-; us to do a fast-path exit for the no-match case.\n+; the length match mask xmm register (xmm1).  This affects flags, allowing us\n+; to do a fast-path exit for the no-match case (where CY = 1 after xmm1 has\n+; been inverted).\n ;\n\n         vptest      xmm1, xmm5                  ; Check for no match.\n@@ -472,7 +478,7 @@\n\n         ;IACA_VC_END\n\n-        LEAF_END   IsPrefixOfStringInTable_x64_4, _TEXT$00\n+        LEAF_END   IsPrefixOfStringInTable_x64_5, _TEXT$00\n\n ; vim:set tw=80 ts=8 sw=4 sts=4 et syntax=masm fo=croql comments=\\:;           :\n\n\n;++\n;\n; STRING_TABLE_INDEX\n; IsPrefixOfStringInTable_x64_*(\n;     _In_ PSTRING_TABLE StringTable,\n;     _In_ PSTRING String,\n;     _Out_opt_ PSTRING_MATCH Match\n;     )\n;\n; Routine Description:\n;\n;   Searches a string table to see if any strings \"prefix match\" the given\n;   search string.  That is, whether any string in the table \"starts with\n;   or is equal to\" the search string.\n;\n;   This routine is identical to version 4, but has the initial negative match\n;   instructions re-ordered and tweaked in order to reduce the block throughput\n;   reported by IACA (from 3.74 to 3.48).\n;\n;   N.B. Although this does result in a measurable speedup, the clarity suffers\n;        somewhat due to the fact that instructions that were previously paired\n;        together are now spread out (e.g. moving the string buffer address into\n;        rax and then loading that into xmm0 three instructions later).\n;\n; Arguments:\n;\n;   StringTable - Supplies a pointer to a STRING_TABLE struct.\n;\n;   String - Supplies a pointer to a STRING struct that contains the string to\n;       search for.\n;\n;   Match - Optionally supplies a pointer to a variable that contains the\n;       address of a STRING_MATCH structure.  This will be populated with\n;       additional details about the match if a non-NULL pointer is supplied.\n;\n; Return Value:\n;\n;   Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n;\n;--\n\n        LEAF_ENTRY IsPrefixOfStringInTable_x64_5, _TEXT$00\n\n;\n; Load the address of the string buffer into rax.\n;\n\n        ;IACA_VC_START\n\n        mov     rax, String.Buffer[rdx]         ; Load buffer addr.\n\n;\n; Broadcast the byte-sized string length into xmm4.\n;\n\n        vpbroadcastb xmm4, byte ptr String.Length[rdx]  ; Broadcast length.\n\n;\n; Load the lengths of each string table slot into xmm3.\n;\n\n        vmovdqa xmm3, xmmword ptr StringTable.Lengths[rcx]  ; Load lengths.\n\n;\n; Load the search string buffer into xmm0.\n;\n\n        vmovdqu xmm0, xmmword ptr [rax]         ; Load search buffer.\n\n;\n; Compare the search string's length, which we've broadcasted to all 8-byte\n; elements of the xmm4 register, to the lengths of the slots in the string\n; table, to find those that are greater in length.\n;\n\n        vpcmpgtb    xmm1, xmm3, xmm4            ; Identify long slots.\n\n;\n; Shuffle the buffer in xmm0 according to the unique indexes, and store the\n; result into xmm5.\n;\n\n        vpshufb     xmm5, xmm0, StringTable.UniqueIndex[rcx] ; Rearrange string.\n\n;\n; Compare the search string's unique character array (xmm5) against the string\n; table's unique chars (xmm2), saving the result back into xmm5.\n;\n\n        vpcmpeqb    xmm5, xmm5, StringTable.UniqueChars[rcx] ; Compare to uniq.\n\n;\n; Intersect-and-test the unique character match xmm mask register (xmm5) with\n; the length match mask xmm register (xmm1).  This affects flags, allowing us\n; to do a fast-path exit for the no-match case (where CY = 1 after xmm1 has\n; been inverted).\n;\n\n        vptest      xmm1, xmm5                  ; Check for no match.\n        jnc         short Pfx10                 ; There was a match.\n\n;\n; No match, set rax to -1 and return.\n;\n\n        xor         eax, eax                    ; Clear rax.\n        not         al                          ; al = -1\n        ret                                     ; Return.\n\n        ;IACA_VC_END\n\n;\n; (There was at least one match, continue with processing.)\n;\n\n;\n; Calculate the \"search length\" for the incoming search string, which is\n; equivalent of 'min(String-&gt;Length, 16)'.  (The search string's length\n; currently lives in xmm4, albeit as a byte-value broadcasted across the\n; entire register, so extract that first.)\n;\n; Once the search length is calculated, deposit it back at the second byte\n; location of xmm4.\n;\n;   r10 and xmm4[15:8] - Search length (min(String-&gt;Length, 16))\n;\n;   r11 - String length (String-&gt;Length)\n;\n\nPfx10:  vpextrb     r11, xmm4, 0                ; Load length.\n        mov         rax, 16                     ; Load 16 into rax.\n        mov         r10, r11                    ; Copy into r10.\n        cmp         r10w, ax                    ; Compare against 16.\n        cmova       r10w, ax                    ; Use 16 if length is greater.\n        vpinsrb     xmm4, xmm4, r10d, 1         ; Save back to xmm4b[1].\n\n;\n; Home our parameter registers into xmm registers instead of their stack-backed\n; location, to avoid memory writes.\n;\n\n        vpxor       xmm2, xmm2, xmm2            ; Clear xmm2.\n        vpinsrq     xmm2, xmm2, rcx, 0          ; Save rcx into xmm2q[0].\n        vpinsrq     xmm2, xmm2, rdx, 1          ; Save rdx into xmm2q[1].\n\n;\n; Intersect xmm5 and xmm1 (as we did earlier with the 'vptest xmm1, xmm5'),\n; yielding a mask identifying indices we need to perform subsequent matches\n; upon.  Convert this into a bitmap and save in xmm2d[2].\n;\n\n        vpandn      xmm5, xmm1, xmm5            ; Intersect unique + lengths.\n        vpmovmskb   edx, xmm5                   ; Generate a bitmap from mask.\n\n;\n; We're finished with xmm5; repurpose it in the same vein as xmm2 above.\n;\n\n        vpxor       xmm5, xmm5, xmm5            ; Clear xmm5.\n        vpinsrq     xmm5, xmm5, r8, 0           ; Save r8 into xmm5q[0].\n\n;\n; Summary of xmm register stashing for the rest of the routine:\n;\n; xmm2:\n;        0:63   (vpinsrq 0)     rcx (1st function parameter, StringTable)\n;       64:127  (vpinsrq 1)     rdx (2nd function paramter, String)\n;\n; xmm4:\n;       0:7     (vpinsrb 0)     length of search string\n;       8:15    (vpinsrb 1)     min(String-&gt;Length, 16)\n;      16:23    (vpinsrb 2)     loop counter (when doing long string compares)\n;      24:31    (vpinsrb 3)     shift count\n;\n; xmm5:\n;       0:63    (vpinsrq 0)     r8 (3rd function parameter, StringMatch)\n;      64:95    (vpinsrd 2)     bitmap of slots to compare\n;      96:127   (vpinsrd 3)     index of slot currently being processed\n;\n\n;\n; Initialize rcx as our counter register by doing a popcnt against the bitmap\n; we just generated in edx, and clear our shift count register (r9).\n;\n\n        popcnt      ecx, edx                    ; Count bits in bitmap.\n        xor         r9, r9                      ; Clear r9.\n\n        align 16\n\n;\n; Top of the main comparison loop.  The bitmap will be present in rdx.  Count\n; trailing zeros of the bitmap, and then add in the shift count, producing an\n; index (rax) we can use to load the corresponding slot.\n;\n; Register usage at top of loop:\n;\n;   rax - Index.\n;\n;   rcx - Loop counter.\n;\n;   rdx - Bitmap initially, then slot length.\n;\n;   r9 - Shift count.\n;\n;   r10 - Search length.\n;\n;   r11 - String length.\n;\n\nPfx20:  tzcnt       r8d, edx                    ; Count trailing zeros.\n        mov         eax, r8d                    ; Copy tzcnt to rax,\n        add         rax, r9                     ; Add shift to create index.\n        inc         r8                          ; tzcnt + 1\n        shrx        rdx, rdx, r8                ; Reposition bitmap.\n        vpinsrd     xmm5, xmm5, edx, 2          ; Store bitmap, free up rdx.\n        xor         edx, edx                    ; Clear edx.\n        mov         r9, rax                     ; Copy index back to shift.\n        inc         r9                          ; Shift = Index + 1\n        vpinsrd     xmm5, xmm5, eax, 3          ; Store the raw index xmm5d[3].\n\n;\n; \"Scale\" the index (such that we can use it in a subsequent vmovdqa) by\n; shifting left by 4 (i.e. multiply by '(sizeof STRING_SLOT)', which is 16).\n;\n; Then, load the string table slot at this index into xmm1, then shift rax back.\n;\n\n        shl         eax, 4\n        vpextrq     r8, xmm2, 0\n        vmovdqa     xmm1, xmmword ptr [rax + StringTable.Slots[r8]]\n        shr         eax, 4\n\n;\n; The search string's first 16 characters are already in xmm0.  Compare this\n; against the slot that has just been loaded into xmm1, storing the result back\n; into xmm1.\n;\n\n        vpcmpeqb    xmm1, xmm1, xmm0            ; Compare search string to slot.\n\n;\n; Convert the XMM mask into a 32-bit representation, then zero high bits after\n; our \"search length\", which allows us to ignore the results of the comparison\n; above for bytes that were after the search string's length, if applicable.\n; Then, count the number of bits remaining, which tells us how many characters\n; we matched.\n;\n\n        vpmovmskb   r8d, xmm1                   ; Convert into mask.\n        bzhi        r8d, r8d, r10d              ; Zero high bits.\n        popcnt      r8d, r8d                    ; Count bits.\n\n;\n; Load the slot length into rdx.  As xmm3 already has all the slot lengths in\n; it, we can load rax (the current index) into xmm1 and use it to extract the\n; slot length via shuffle.  (The length will be in the lowest byte of xmm1\n; after the shuffle, which we can then vpextrb.)\n;\n\n        movd        xmm1, rax                   ; Load index into xmm1.\n        vpshufb     xmm1, xmm3, xmm1            ; Shuffle lengths.\n        vpextrb     rdx, xmm1, 0                ; Extract target length to rdx.\n\n;\n; If 16 characters matched, and the search string's length is longer than 16,\n; we're going to need to do a comparison of the remaining strings.\n;\n\n        cmp         r8w, 16                     ; Compare chars matched to 16.\n        je          short @F                    ; 16 chars matched.\n        jmp         Pfx30                       ; Less than 16 matched.\n\n;\n; All 16 characters matched.  If the slot length is greater than 16, we need\n; to do an inline memory comparison of the remaining bytes.  If it's 16 exactly,\n; then great, that's a slot match, we're done.\n;\n\n@@:     cmp         dl, 16                      ; Compare length to 16.\n        ja          Pfx50                       ; Length is &gt; 16.\n        je          short Pfx35                 ; Lengths match!\n                                                ; Length &lt;= 16, fall through...\n\n;\n; Less than or equal to 16 characters were matched.  Compare this against the\n; length of the slot; if equal, this is a match, if not, no match, continue.\n;\n\nPfx30:  cmp         r8b, dl                     ; Compare against slot length.\n        jne         @F                          ; No match found.\n        jmp         short Pfx35                 ; Match found!\n\n;\n; No match against this slot, decrement counter and either continue the loop\n; or terminate the search and return no match.\n;\n\n@@:     vpextrd     edx, xmm5, 2                ; Restore rdx bitmap.\n        dec         cx                          ; Decrement counter.\n        jnz         Pfx20                       ; cx != 0, continue.\n\n        xor         eax, eax                    ; Clear rax.\n        not         al                          ; al = -1\n        ret                                     ; Return.\n\n;\n; Pfx35 and Pfx40 are the jump targets for when the prefix match succeeds.  The\n; former is used when we need to copy the number of characters matched from r8\n; back to rax.  The latter jump target doesn't require this.\n;\n\nPfx35:  mov         rax, r8                     ; Copy numbers of chars matched.\n\n;\n; Load the match parameter back into r8 and test to see if it's not-NULL, in\n; which case we need to fill out a STRING_MATCH structure for the match.\n;\n\nPfx40:  vpextrq     r8, xmm5, 0                 ; Extract StringMatch.\n        test        r8, r8                      ; Is NULL?\n        jnz         short @F                    ; Not zero, need to fill out.\n\n;\n; StringMatch is NULL, we're done. Extract index of match back into rax and ret.\n;\n\n        vpextrd     eax, xmm5, 3                ; Extract raw index for match.\n        ret                                     ; StringMatch == NULL, finish.\n\n;\n; StringMatch is not NULL.  Fill out characters matched (currently rax), then\n; reload the index from xmm5 into rax and save.\n;\n\n@@:     mov         byte ptr StringMatch.NumberOfMatchedCharacters[r8], al\n        vpextrd     eax, xmm5, 3                ; Extract raw index for match.\n        mov         byte ptr StringMatch.Index[r8], al\n\n;\n; Final step, loading the address of the string in the string array.  This\n; involves going through the StringTable, so we need to load that parameter\n; back into rcx, then resolving the string array address via pStringArray,\n; then the relevant STRING offset within the StringArray.Strings structure.\n;\n\n        vpextrq     rcx, xmm2, 0            ; Extract StringTable into rcx.\n        mov         rcx, StringTable.pStringArray[rcx] ; Load string array.\n\n        shl         eax, 4                  ; Scale the index; sizeof STRING=16.\n        lea         rdx, [rax + StringArray.Strings[rcx]] ; Resolve address.\n        mov         qword ptr StringMatch.String[r8], rdx ; Save STRING ptr.\n        shr         eax, 4                  ; Revert the scaling.\n\n        ret\n\n;\n; 16 characters matched and the length of the underlying slot is greater than\n; 16, so we need to do a little memory comparison to determine if the search\n; string is a prefix match.\n;\n; The slot length is stored in rax at this point, and the search string's\n; length is stored in r11.  We know that the search string's length will\n; always be longer than or equal to the slot length at this point, so, we\n; can subtract 16 (currently stored in r10) from rax, and use the resulting\n; value as a loop counter, comparing the search string with the underlying\n; string slot byte-by-byte to determine if there's a match.\n;\n\nPfx50:  sub         rdx, r10                ; Subtract 16 from search length.\n\n;\n; Free up some registers by stashing their values into various xmm offsets.\n;\n\n        vpinsrb     xmm4, xmm4, ecx, 2      ; Free up rcx register.\n        mov         rcx, rdx                ; Free up rdx, rcx is now counter.\n\n;\n; Load the search string buffer and advance it 16 bytes.\n;\n\n        vpextrq     r11, xmm2, 1            ; Extract String into r11.\n        mov         r11, String.Buffer[r11] ; Load buffer address.\n        add         r11, r10                ; Advance buffer 16 bytes.\n\n;\n; Loading the slot is more involved as we have to go to the string table, then\n; the pStringArray pointer, then the relevant STRING offset within the string\n; array (which requires re-loading the index from xmm5d[3]), then the string\n; buffer from that structure.\n;\n\n        vpextrq     r8, xmm2, 0             ; Extract StringTable into r8.\n        mov         r8, StringTable.pStringArray[r8] ; Load string array.\n\n        shl         eax, 4                  ; Scale the index; sizeof STRING=16.\n\n        lea         r8, [rax + StringArray.Strings[r8]] ; Resolve address.\n        mov         r8, String.Buffer[r8]   ; Load string table buffer address.\n        add         r8, r10                 ; Advance buffer 16 bytes.\n\n        xor         eax, eax                ; Clear eax.\n\n;\n; We've got both buffer addresses + 16 bytes loaded in r11 and r8 respectively.\n; Do a byte-by-byte comparison.\n;\n\n        align 16\n@@:     mov         dl, byte ptr [rax + r11]    ; Load byte from search string.\n        cmp         dl, byte ptr [rax + r8]     ; Compare against target.\n        jne         short Pfx60                 ; If not equal, jump.\n\n;\n; The two bytes were equal, update rax, decrement rcx and potentially continue\n; the loop.\n;\n\n        inc         ax                          ; Increment index.\n        loopnz      @B                          ; Decrement cx and loop back.\n\n;\n; All bytes matched!  Add 16 (still in r10) back to rax such that it captures\n; how many characters we matched, and then jump to Pfx40 for finalization.\n;\n\n        add         rax, r10\n        jmp         Pfx40\n\n;\n; Byte comparisons were not equal.  Restore the rcx loop counter and decrement\n; it.  If it's zero, we have no more strings to compare, so we can do a quick\n; exit.  If there are still comparisons to be made, restore the other registers\n; we trampled then jump back to the start of the loop Pfx20.\n;\n\nPfx60:  vpextrb     rcx, xmm4, 2                ; Restore rcx counter.\n        dec         cx                          ; Decrement counter.\n        jnz         short @F                    ; Jump forward if not zero.\n\n;\n; No more comparisons remaining, return.\n;\n\n        xor         eax, eax                    ; Clear rax.\n        not         al                          ; al = -1\n        ret                                     ; Return.\n\n;\n; More comparisons remain; restore the registers we clobbered and continue loop.\n;\n\n@@:     vpextrb     r10, xmm4, 1                ; Restore r10.\n        vpextrb     r11, xmm4, 0                ; Restore r11.\n        vpextrd     edx, xmm5, 2                ; Restore rdx bitmap.\n        jmp         Pfx20                       ; Continue comparisons.\n\n        ;IACA_VC_END\n\n        LEAF_END   IsPrefixOfStringInTable_x64_5, _TEXT$00\n\n\n\nDid it make a difference? Were we able to shave any time off the negative match fast path? Let’s find out.\n\n\nBenchmark x64 5\n\n\n\nBenchmark-x64-05-v1\n\n\nHurrah! We’ve got a new winner! Our final tweaks yielded a very small but measurable and repeatable improvement in both prefix matching and negative matching! Let’s mark that up as a win."
  },
  {
    "objectID": "articles/is-prefix-of-string-in-table/index.html#implementation-considerations",
    "href": "articles/is-prefix-of-string-in-table/index.html#implementation-considerations",
    "title": "Is Prefix Of String In Table?",
    "section": "Implementation Considerations",
    "text": "Implementation Considerations\nOne issue with writing so many versions of the exact same function is… how do you actually handle this? Downstream consumers of the component don’t need to access the 30 different function pointers for each function you’ve experimented with, but things like unit tests and benchmark programs do.\nHere’s what I did for the StringTable component. Define two API structures, a normal one and an “extended” one. The extended one mirrors the normal one, and then adds all of its additional functions to the end.\nI use a .def file to control the DLL function exports, with an alias to easily control which version of a function is the official version. The main header file then contains some bootstrap glue (in the form of an inline function) that dynamically loads the target library and resolves the number of API methods according to the size of the API structure provided.\nThis currently means that the StringTable2.dll includes all 14 C and 5 assembly variants, which is harmless, but it does increase the size of the module unnecessarily. (The module is currently about 19KB in size, whereas it would be under 4KB if only the official versions were included.) What I’ll probably end up doing is setting up a second project called StringTableEx, and, in conjunction with some #ifdefs, have that be the version of the module that contains all the additional functions, with the normal version just containing the official versions.\nHere’s the bootstrap glue from StringTable.h and the StringTable.def file I currently use. (Note: this routine uses the LoadSymbols() function from the Rtl component.)\n\nBootstrap Header GlueStringTable.def\n\n\n//\n// Define the string table API structure.\n//\n\ntypedef struct _STRING_TABLE_API {\n\n    PSET_C_SPECIFIC_HANDLER SetCSpecificHandler;\n\n    PCOPY_STRING_ARRAY CopyStringArray;\n    PCREATE_STRING_TABLE CreateStringTable;\n    PDESTROY_STRING_TABLE DestroyStringTable;\n\n    PINITIALIZE_STRING_TABLE_ALLOCATOR\n        InitializeStringTableAllocator;\n\n    PINITIALIZE_STRING_TABLE_ALLOCATOR_FROM_RTL_BOOTSTRAP\n        InitializeStringTableAllocatorFromRtlBootstrap;\n\n    PCREATE_STRING_ARRAY_FROM_DELIMITED_STRING\n        CreateStringArrayFromDelimitedString;\n\n    PCREATE_STRING_TABLE_FROM_DELIMITED_STRING\n        CreateStringTableFromDelimitedString;\n\n    PCREATE_STRING_TABLE_FROM_DELIMITED_ENVIRONMENT_VARIABLE\n        CreateStringTableFromDelimitedEnvironmentVariable;\n\n    PIS_STRING_IN_TABLE IsStringInTable;\n    PIS_PREFIX_OF_STRING_IN_TABLE IsPrefixOfStringInTable;\n\n} STRING_TABLE_API;\ntypedef STRING_TABLE_API *PSTRING_TABLE_API;\n\ntypedef struct _STRING_TABLE_API_EX {\n\n    //\n    // Inline STRING_TABLE_API.\n    //\n\n    PSET_C_SPECIFIC_HANDLER SetCSpecificHandler;\n\n    PCOPY_STRING_ARRAY CopyStringArray;\n    PCREATE_STRING_TABLE CreateStringTable;\n    PDESTROY_STRING_TABLE DestroyStringTable;\n\n    PINITIALIZE_STRING_TABLE_ALLOCATOR\n        InitializeStringTableAllocator;\n\n    PINITIALIZE_STRING_TABLE_ALLOCATOR_FROM_RTL_BOOTSTRAP\n        InitializeStringTableAllocatorFromRtlBootstrap;\n\n    PCREATE_STRING_ARRAY_FROM_DELIMITED_STRING\n        CreateStringArrayFromDelimitedString;\n\n    PCREATE_STRING_TABLE_FROM_DELIMITED_STRING\n        CreateStringTableFromDelimitedString;\n\n    PCREATE_STRING_TABLE_FROM_DELIMITED_ENVIRONMENT_VARIABLE\n        CreateStringTableFromDelimitedEnvironmentVariable;\n\n    PIS_STRING_IN_TABLE IsStringInTable;\n    PIS_PREFIX_OF_STRING_IN_TABLE IsPrefixOfStringInTable;\n\n    //\n    // Extended API methods used for benchmarking.\n    //\n\n    PIS_PREFIX_OF_CSTR_IN_ARRAY IsPrefixOfCStrInArray;\n    PIS_PREFIX_OF_STRING_IN_TABLE IsPrefixOfStringInTable_1;\n    PIS_PREFIX_OF_STRING_IN_TABLE IsPrefixOfStringInTable_2;\n    PIS_PREFIX_OF_STRING_IN_TABLE IsPrefixOfStringInTable_3;\n    PIS_PREFIX_OF_STRING_IN_TABLE IsPrefixOfStringInTable_4;\n    PIS_PREFIX_OF_STRING_IN_TABLE IsPrefixOfStringInTable_5;\n    PIS_PREFIX_OF_STRING_IN_TABLE IsPrefixOfStringInTable_6;\n    PIS_PREFIX_OF_STRING_IN_TABLE IsPrefixOfStringInTable_7;\n    PIS_PREFIX_OF_STRING_IN_TABLE IsPrefixOfStringInTable_8;\n    PIS_PREFIX_OF_STRING_IN_TABLE IsPrefixOfStringInTable_9;\n    PIS_PREFIX_OF_STRING_IN_TABLE IsPrefixOfStringInTable_10;\n    PIS_PREFIX_OF_STRING_IN_TABLE IsPrefixOfStringInTable_11;\n    PIS_PREFIX_OF_STRING_IN_TABLE IsPrefixOfStringInTable_12;\n    PIS_PREFIX_OF_STRING_IN_TABLE IsPrefixOfStringInTable_13;\n    PIS_PREFIX_OF_STRING_IN_TABLE IsPrefixOfStringInTable_14;\n    PIS_PREFIX_OF_STRING_IN_TABLE IsPrefixOfStringInTable_x64_1;\n    PIS_PREFIX_OF_STRING_IN_TABLE IsPrefixOfStringInTable_x64_2;\n    PIS_PREFIX_OF_STRING_IN_TABLE IsPrefixOfStringInTable_x64_3;\n    PIS_PREFIX_OF_STRING_IN_TABLE IsPrefixOfStringInTable_x64_4;\n    PIS_PREFIX_OF_STRING_IN_TABLE IsPrefixOfStringInTable_x64_5;\n    PIS_PREFIX_OF_STRING_IN_TABLE IntegerDivision_x64_1;\n\n} STRING_TABLE_API_EX;\ntypedef STRING_TABLE_API_EX *PSTRING_TABLE_API_EX;\n\ntypedef union _STRING_TABLE_ANY_API {\n    STRING_TABLE_API Api;\n    STRING_TABLE_API_EX ApiEx;\n} STRING_TABLE_ANY_API;\ntypedef STRING_TABLE_ANY_API *PSTRING_TABLE_ANY_API;\n\nFORCEINLINE\nBOOLEAN\nLoadStringTableApi(\n    _In_ PRTL Rtl,\n    _Inout_ HMODULE *ModulePointer,\n    _In_opt_ PUNICODE_STRING ModulePath,\n    _In_ ULONG SizeOfAnyApi,\n    _Out_writes_bytes_all_(SizeOfAnyApi) PSTRING_TABLE_ANY_API AnyApi\n    )\n/*++\n\nRoutine Description:\n\n    Loads the string table module and resolves all API functions for either\n    the STRING_TABLE_API or STRING_TABLE_API_EX structure.  The desired API\n    is indicated by the SizeOfAnyApi parameter.\n\n    Example use:\n\n        STRING_TABLE_API_EX GlobalApi;\n        PSTRING_TABLE_API_EX Api;\n\n        Success = LoadStringTableApi(Rtl,\n                                     NULL,\n                                     NULL,\n                                     sizeof(GlobalApi),\n                                     (PSTRING_TABLE_ANY_API)&GlobalApi);\n        ASSERT(Success);\n        Api = &GlobalApi;\n\n    In this example, the extended API will be provided as our sizeof(GlobalApi)\n    will indicate the structure size used by STRING_TABLE_API_EX.\n\n    See ../StringTable2BenchmarkExe/main.c for a complete example.\n\nArguments:\n\n    Rtl - Supplies a pointer to an initialized RTL structure.\n\n    ModulePointer - Optionally supplies a pointer to an existing module handle\n        for which the API symbols are to be resolved.  May be NULL.  If not\n        NULL, but the pointed-to value is NULL, then this parameter will\n        receive the handle obtained by LoadLibrary() as part of this call.\n        If the string table module is no longer needed, but the program will\n        keep running, the caller should issue a FreeLibrary() against this\n        module handle.\n\n    ModulePath - Optionally supplies a pointer to a UNICODE_STRING structure\n        representing a path name of the string table module to be loaded.\n        If *ModulePointer is not NULL, it takes precedence over this parameter.\n        If NULL, and no module has been provided via *ModulePointer, an attempt\n        will be made to load the library via 'LoadLibraryA(\"StringTable.dll\")'.\n\n    SizeOfAnyApi - Supplies the size, in bytes, of the underlying structure\n        pointed to by the AnyApi parameter.\n\n    AnyApi - Supplies the address of a structure which will receive resolved\n        API function pointers.  The API furnished will depend on the size\n        indicated by the SizeOfAnyApi parameter.\n\nReturn Value:\n\n    TRUE on success, FALSE on failure.\n\n--*/\n{\n    BOOL Success;\n    HMODULE Module = NULL;\n    ULONG NumberOfSymbols;\n    ULONG NumberOfResolvedSymbols;\n\n    //\n    // Define the API names.\n    //\n    // N.B. These names must match STRING_TABLE_API_EX exactly (including the\n    //      order).\n    //\n\n    const PCSTR Names[] = {\n        \"SetCSpecificHandler\",\n        \"CopyStringArray\",\n        \"CreateStringTable\",\n        \"DestroyStringTable\",\n        \"InitializeStringTableAllocator\",\n        \"InitializeStringTableAllocatorFromRtlBootstrap\",\n        \"CreateStringArrayFromDelimitedString\",\n        \"CreateStringTableFromDelimitedString\",\n        \"CreateStringTableFromDelimitedEnvironmentVariable\",\n        \"IsStringInTable\",\n        \"IsPrefixOfStringInTable\",\n        \"IsPrefixOfCStrInArray\",\n        \"IsPrefixOfStringInTable_1\",\n        \"IsPrefixOfStringInTable_2\",\n        \"IsPrefixOfStringInTable_3\",\n        \"IsPrefixOfStringInTable_4\",\n        \"IsPrefixOfStringInTable_5\",\n        \"IsPrefixOfStringInTable_6\",\n        \"IsPrefixOfStringInTable_7\",\n        \"IsPrefixOfStringInTable_8\",\n        \"IsPrefixOfStringInTable_9\",\n        \"IsPrefixOfStringInTable_10\",\n        \"IsPrefixOfStringInTable_11\",\n        \"IsPrefixOfStringInTable_12\",\n        \"IsPrefixOfStringInTable_13\",\n        \"IsPrefixOfStringInTable_14\",\n        \"IsPrefixOfStringInTable_x64_1\",\n        \"IsPrefixOfStringInTable_x64_2\",\n        \"IsPrefixOfStringInTable_x64_3\",\n        \"IsPrefixOfStringInTable_x64_4\",\n        \"IsPrefixOfStringInTable_x64_5\",\n        \"IntegerDivision_x64_1\",\n    };\n\n    //\n    // Define an appropriately sized bitmap we can passed to Rtl-&gt;LoadSymbols().\n    //\n\n    ULONG BitmapBuffer[(ALIGN_UP(ARRAYSIZE(Names), sizeof(ULONG) &lt;&lt; 3) &gt;&gt; 5)+1];\n    RTL_BITMAP FailedBitmap = { ARRAYSIZE(Names)+1, (PULONG)&BitmapBuffer };\n\n    //\n    // Determine the number of symbols we want to resolve based on the size of\n    // the API indicated by the caller.\n    //\n\n    if (SizeOfAnyApi == sizeof(AnyApi-&gt;Api)) {\n        NumberOfSymbols = sizeof(AnyApi-&gt;Api) / sizeof(ULONG_PTR);\n    } else if (SizeOfAnyApi == sizeof(AnyApi-&gt;ApiEx)) {\n        NumberOfSymbols = sizeof(AnyApi-&gt;ApiEx) / sizeof(ULONG_PTR);\n    } else {\n        return FALSE;\n    }\n\n    //\n    // Attempt to load the underlying string table module if necessary.\n    //\n\n    if (ARGUMENT_PRESENT(ModulePointer)) {\n        Module = *ModulePointer;\n    }\n\n    if (!Module) {\n        if (ARGUMENT_PRESENT(ModulePath)) {\n            Module = LoadLibraryW(ModulePath-&gt;Buffer);\n        } else {\n            Module = LoadLibraryA(\"StringTable2.dll\");\n        }\n    }\n\n    if (!Module) {\n        return FALSE;\n    }\n\n    //\n    // We've got a handle to the string table module.  Load the symbols we want\n    // dynamically via Rtl-&gt;LoadSymbols().\n    //\n\n    Success = Rtl-&gt;LoadSymbols(\n        Names,\n        NumberOfSymbols,\n        (PULONG_PTR)AnyApi,\n        NumberOfSymbols,\n        Module,\n        &FailedBitmap,\n        TRUE,\n        &NumberOfResolvedSymbols\n    );\n\n    ASSERT(Success);\n\n    //\n    // Debug helper: if the breakpoint below is hit, then the symbol names\n    // have potentially become out of sync.  Look at the value of first failed\n    // symbol to assist in determining the cause.\n    //\n\n    if (NumberOfSymbols != NumberOfResolvedSymbols) {\n        PCSTR FirstFailedSymbolName;\n        ULONG FirstFailedSymbol;\n        ULONG NumberOfFailedSymbols;\n\n        NumberOfFailedSymbols = Rtl-&gt;RtlNumberOfSetBits(&FailedBitmap);\n        FirstFailedSymbol = Rtl-&gt;RtlFindSetBits(&FailedBitmap, 1, 0);\n        FirstFailedSymbolName = Names[FirstFailedSymbol-1];\n        __debugbreak();\n    }\n\n    //\n    // Set the C specific handler for the module, such that structured\n    // exception handling will work.\n    //\n\n    AnyApi-&gt;Api.SetCSpecificHandler(Rtl-&gt;__C_specific_handler);\n\n    //\n    // Update the caller's pointer and return success.\n    //\n\n    if (ARGUMENT_PRESENT(ModulePointer)) {\n        *ModulePointer = Module;\n    }\n\n    return TRUE;\n}\n\n\nLIBRARY StringTable2\nEXPORTS\n    SetCSpecificHandler\n    CopyStringArray\n    CreateStringTable\n    DestroyStringTable\n    InitializeStringTableAllocator\n    InitializeStringTableAllocatorFromRtlBootstrap\n    CreateStringArrayFromDelimitedString\n    CreateStringTableFromDelimitedString\n    CreateStringTableFromDelimitedEnvironmentVariable\n    TestIsPrefixOfStringInTableFunctions\n    IsStringInTable\n    IsPrefixOfStringInTable_1\n    IsPrefixOfStringInTable_2\n    IsPrefixOfStringInTable_3\n    IsPrefixOfStringInTable_4\n    IsPrefixOfStringInTable_5\n    IsPrefixOfStringInTable_6\n    IsPrefixOfStringInTable_7\n    IsPrefixOfStringInTable_8\n    IsPrefixOfStringInTable_9\n    IsPrefixOfStringInTable_10\n    IsPrefixOfStringInTable_11\n    IsPrefixOfStringInTable_12\n    IsPrefixOfStringInTable_13\n    IsPrefixOfStringInTable_14\n    IsPrefixOfStringInTable_x64_1\n    IsPrefixOfStringInTable_x64_2\n    IsPrefixOfStringInTable_x64_3\n    IsPrefixOfStringInTable_x64_4\n    IsPrefixOfStringInTable_x64_5\n    IsPrefixOfCStrInArray\n    IntegerDivision_x64_1\n    IsPrefixOfStringInTable=IsPrefixOfStringInTable_13"
  },
  {
    "objectID": "articles/is-prefix-of-string-in-table/index.html#release-build-versus-profile-guided-optimization-build",
    "href": "articles/is-prefix-of-string-in-table/index.html#release-build-versus-profile-guided-optimization-build",
    "title": "Is Prefix Of String In Table?",
    "section": "Release Build versus Profile Guided Optimization Build",
    "text": "Release Build versus Profile Guided Optimization Build\nIt’s interesting to see a side-by-side comparison of the optimized release build next to the PGO build. The main changes are mostly all to do with branching and jump direction. The following diagram was generated via IDA Pro 6.95.\n\n\n\nIsPrefixOfStringInTable_13-Release-vs-PGO.png"
  },
  {
    "objectID": "articles/is-prefix-of-string-in-table/index.html#typedefs",
    "href": "articles/is-prefix-of-string-in-table/index.html#typedefs",
    "title": "Is Prefix Of String In Table?",
    "section": "Typedefs",
    "text": "Typedefs\nIf there’s one thing you can’t argue about with the Pascal-style Cutler Normal Form, is that it loves a good typedef. For the sake of completeness, here’s a list of all the explicit or implied typedefs featured in the code on this page.\n//\n// Standard NT/Windows typedefs (typically living in minwindef.h).\n//\n\ntypedef void *PVOID;\ntypedef char CHAR;\ntypedef short SHORT;\ntypedef long LONG;\ntypedef unsigned long ULONG;\ntypedef ULONG *PULONG;\ntypedef unsigned short USHORT;\ntypedef USHORT *PUSHORT;\ntypedef unsigned char UCHAR;\ntypedef UCHAR *PUCHAR;\ntypedef _Null_terminated_ char *PSZ;\ntypedef const _Null_terminated_ char *PCSZ;\n\ntypedef int BOOL;\ntypedef unsigned char BYTE;\ntypedef unsigned short WORD;\n\ntypedef BYTE BOOLEAN;\ntypedef BOOLEAN *PBOOLEAN;\n\n//\n// The STRING structure used by the NT kernel.  Our STRING_ARRAY structure\n// relies on an array of these structures.  We never pass raw 'char *'s\n// around, only STRING/PSTRING structs/pointers.\n//\n\ntypedef struct _STRING {\n    USHORT Length;\n    USHORT MaximumLength;\n    ULONG  Padding;\n    PCHAR Buffer;\n} STRING, *PSTRING;\ntypedef const STRING *PCSTRING;\n\n//\n// Our SIMD register typedefs.\n//\n\ntypedef __m128i DECLSPEC_ALIGN(16) XMMWORD, *PXMMWORD, **PPXMMWORD;\ntypedef __m256i DECLSPEC_ALIGN(32) YMMWORD, *PYMMWORD, **PPYMMWORD;\ntypedef __m512i DECLSPEC_ALIGN(64) ZMMWORD, *PZMMWORD, **PPZMMWORD;"
  },
  {
    "objectID": "articles/is-prefix-of-string-in-table/index.html#quarto-markdown",
    "href": "articles/is-prefix-of-string-in-table/index.html#quarto-markdown",
    "title": "Is Prefix Of String In Table?",
    "section": "Quarto & Markdown",
    "text": "Quarto & Markdown\nThe syntax highlighting for C and assembly is provided by c.xml and asm.xml respectively.\nThese files were copied from the KDE syntax-highlighting repository and then modified to add support for things like SIMD intrinsics, SAL annotations, NT types and definitions, custom types and definitions used in the article, etc.\nFor the syntax color scheme, I copied the dracula.theme from the Quarto repository into tpn.theme and then just hacked on it until I was mostly content with the results."
  },
  {
    "objectID": "articles/is-prefix-of-string-in-table/index.html#data-visualization",
    "href": "articles/is-prefix-of-string-in-table/index.html#data-visualization",
    "title": "Is Prefix Of String In Table?",
    "section": "Data Visualization",
    "text": "Data Visualization\n\nAlgorithm Diagrams\nThe algorithm diagrams at the start of the article were created using my trusty ol’ copy of Visio 2019. The diagrams were saved as SVG. I had to inject a &lt;rect width=\"100%\" height=\"100%\" fill=\"#ffffff\" /&gt; into the start of each SVG file when porting to Quarto/Markdown in order to support dark mode. This set a white background for the diagram, which was otherwise transparent and did not render correctly in dark mode.\n\n\nBenchmarks\nAll of the resources used to generate this article, including raw .csv data, supporting .svgs, etc., live in the resources directory.\nThe charts were created in Excel. Each .csv data file was added as a new data source and imported, and then a PivotTable was created to generate the desired bar graph. This was then saved as PDF, which I then edited with Inkscape, deleting the surrounding border, cropping the canvas to fit the diagram, and then saving as SVG.\nAfter saving as SVG, I then edited each chart in Vim and manually did some font corrections. Looking at my .vimrc file, I believe this was what I used:\n\"\n\" SVG helpers.\n\"\n\nmap &lt;leader&gt;v\n    \\ &lt;ESC&gt;:% s/GillSans;/Calibri,GillSans-Light;/ge&lt;CR&gt;\n    \\ &lt;ESC&gt;:% s/Monaco/Monaco,Consolas,Menlo,monospace/ge&lt;CR&gt;\nI can’t remember if I did any other modifications whilst in Vim (I’m writing this colophon in 2024, but the SVG hacking was done over six years ago)."
  },
  {
    "objectID": "articles/index.html",
    "href": "articles/index.html",
    "title": "Articles",
    "section": "",
    "text": "DRAFT: From PyParallel to Python Free-Threading\n\n\nOptimally Exploiting Multiple Cores with Python\n\n\n\nPython\n\n\nPyParallel\n\n\nFree-threading\n\n\nNo-GIL\n\n\nPyTorch\n\n\nasyncio\n\n\n\nThis article takes a look at the new no-GIL, free-threading functionality introduced in Python 3.13, as well as how it compares and performs against PyParallel’s attempt at explointing multiple CPU cores over ten years ago. Using a demo project named Parallelopedia, we demonstrate the benefits afforded by the new functionality, whereby large data structures (tens to hundreds of gigabytes) are loaded in main memory and then accessed in parallel from Python—a feat not previously possible with the contemporary multiprocessing approach. Additionally, we investigate multi-threaded, parallel inference (generation) of transformer-based Deep Neural Networks via PyTorch, and explorer the limits of what can and can’t currently be done, as well as a roadmap for future PyTorch support. \n\n\n\n\n\nTrent Nelson\n\n\n\n\n\n\n\n\n\n\n\n\nIs Prefix Of String In Table?\n\n\nA Journey Into SIMD String Processing\n\n\n\nAVX2\n\n\nSIMD\n\n\nC\n\n\nAssembly\n\n\nMASM\n\n\n\nThis article details an approach for efficiently determining if a given string prefix-matches a set of known strings. That is, do any of the known strings represent the prefix of a given string? A custom data structure is employed with successive implementations benchmarked to find the fastest possible solution. \n\n\n\n\n\nMay 4, 2018\n\n\nTrent Nelson\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Trent Nelson’s Blog",
    "section": "",
    "text": "DRAFT: PyTorch and Python Free-Threading\n\n\n\n\n\n\nPyTorch\n\n\nPython\n\n\nFree-Threading\n\n\nNo-GIL\n\n\nLLM\n\n\nGPT2\n\n\n\nThis blog post explores multi-threaded PyTorch parallel inference via an asyncio-based HTTP server and the new No-GIL free-threaded Python, using a (predominantly-AI-written) simple React Bootstrap web interface. We capture what is currently possible, what type of issues are typically encountered, and what the roadmap may look like for the future. \n\n\n\n\n\nTrent Nelson\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Trent Nelson",
    "section": "",
    "text": "Systems Software Engineer and Private Pilot (tailwheel, complex, high-performance, aerobatics).\nE-mail: trent@trent.me.\n\nArticles | Projects & Repositories | Tools"
  },
  {
    "objectID": "syntax-highlighter-test.html",
    "href": "syntax-highlighter-test.html",
    "title": "Test Syntax Highlighting",
    "section": "",
    "text": "Assembly Slim (fasm)Assembly Slim (asm)Assembly Full (asm)Assembly Full (fasm)CDiff AsmIACA\n\n\nmov      rax,  String.Buffer[rdx]                   ; Load address of string buffer.\nvpbroadcastb xmm4, byte ptr String.Length[rdx]      ; Broadcast string length.\nvmovdqa  xmm3, xmmword ptr StringTable.Lengths[rcx] ; Load table lengths.\nvmovdqu  xmm0, xmmword ptr [rax]                    ; Load string buffer.\nvpcmpgtb xmm1, xmm3, xmm4                           ; Identify slots &gt; string len.\nvpshufb  xmm5, xmm0, StringTable.UniqueIndex[rcx]   ; Rearrange string by unique index.\nvpcmpeqb xmm5, xmm5, StringTable.UniqueChars[rcx]   ; Compare rearranged to unique.\nvptest   xmm1, xmm5                                 ; Unique slots AND (!long slots).\njnc      short Pfx10                                ; CY=0, continue with routine.\nxor      eax, eax                                   ; CY=1, no match.\nnot      al                                         ; al = -1 (NO_MATCH_FOUND).\nret                                                 ; Return NO_MATCH_FOUND.\n\n\nmov      rax,  String.Buffer[rdx]                   ; Load address of string buffer.\nvpbroadcastb xmm4, byte ptr String.Length[rdx]      ; Broadcast string length.\nvmovdqa  xmm3, xmmword ptr StringTable.Lengths[rcx] ; Load table lengths.\nvmovdqu  xmm0, xmmword ptr [rax]                    ; Load string buffer.\nvpcmpgtb xmm1, xmm3, xmm4                           ; Identify slots &gt; string len.\nvpshufb  xmm5, xmm0, StringTable.UniqueIndex[rcx]   ; Rearrange string by unique index.\nvpcmpeqb xmm5, xmm5, StringTable.UniqueChars[rcx]   ; Compare rearranged to unique.\nvptest   xmm1, xmm5                                 ; Unique slots AND (!long slots).\njnc      short Pfx10                                ; CY=0, continue with routine.\nxor      eax, eax                                   ; CY=1, no match.\nnot      al                                         ; al = -1 (NO_MATCH_FOUND).\nret                                                 ; Return NO_MATCH_FOUND.\n\n\n;++\n;\n; STRING_TABLE_INDEX\n; IsPrefixOfStringInTable_x64_*(\n;     _In_ PSTRING_TABLE StringTable,\n;     _In_ PSTRING String,\n;     _Out_opt_ PSTRING_MATCH Match\n;     )\n;\n; Routine Description:\n;\n;   Searches a string table to see if any strings \"prefix match\" the given\n;   search string.  That is, whether any string in the table \"starts with\n;   or is equal to\" the search string.\n;\n; Arguments:\n;\n;   StringTable - Supplies a pointer to a STRING_TABLE struct.\n;\n;   String - Supplies a pointer to a STRING struct that contains the string to\n;       search for.\n;\n;   Match - Optionally supplies a pointer to a variable that contains the\n;       address of a STRING_MATCH structure.  This will be populated with\n;       additional details about the match if a non-NULL pointer is supplied.\n;\n; Return Value:\n;\n;   Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n;\n;--\n\n        LEAF_ENTRY IsPrefixOfStringInTable_x64_1, _TEXT$00\n\n        ;IACA_VC_START\n\n;\n; Load the string buffer into xmm0, and the unique indexes from the string table\n; into xmm1.  Shuffle the buffer according to the unique indexes, and store the\n; result back into xmm0.\n;\n\n        mov     rax, String.Buffer[rdx]\n        vmovdqu xmm0, xmmword ptr [rax]                 ; Load search buffer.\n        vmovdqa xmm1, xmmword ptr StringTable.UniqueIndex[rcx] ; Load indexes.\n        vpshufb xmm0, xmm0, xmm1\n\n;\n; Load the string table's unique character array into xmm2, and the lengths for\n; each string slot into xmm3.\n;\n\n        vmovdqa xmm2, xmmword ptr StringTable.UniqueChars[rcx]  ; Load chars.\n        vmovdqa xmm3, xmmword ptr StringTable.Lengths[rcx]      ; Load lengths.\n\n;\n; Set xmm5 to all ones.  This is used later.\n;\n\n        vpcmpeqq    xmm5, xmm5, xmm5                    ; Set xmm5 to all ones.\n\n;\n; Broadcast the byte-sized string length into xmm4.\n;\n\n        vpbroadcastb xmm4, byte ptr String.Length[rdx]  ; Broadcast length.\n\n;\n; Compare the search string's unique character array (xmm0) against the string\n; table's unique chars (xmm2), saving the result back into xmm0.\n;\n\n        vpcmpeqb    xmm0, xmm0, xmm2            ; Compare unique chars.\n\n;\n; Compare the search string's length, which we've broadcasted to all 8-byte\n; elements of the xmm4 register, to the lengths of the slots in the string\n; table, to find those that are greater in length.  Invert the result, such\n; that we're left with a masked register where each 0xff element indicates\n; a slot with a length less than or equal to our search string's length.\n;\n\n        vpcmpgtb    xmm1, xmm4, xmm3            ; Identify long slots.\n        vpxor       xmm1, xmm1, xmm5            ; Invert the result.\n\n;\n; Intersect-via-test xmm0 and xmm1 to identify string slots of a suitable\n; length with a matching unique character.\n;\n\n        vptest      xmm0, xmm1                  ; Check for no match.\n        ;jnz        short @F                    ; There was a match.\n                                                ; (Not yet implemented.)\n\n;\n; No match, set rax to -1 and return.\n;\n\n        xor         eax, eax                    ;\n        not         al                          ; rax = -1\n        ret\n\n        ;IACA_VC_END\n        LEAF_END   IsPrefixOfStringInTable_x64_1, _TEXT$00\n\n; vim:set tw=80 ts=8 sw=4 sts=4 et syntax=masm fo=croql comments=\\:;           :\n\n\n;++\n;\n; STRING_TABLE_INDEX\n; IsPrefixOfStringInTable_x64_*(\n;     _In_ PSTRING_TABLE StringTable,\n;     _In_ PSTRING String,\n;     _Out_opt_ PSTRING_MATCH Match\n;     )\n;\n; Routine Description:\n;\n;   Searches a string table to see if any strings \"prefix match\" the given\n;   search string.  That is, whether any string in the table \"starts with\n;   or is equal to\" the search string.\n;\n; Arguments:\n;\n;   StringTable - Supplies a pointer to a STRING_TABLE struct.\n;\n;   String - Supplies a pointer to a STRING struct that contains the string to\n;       search for.\n;\n;   Match - Optionally supplies a pointer to a variable that contains the\n;       address of a STRING_MATCH structure.  This will be populated with\n;       additional details about the match if a non-NULL pointer is supplied.\n;\n; Return Value:\n;\n;   Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n;\n;--\n\n        LEAF_ENTRY IsPrefixOfStringInTable_x64_1, _TEXT$00\n\n        ;IACA_VC_START\n\n;\n; Load the string buffer into xmm0, and the unique indexes from the string table\n; into xmm1.  Shuffle the buffer according to the unique indexes, and store the\n; result back into xmm0.\n;\n\n        mov     rax, String.Buffer[rdx]\n        vmovdqu xmm0, xmmword ptr [rax]                 ; Load search buffer.\n        vmovdqa xmm1, xmmword ptr StringTable.UniqueIndex[rcx] ; Load indexes.\n        vpshufb xmm0, xmm0, xmm1\n\n;\n; Load the string table's unique character array into xmm2, and the lengths for\n; each string slot into xmm3.\n;\n\n        vmovdqa xmm2, xmmword ptr StringTable.UniqueChars[rcx]  ; Load chars.\n        vmovdqa xmm3, xmmword ptr StringTable.Lengths[rcx]      ; Load lengths.\n\n;\n; Set xmm5 to all ones.  This is used later.\n;\n\n        vpcmpeqq    xmm5, xmm5, xmm5                    ; Set xmm5 to all ones.\n\n;\n; Broadcast the byte-sized string length into xmm4.\n;\n\n        vpbroadcastb xmm4, byte ptr String.Length[rdx]  ; Broadcast length.\n\n;\n; Compare the search string's unique character array (xmm0) against the string\n; table's unique chars (xmm2), saving the result back into xmm0.\n;\n\n        vpcmpeqb    xmm0, xmm0, xmm2            ; Compare unique chars.\n\n;\n; Compare the search string's length, which we've broadcasted to all 8-byte\n; elements of the xmm4 register, to the lengths of the slots in the string\n; table, to find those that are greater in length.  Invert the result, such\n; that we're left with a masked register where each 0xff element indicates\n; a slot with a length less than or equal to our search string's length.\n;\n\n        vpcmpgtb    xmm1, xmm4, xmm3            ; Identify long slots.\n        vpxor       xmm1, xmm1, xmm5            ; Invert the result.\n\n;\n; Intersect-via-test xmm0 and xmm1 to identify string slots of a suitable\n; length with a matching unique character.\n;\n\n        vptest      xmm0, xmm1                  ; Check for no match.\n        ;jnz        short @F                    ; There was a match.\n                                                ; (Not yet implemented.)\n\n;\n; No match, set rax to -1 and return.\n;\n\n        xor         eax, eax                    ;\n        not         al                          ; rax = -1\n        ret\n\n        ;IACA_VC_END\n\n        LEAF_END   IsPrefixOfStringInTable_x64_1, _TEXT$00\n\n; vim:set tw=80 ts=8 sw=4 sts=4 et syntax=masm fo=croql comments=\\:;           :\n\n\n_Use_decl_annotations_\nSTRING_TABLE_INDEX\nIsPrefixOfStringInTable_11(\n    PSTRING_TABLE StringTable,\n    PSTRING String,\n    PSTRING_MATCH Match\n    )\n/*++\n\nRoutine Description:\n\n    Searches a string table to see if any strings \"prefix match\" the given\n    search string.  That is, whether any string in the table \"starts with\n    or is equal to\" the search string.\n\n    This version is based off version 10, but with the vpandn used at the\n    end of the initial test, as suggested by Wojciech Mula (@pshufb).\n\nArguments:\n\n    StringTable - Supplies a pointer to a STRING_TABLE struct.\n\n    String - Supplies a pointer to a STRING struct that contains the string to\n        search for.\n\n    Match - Optionally supplies a pointer to a variable that contains the\n        address of a STRING_MATCH structure.  This will be populated with\n        additional details about the match if a non-NULL pointer is supplied.\n\nReturn Value:\n\n    Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n\n--*/\n{\n    ULONG Bitmap;\n    ULONG Mask;\n    ULONG Count;\n    ULONG Length;\n    ULONG Index;\n    ULONG Shift = 0;\n    ULONG CharactersMatched;\n    ULONG NumberOfTrailingZeros;\n    ULONG SearchLength;\n    PSTRING TargetString;\n    STRING_SLOT Slot;\n    STRING_SLOT Search;\n    STRING_SLOT Compare;\n    SLOT_LENGTHS Lengths;\n    XMMWORD LengthXmm;\n    XMMWORD UniqueChar;\n    XMMWORD TableUniqueChars;\n    XMMWORD IncludeSlotsByUniqueChar;\n    XMMWORD IgnoreSlotsByLength;\n    XMMWORD IncludeSlots;\n\n    //\n    // Unconditionally do the following five operations before checking any of\n    // the results and determining how the search should proceed:\n    //\n    //  1. Load the search string into an Xmm register, and broadcast the\n    //     character indicated by the unique character index (relative to\n    //     other strings in the table) across a second Xmm register.\n    //\n    //  2. Load the string table's unique character array into an Xmm register.\n    //\n    //  3. Broadcast the search string's length into an XMM register.\n    //\n    //  3. Load the string table's slot lengths array into an XMM register.\n    //\n    //  4. Compare the unique character from step 1 to the string table's unique\n    //     character array set up in step 2.  The result of this comparison\n    //     will produce an XMM register with each byte set to either 0xff if\n    //     the unique character was found, or 0x0 if it wasn't.\n    //\n    //  5. Compare the search string's length from step 3 to the string table's\n    //     slot length array set up in step 3.  This allows us to identify the\n    //     slots that have strings that are of lesser or equal length to our\n    //     search string.  As we're doing a prefix search, we can ignore any\n    //     slots longer than our incoming search string.\n    //\n    // We do all five of these operations up front regardless of whether or not\n    // they're strictly necessary.  That is, if the unique character isn't in\n    // the unique character array, we don't need to load array lengths -- and\n    // vice versa.  However, we assume the benefits afforded by giving the CPU\n    // a bunch of independent things to do unconditionally up-front outweigh\n    // the cost of putting in branches and conditionally loading things if\n    // necessary.\n    //\n\n    //\n    // Load the first 16-bytes of the search string into an XMM register.\n    //\n\n    Search.CharsXmm = _mm_loadu_si128((PXMMWORD)String-&gt;Buffer);\n\n    //\n    // Broadcast the search string's unique characters according to the string\n    // table's unique character index.\n    //\n\n    UniqueChar = _mm_shuffle_epi8(Search.CharsXmm,\n                                  StringTable-&gt;UniqueIndex.IndexXmm);\n\n    //\n    // Load the slot length array into an XMM register.\n    //\n\n    Lengths.SlotsXmm = _mm_load_si128(&StringTable-&gt;Lengths.SlotsXmm);\n\n    //\n    // Load the string table's unique character array into an XMM register.\n    //\n\n    TableUniqueChars = _mm_load_si128(&StringTable-&gt;UniqueChars.CharsXmm);\n\n    //\n    // Broadcast the search string's length into an XMM register.\n    //\n\n    LengthXmm.m128i_u8[0] = (BYTE)String-&gt;Length;\n    LengthXmm = _mm_broadcastb_epi8(LengthXmm);\n\n    //\n    // Compare the search string's unique character with all of the unique\n    // characters of strings in the table, saving the results into an XMM\n    // register.  This comparison will indicate which slots we can ignore\n    // because the characters at a given index don't match.  Matched slots\n    // will be 0xff, unmatched slots will be 0x0.\n    //\n\n    IncludeSlotsByUniqueChar = _mm_cmpeq_epi8(UniqueChar, TableUniqueChars);\n\n    //\n    // Find all slots that are longer than the incoming string length, as these\n    // are the ones we're going to exclude from any prefix match.\n    //\n    // N.B. Because we default the length of empty slots to 0x7f, they will\n    //      handily be included in the ignored set (i.e. their words will also\n    //      be set to 0xff), which means they'll also get filtered out when\n    //      we do the \"and not\" intersection with the include slots next.\n    //\n\n    IgnoreSlotsByLength = _mm_cmpgt_epi8(Lengths.SlotsXmm, LengthXmm);\n\n    //\n    // We're now ready to intersect the two XMM registers to determine which\n    // slots should still be included in the comparison (i.e. which slots have\n    // the exact same unique character as the string and a length less than or\n    // equal to the length of the search string).\n    //\n    // As the IgnoreSlotsByLength XMM register is the inverse of what we want\n    // at the moment (we want 0xff for slots to include, and 0x00 for slots\n    // to ignore; it's currently the other way around), we use _mm_andnot_si128\n    // instead of just _mm_and_si128.\n    //\n\n    IncludeSlots = _mm_andnot_si128(IgnoreSlotsByLength,\n                                    IncludeSlotsByUniqueChar);\n\n    //\n    // Generate a mask.\n    //\n\n    Bitmap = _mm_movemask_epi8(IncludeSlots);\n\n    if (!Bitmap) {\n\n        //\n        // No bits were set, so there are no strings in this table starting\n        // with the same character and of a lesser or equal length as the\n        // search string.\n        //\n\n        return NO_MATCH_FOUND;\n    }\n\n    //\n    // Calculate the \"search length\" of the incoming string, which ensures we\n    // only compare up to the first 16 characters.\n    //\n\n    SearchLength = min(String-&gt;Length, 16);\n\n    //\n    // A popcount against the mask will tell us how many slots we matched, and\n    // thus, need to compare.\n    //\n\n    Count = __popcnt(Bitmap);\n\n    do {\n\n        //\n        // Extract the next index by counting the number of trailing zeros left\n        // in the bitmap and adding the amount we've already shifted by.\n        //\n\n        NumberOfTrailingZeros = _tzcnt_u32(Bitmap);\n        Index = NumberOfTrailingZeros + Shift;\n\n        //\n        // Shift the bitmap right, past the zeros and the 1 that was just found,\n        // such that it's positioned correctly for the next loop's tzcnt. Update\n        // the shift count accordingly.\n        //\n\n        Bitmap &gt;&gt;= (NumberOfTrailingZeros + 1);\n        Shift = Index + 1;\n\n        //\n        // Load the slot and its length.\n        //\n\n        Slot.CharsXmm = _mm_load_si128(&StringTable-&gt;Slots[Index].CharsXmm);\n        Length = Lengths.Slots[Index];\n\n        //\n        // Compare the slot to the search string.\n        //\n\n        Compare.CharsXmm = _mm_cmpeq_epi8(Slot.CharsXmm, Search.CharsXmm);\n\n        //\n        // Create a mask of the comparison, then filter out high bits from the\n        // search string's length (which is capped at 16).  (This shouldn't be\n        // technically necessary as the string array buffers should have been\n        // calloc'd and zeroed, but optimizing compilers can often ignore the\n        // zeroing request -- which can produce some bizarre results where the\n        // debug build is correct (because the buffers were zeroed) but the\n        // release build fails because the zeroing got ignored and there are\n        // junk bytes past the NULL terminator, which get picked up in our\n        // 128-bit loads.)\n        //\n\n        Mask = _bzhi_u32(_mm_movemask_epi8(Compare.CharsXmm), SearchLength);\n\n        //\n        // Count how many characters matched.\n        //\n\n        CharactersMatched = __popcnt(Mask);\n\n        if ((USHORT)CharactersMatched &lt; Length && Length &lt;= 16) {\n\n            //\n            // The slot length is longer than the number of characters matched\n            // from the search string; this isn't a prefix match.  Continue.\n            //\n\n            continue;\n        }\n\n        if (Length &gt; 16) {\n\n            //\n            // The first 16 characters in the string matched against this\n            // slot, and the slot is oversized (longer than 16 characters),\n            // so do a direct comparison between the remaining buffers.\n            //\n\n            TargetString = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n            CharactersMatched = IsPrefixMatch(String, TargetString, 16);\n\n            if (CharactersMatched == NO_MATCH_FOUND) {\n\n                //\n                // The prefix match failed, continue our search.\n                //\n\n                continue;\n            }\n        }\n\n        //\n        // This slot is a prefix match.  Fill out the Match structure if the\n        // caller provided a non-NULL pointer, then return the index of the\n        // match.\n        //\n\n        if (ARGUMENT_PRESENT(Match)) {\n\n            Match-&gt;Index = (BYTE)Index;\n            Match-&gt;NumberOfMatchedCharacters = (BYTE)CharactersMatched;\n            Match-&gt;String = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n        }\n\n        return (STRING_TABLE_INDEX)Index;\n\n    } while (--Count);\n\n    //\n    // If we get here, we didn't find a match.\n    //\n\n    //IACA_VC_END();\n\n    return NO_MATCH_FOUND;\n}\n\n\n% diff -u IsPrefixOfStringInTable_x64_2.asm IsPrefixOfStringInTable_x64_4.asm\n--- IsPrefixOfStringInTable_x64_2.asm   2018-04-26 14:15:53.805409700 -0400\n+++ IsPrefixOfStringInTable_x64_4.asm   2018-04-26 14:16:37.909717200 -0400\n@@ -33,6 +33,10 @@\n ;   search string.  That is, whether any string in the table \"starts with\n ;   or is equal to\" the search string.\n ;\n+;   This routine is based off version 2, but leverages the fact that\n+;   vptest sets the carry flag if '(xmm0 and (not xmm1))' evaluates\n+;   to all 0s, avoiding the the need to do the pxor or pandn steps.\n+;\n ; Arguments:\n ;\n ;   StringTable - Supplies a pointer to a STRING_TABLE struct.\n@@ -50,7 +54,7 @@\n ;\n ;--\n\n-        LEAF_ENTRY IsPrefixOfStringInTable_x64_2, _TEXT$00\n+        LEAF_ENTRY IsPrefixOfStringInTable_x64_4, _TEXT$00\n\n ;\n ; Load the string buffer into xmm0, and the unique indexes from the string table\n@@ -83,12 +87,6 @@\n         vmovdqa xmm3, xmmword ptr StringTable.Lengths[rcx]      ; Load lengths.\n\n ;\n-; Set xmm2 to all ones.  We use this later to invert the length comparison.\n-;\n-\n-        vpcmpeqq    xmm2, xmm2, xmm2            ; Set xmm2 to all ones.\n-\n-;\n ; Broadcast the byte-sized string length into xmm4.\n ;\n\n@@ -103,16 +101,16 @@\n ;\n\n         vpcmpgtb    xmm1, xmm3, xmm4            ; Identify long slots.\n-        vpxor       xmm1, xmm1, xmm2            ; Invert the result.\n\n ;\n ; Intersect-and-test the unique character match xmm mask register (xmm5) with\n-; the length match mask xmm register (xmm1).  This affects flags, allowing us\n-; to do a fast-path exit for the no-match case (where ZF = 1).\n+; the inverted length match mask xmm register (xmm1).  This will set the carry\n+; flag (CY = 1) if the result of 'xmm5 and (not xmm1)' is all 0s, which allows\n+; us to do a fast-path exit for the no-match case.\n ;\n\n-        vptest      xmm5, xmm1                  ; Check for no match.\n-        jnz         short Pfx10                 ; There was a match.\n+        vptest      xmm1, xmm5                  ; Check for no match.\n+        jnc         short Pfx10                 ; There was a match.\n\n ;\n ; No match, set rax to -1 and return.\n@@ -159,12 +157,12 @@\n         vpinsrq     xmm2, xmm2, rdx, 1          ; Save rdx into xmm2q[1].\n\n ;\n-; Intersect xmm5 and xmm1 (as we did earlier with the 'vptest xmm5, xmm1'),\n+; Intersect xmm5 and xmm1 (as we did earlier with the 'vptest xmm1, xmm5'),\n ; yielding a mask identifying indices we need to perform subsequent matches\n ; upon.  Convert this into a bitmap and save in xmm2d[2].\n ;\n\n-        vpand       xmm5, xmm5, xmm1            ; Intersect unique + lengths.\n+        vpandn      xmm5, xmm1, xmm5            ; Intersect unique + lengths.\n         vpmovmskb   edx, xmm5                   ; Generate a bitmap from mask.\n\n ;\n@@ -473,7 +471,7 @@\n\n         ;IACA_VC_END\n\n-        LEAF_END   IsPrefixOfStringInTable_x64_2, _TEXT$00\n+        LEAF_END   IsPrefixOfStringInTable_x64_4, _TEXT$00\n\n ; vim:set tw=80 ts=8 sw=4 sts=4 et syntax=masm fo=croql comments=\\:;           :\n\n\nS:\\Source\\tracer&gt;iaca x64\\Release\\StringTable2.dll\nIntel(R) Architecture Code Analyzer\nVersion -  v3.0-28-g1ba2cbb build date: 2017-10-23;17:30:24\nAnalyzed File -  x64\\Release\\StringTable2.dll\nBinary Format - 64Bit\nArchitecture  -  SKL\nAnalysis Type - Throughput\n\nThroughput Analysis Report\n--------------------------\nBlock Throughput: 3.48 Cycles       Throughput Bottleneck: FrontEnd\nLoop Count:  24\nPort Binding In Cycles Per Iteration:\n----------------------------------------------------------------------------\n| Port   |  0  - DV  |  1  |  2  - D   |  3  - D   |  4  |  5  |  6  |  7  |\n----------------------------------------------------------------------------\n| Cycles | 2.0   0.0 | 1.0 | 3.5   3.5 | 3.5   3.5 | 0.0 | 3.0 | 2.0 | 0.0 |\n----------------------------------------------------------------------------\n\nDV - Divider pipe (on port 0)\nD - Data fetch pipe (on ports 2 and 3)\n* - instruction micro-ops not bound to a port\n^ - Micro Fusion occurred\n\n|    | Ports pressure in cycles        | |\n|μops|0DV| 1 | 2 - D | 3 - D |4| 5 | 6 |7|\n-------------------------------------------\n| 1  |   |   |0.5 0.5|0.5 0.5| |   |   | | mov rax, qword ptr [rdx+0x8]\n| 2  |   |   |0.5 0.5|0.5 0.5| |1.0|   | | vpbroadcastb xmm4, byte ptr [rdx]\n| 1  |   |   |0.5 0.5|0.5 0.5| |   |   | | vmovdqa xmm3, xmmword ptr [rcx+0x20]\n| 1  |   |   |0.5 0.5|0.5 0.5| |   |   | | vmovdqu xmm0, xmmword ptr [rax]\n| 1  |1.0|   |       |       | |   |   | | vpcmpgtb xmm1, xmm3, xmm4\n| 2^ |   |   |0.5 0.5|0.5 0.5| |1.0|   | | vpshufb xmm5, xmm0, xmmword ptr [rcx+0x10]\n| 2^ |   |1.0|0.5 0.5|0.5 0.5| |   |   | | vpcmpeqb xmm5, xmm5, xmmword ptr [rcx]\n| 2  |1.0|   |       |       | |1.0|   | | vptest xmm1, xmm5\n| 1  |   |   |       |       | |   |1.0| | jnb 0x10\n| 1* |   |   |       |       | |   |   | | xor eax, eax\n| 1  |   |   |       |       | |   |1.0| | not al\n| 3^ |   |   |0.5 0.5|0.5 0.5| |   |   | | ret\nTotal Num Of μops: 18"
  },
  {
    "objectID": "tools/pyscript/index.html",
    "href": "tools/pyscript/index.html",
    "title": "PyScript Test",
    "section": "",
    "text": "Hello world!  This is the current date and time, as computed by Python:"
  }
]